
Ds3231_Stm32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007238  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  080073c8  080073c8  000083c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007574  08007574  00009060  2**0
                  CONTENTS
  4 .ARM          00000008  08007574  08007574  00008574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800757c  0800757c  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800757c  0800757c  0000857c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007580  08007580  00008580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007584  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009060  2**0
                  CONTENTS
 10 .bss          00004254  20000060  20000060  00009060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200042b4  200042b4  00009060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 13 .debug_info   000114b2  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b70  00000000  00000000  0001a542  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa8  00000000  00000000  0001d0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c2b  00000000  00000000  0001e060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022563  00000000  00000000  0001ec8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013478  00000000  00000000  000411ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce35d  00000000  00000000  00054666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001229c3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000045f0  00000000  00000000  00122a08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  00126ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080073b0 	.word	0x080073b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080073b0 	.word	0x080073b0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	4a07      	ldr	r2, [pc, #28]	@ (800059c <vApplicationGetIdleTaskMemory+0x2c>)
 8000580:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	4a06      	ldr	r2, [pc, #24]	@ (80005a0 <vApplicationGetIdleTaskMemory+0x30>)
 8000586:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2280      	movs	r2, #128	@ 0x80
 800058c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800058e:	bf00      	nop
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	2000007c 	.word	0x2000007c
 80005a0:	200000d0 	.word	0x200000d0

080005a4 <BCD2DEC>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t BCD2DEC(uint8_t data){
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
	return (data>>4)*10 + (data&0x0f);
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	091b      	lsrs	r3, r3, #4
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	461a      	mov	r2, r3
 80005b6:	0092      	lsls	r2, r2, #2
 80005b8:	4413      	add	r3, r2
 80005ba:	005b      	lsls	r3, r3, #1
 80005bc:	b2da      	uxtb	r2, r3
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	f003 030f 	and.w	r3, r3, #15
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	4413      	add	r3, r2
 80005c8:	b2db      	uxtb	r3, r3
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
	...

080005d8 <HAL_I2C_MemRxCpltCallback>:

	  HAL_I2C_Mem_Write_IT(&hi2c1, DS3231_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT, u8_tranBuffer,7);
}

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hi2c);

  if(hi2c->Instance == I2C1){
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a24      	ldr	r2, [pc, #144]	@ (8000678 <HAL_I2C_MemRxCpltCallback+0xa0>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d141      	bne.n	800066e <HAL_I2C_MemRxCpltCallback+0x96>
    // Lấy giá trị giây, phút, giờ, ngày, tháng, năm từ bộ đệm
    DS3231_TimeNow.sec = BCD2DEC(u8_revBuffer[0] & 0x7F); // Giữ lại chỉ 7 bit thấp của giây
 80005ea:	4b24      	ldr	r3, [pc, #144]	@ (800067c <HAL_I2C_MemRxCpltCallback+0xa4>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff ffd5 	bl	80005a4 <BCD2DEC>
 80005fa:	4603      	mov	r3, r0
 80005fc:	461a      	mov	r2, r3
 80005fe:	4b20      	ldr	r3, [pc, #128]	@ (8000680 <HAL_I2C_MemRxCpltCallback+0xa8>)
 8000600:	709a      	strb	r2, [r3, #2]
    DS3231_TimeNow.min = BCD2DEC(u8_revBuffer[1]);
 8000602:	4b1e      	ldr	r3, [pc, #120]	@ (800067c <HAL_I2C_MemRxCpltCallback+0xa4>)
 8000604:	785b      	ldrb	r3, [r3, #1]
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff ffcc 	bl	80005a4 <BCD2DEC>
 800060c:	4603      	mov	r3, r0
 800060e:	461a      	mov	r2, r3
 8000610:	4b1b      	ldr	r3, [pc, #108]	@ (8000680 <HAL_I2C_MemRxCpltCallback+0xa8>)
 8000612:	705a      	strb	r2, [r3, #1]
    DS3231_TimeNow.hour = BCD2DEC(u8_revBuffer[2]);
 8000614:	4b19      	ldr	r3, [pc, #100]	@ (800067c <HAL_I2C_MemRxCpltCallback+0xa4>)
 8000616:	789b      	ldrb	r3, [r3, #2]
 8000618:	4618      	mov	r0, r3
 800061a:	f7ff ffc3 	bl	80005a4 <BCD2DEC>
 800061e:	4603      	mov	r3, r0
 8000620:	461a      	mov	r2, r3
 8000622:	4b17      	ldr	r3, [pc, #92]	@ (8000680 <HAL_I2C_MemRxCpltCallback+0xa8>)
 8000624:	701a      	strb	r2, [r3, #0]

    DS3231_TimeNow.day = BCD2DEC(u8_revBuffer[3]);
 8000626:	4b15      	ldr	r3, [pc, #84]	@ (800067c <HAL_I2C_MemRxCpltCallback+0xa4>)
 8000628:	78db      	ldrb	r3, [r3, #3]
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff ffba 	bl	80005a4 <BCD2DEC>
 8000630:	4603      	mov	r3, r0
 8000632:	461a      	mov	r2, r3
 8000634:	4b12      	ldr	r3, [pc, #72]	@ (8000680 <HAL_I2C_MemRxCpltCallback+0xa8>)
 8000636:	711a      	strb	r2, [r3, #4]
    DS3231_TimeNow.date = BCD2DEC(u8_revBuffer[4]);
 8000638:	4b10      	ldr	r3, [pc, #64]	@ (800067c <HAL_I2C_MemRxCpltCallback+0xa4>)
 800063a:	791b      	ldrb	r3, [r3, #4]
 800063c:	4618      	mov	r0, r3
 800063e:	f7ff ffb1 	bl	80005a4 <BCD2DEC>
 8000642:	4603      	mov	r3, r0
 8000644:	461a      	mov	r2, r3
 8000646:	4b0e      	ldr	r3, [pc, #56]	@ (8000680 <HAL_I2C_MemRxCpltCallback+0xa8>)
 8000648:	70da      	strb	r2, [r3, #3]
    DS3231_TimeNow.month = BCD2DEC(u8_revBuffer[5]);
 800064a:	4b0c      	ldr	r3, [pc, #48]	@ (800067c <HAL_I2C_MemRxCpltCallback+0xa4>)
 800064c:	795b      	ldrb	r3, [r3, #5]
 800064e:	4618      	mov	r0, r3
 8000650:	f7ff ffa8 	bl	80005a4 <BCD2DEC>
 8000654:	4603      	mov	r3, r0
 8000656:	461a      	mov	r2, r3
 8000658:	4b09      	ldr	r3, [pc, #36]	@ (8000680 <HAL_I2C_MemRxCpltCallback+0xa8>)
 800065a:	715a      	strb	r2, [r3, #5]
    DS3231_TimeNow.year = BCD2DEC(u8_revBuffer[6]);
 800065c:	4b07      	ldr	r3, [pc, #28]	@ (800067c <HAL_I2C_MemRxCpltCallback+0xa4>)
 800065e:	799b      	ldrb	r3, [r3, #6]
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff ff9f 	bl	80005a4 <BCD2DEC>
 8000666:	4603      	mov	r3, r0
 8000668:	461a      	mov	r2, r3
 800066a:	4b05      	ldr	r3, [pc, #20]	@ (8000680 <HAL_I2C_MemRxCpltCallback+0xa8>)
 800066c:	719a      	strb	r2, [r3, #6]
  }

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800066e:	bf00      	nop
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40005400 	.word	0x40005400
 800067c:	2000037c 	.word	0x2000037c
 8000680:	20000408 	.word	0x20000408

08000684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000684:	b5b0      	push	{r4, r5, r7, lr}
 8000686:	b09c      	sub	sp, #112	@ 0x70
 8000688:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068a:	f000 fbe5 	bl	8000e58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068e:	f000 f875 	bl	800077c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000692:	f000 f935 	bl	8000900 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000696:	f000 f8db 	bl	8000850 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800069a:	f000 f907 	bl	80008ac <MX_USART1_UART_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 32, uint8_t);
 800069e:	4b2d      	ldr	r3, [pc, #180]	@ (8000754 <main+0xd0>)
 80006a0:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 80006a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 80006aa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80006ae:	2100      	movs	r1, #0
 80006b0:	4618      	mov	r0, r3
 80006b2:	f003 ff9a 	bl	80045ea <osMessageCreate>
 80006b6:	4603      	mov	r3, r0
 80006b8:	4a27      	ldr	r2, [pc, #156]	@ (8000758 <main+0xd4>)
 80006ba:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task2 */
  osThreadDef(Task2, StartDefaultTask, osPriorityBelowNormal, 0, 128);
 80006bc:	4b27      	ldr	r3, [pc, #156]	@ (800075c <main+0xd8>)
 80006be:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80006c2:	461d      	mov	r5, r3
 80006c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 80006d0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f003 ff27 	bl	800452a <osThreadCreate>
 80006dc:	4603      	mov	r3, r0
 80006de:	4a20      	ldr	r2, [pc, #128]	@ (8000760 <main+0xdc>)
 80006e0:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task1 */
  osThreadDef(Task1, StartTask02, osPriorityNormal, 0, 128);
 80006e2:	4b20      	ldr	r3, [pc, #128]	@ (8000764 <main+0xe0>)
 80006e4:	f107 0420 	add.w	r4, r7, #32
 80006e8:	461d      	mov	r5, r3
 80006ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 80006f6:	f107 0320 	add.w	r3, r7, #32
 80006fa:	2100      	movs	r1, #0
 80006fc:	4618      	mov	r0, r3
 80006fe:	f003 ff14 	bl	800452a <osThreadCreate>
 8000702:	4603      	mov	r3, r0
 8000704:	4a18      	ldr	r2, [pc, #96]	@ (8000768 <main+0xe4>)
 8000706:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task3 */
  osThreadDef(Task3, StartTask03, osPriorityNormal, 0, 128);
 8000708:	4b18      	ldr	r3, [pc, #96]	@ (800076c <main+0xe8>)
 800070a:	1d3c      	adds	r4, r7, #4
 800070c:	461d      	mov	r5, r3
 800070e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000710:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000712:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000716:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task3Handle = osThreadCreate(osThread(Task3), NULL);
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f003 ff03 	bl	800452a <osThreadCreate>
 8000724:	4603      	mov	r3, r0
 8000726:	4a12      	ldr	r2, [pc, #72]	@ (8000770 <main+0xec>)
 8000728:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */
  HAL_I2C_Mem_Read_IT(&hi2c1, DS3231_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT, u8_revBuffer, 7);
 800072a:	2307      	movs	r3, #7
 800072c:	9301      	str	r3, [sp, #4]
 800072e:	4b11      	ldr	r3, [pc, #68]	@ (8000774 <main+0xf0>)
 8000730:	9300      	str	r3, [sp, #0]
 8000732:	2301      	movs	r3, #1
 8000734:	2200      	movs	r2, #0
 8000736:	21d0      	movs	r1, #208	@ 0xd0
 8000738:	480f      	ldr	r0, [pc, #60]	@ (8000778 <main+0xf4>)
 800073a:	f001 f837 	bl	80017ac <HAL_I2C_Mem_Read_IT>
  osMessagePut(myQueue01Handle, (uint32_t)&u8_revBuffer, 10);
 800073e:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <main+0xd4>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	490c      	ldr	r1, [pc, #48]	@ (8000774 <main+0xf0>)
 8000744:	220a      	movs	r2, #10
 8000746:	4618      	mov	r0, r3
 8000748:	f003 ff78 	bl	800463c <osMessagePut>
  /* Start scheduler */
  osKernelStart();
 800074c:	f003 fed6 	bl	80044fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000750:	bf00      	nop
 8000752:	e7fd      	b.n	8000750 <main+0xcc>
 8000754:	080073c8 	.word	0x080073c8
 8000758:	20000378 	.word	0x20000378
 800075c:	080073e0 	.word	0x080073e0
 8000760:	2000036c 	.word	0x2000036c
 8000764:	08007404 	.word	0x08007404
 8000768:	20000370 	.word	0x20000370
 800076c:	08007428 	.word	0x08007428
 8000770:	20000374 	.word	0x20000374
 8000774:	2000037c 	.word	0x2000037c
 8000778:	200002d0 	.word	0x200002d0

0800077c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b094      	sub	sp, #80	@ 0x50
 8000780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000782:	f107 0320 	add.w	r3, r7, #32
 8000786:	2230      	movs	r2, #48	@ 0x30
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f006 f990 	bl	8006ab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a0:	2300      	movs	r3, #0
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	4b28      	ldr	r3, [pc, #160]	@ (8000848 <SystemClock_Config+0xcc>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a8:	4a27      	ldr	r2, [pc, #156]	@ (8000848 <SystemClock_Config+0xcc>)
 80007aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80007b0:	4b25      	ldr	r3, [pc, #148]	@ (8000848 <SystemClock_Config+0xcc>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007bc:	2300      	movs	r3, #0
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	4b22      	ldr	r3, [pc, #136]	@ (800084c <SystemClock_Config+0xd0>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a21      	ldr	r2, [pc, #132]	@ (800084c <SystemClock_Config+0xd0>)
 80007c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007ca:	6013      	str	r3, [r2, #0]
 80007cc:	4b1f      	ldr	r3, [pc, #124]	@ (800084c <SystemClock_Config+0xd0>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d8:	2302      	movs	r3, #2
 80007da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007dc:	2301      	movs	r3, #1
 80007de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e0:	2310      	movs	r3, #16
 80007e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e4:	2302      	movs	r3, #2
 80007e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007e8:	2300      	movs	r3, #0
 80007ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007ec:	2308      	movs	r3, #8
 80007ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007f0:	23a8      	movs	r3, #168	@ 0xa8
 80007f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f4:	2302      	movs	r3, #2
 80007f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007f8:	2304      	movs	r3, #4
 80007fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fc:	f107 0320 	add.w	r3, r7, #32
 8000800:	4618      	mov	r0, r3
 8000802:	f002 fd57 	bl	80032b4 <HAL_RCC_OscConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800080c:	f000 f9a4 	bl	8000b58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000810:	230f      	movs	r3, #15
 8000812:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000814:	2302      	movs	r3, #2
 8000816:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800081c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000820:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000822:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000826:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	2105      	movs	r1, #5
 800082e:	4618      	mov	r0, r3
 8000830:	f002 ffb8 	bl	80037a4 <HAL_RCC_ClockConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800083a:	f000 f98d 	bl	8000b58 <Error_Handler>
  }
}
 800083e:	bf00      	nop
 8000840:	3750      	adds	r7, #80	@ 0x50
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40023800 	.word	0x40023800
 800084c:	40007000 	.word	0x40007000

08000850 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000854:	4b12      	ldr	r3, [pc, #72]	@ (80008a0 <MX_I2C1_Init+0x50>)
 8000856:	4a13      	ldr	r2, [pc, #76]	@ (80008a4 <MX_I2C1_Init+0x54>)
 8000858:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800085a:	4b11      	ldr	r3, [pc, #68]	@ (80008a0 <MX_I2C1_Init+0x50>)
 800085c:	4a12      	ldr	r2, [pc, #72]	@ (80008a8 <MX_I2C1_Init+0x58>)
 800085e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000860:	4b0f      	ldr	r3, [pc, #60]	@ (80008a0 <MX_I2C1_Init+0x50>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000866:	4b0e      	ldr	r3, [pc, #56]	@ (80008a0 <MX_I2C1_Init+0x50>)
 8000868:	2200      	movs	r2, #0
 800086a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800086c:	4b0c      	ldr	r3, [pc, #48]	@ (80008a0 <MX_I2C1_Init+0x50>)
 800086e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000872:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000874:	4b0a      	ldr	r3, [pc, #40]	@ (80008a0 <MX_I2C1_Init+0x50>)
 8000876:	2200      	movs	r2, #0
 8000878:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800087a:	4b09      	ldr	r3, [pc, #36]	@ (80008a0 <MX_I2C1_Init+0x50>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000880:	4b07      	ldr	r3, [pc, #28]	@ (80008a0 <MX_I2C1_Init+0x50>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000886:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <MX_I2C1_Init+0x50>)
 8000888:	2200      	movs	r2, #0
 800088a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800088c:	4804      	ldr	r0, [pc, #16]	@ (80008a0 <MX_I2C1_Init+0x50>)
 800088e:	f000 fe33 	bl	80014f8 <HAL_I2C_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000898:	f000 f95e 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200002d0 	.word	0x200002d0
 80008a4:	40005400 	.word	0x40005400
 80008a8:	000186a0 	.word	0x000186a0

080008ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008b0:	4b11      	ldr	r3, [pc, #68]	@ (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008b2:	4a12      	ldr	r2, [pc, #72]	@ (80008fc <MX_USART1_UART_Init+0x50>)
 80008b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008b6:	4b10      	ldr	r3, [pc, #64]	@ (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008be:	4b0e      	ldr	r3, [pc, #56]	@ (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	@ (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	@ (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008d0:	4b09      	ldr	r3, [pc, #36]	@ (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008d2:	220c      	movs	r2, #12
 80008d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d6:	4b08      	ldr	r3, [pc, #32]	@ (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008dc:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008e2:	4805      	ldr	r0, [pc, #20]	@ (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008e4:	f003 f93e 	bl	8003b64 <HAL_UART_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008ee:	f000 f933 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20000324 	.word	0x20000324
 80008fc:	40011000 	.word	0x40011000

08000900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	4b17      	ldr	r3, [pc, #92]	@ (8000968 <MX_GPIO_Init+0x68>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	4a16      	ldr	r2, [pc, #88]	@ (8000968 <MX_GPIO_Init+0x68>)
 8000910:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000914:	6313      	str	r3, [r2, #48]	@ 0x30
 8000916:	4b14      	ldr	r3, [pc, #80]	@ (8000968 <MX_GPIO_Init+0x68>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	4b10      	ldr	r3, [pc, #64]	@ (8000968 <MX_GPIO_Init+0x68>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	4a0f      	ldr	r2, [pc, #60]	@ (8000968 <MX_GPIO_Init+0x68>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6313      	str	r3, [r2, #48]	@ 0x30
 8000932:	4b0d      	ldr	r3, [pc, #52]	@ (8000968 <MX_GPIO_Init+0x68>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <MX_GPIO_Init+0x68>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	4a08      	ldr	r2, [pc, #32]	@ (8000968 <MX_GPIO_Init+0x68>)
 8000948:	f043 0302 	orr.w	r3, r3, #2
 800094c:	6313      	str	r3, [r2, #48]	@ 0x30
 800094e:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <MX_GPIO_Init+0x68>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800095a:	bf00      	nop
 800095c:	3714      	adds	r7, #20
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800

0800096c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af02      	add	r7, sp, #8
 8000972:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_I2C_Mem_Read_IT(&hi2c1, DS3231_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT, u8_revBuffer, 7);
 8000974:	2307      	movs	r3, #7
 8000976:	9301      	str	r3, [sp, #4]
 8000978:	4b09      	ldr	r3, [pc, #36]	@ (80009a0 <StartDefaultTask+0x34>)
 800097a:	9300      	str	r3, [sp, #0]
 800097c:	2301      	movs	r3, #1
 800097e:	2200      	movs	r2, #0
 8000980:	21d0      	movs	r1, #208	@ 0xd0
 8000982:	4808      	ldr	r0, [pc, #32]	@ (80009a4 <StartDefaultTask+0x38>)
 8000984:	f000 ff12 	bl	80017ac <HAL_I2C_Mem_Read_IT>
	osMessagePut(myQueue01Handle, (uint32_t)&u8_revBuffer, 10);
 8000988:	4b07      	ldr	r3, [pc, #28]	@ (80009a8 <StartDefaultTask+0x3c>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4904      	ldr	r1, [pc, #16]	@ (80009a0 <StartDefaultTask+0x34>)
 800098e:	220a      	movs	r2, #10
 8000990:	4618      	mov	r0, r3
 8000992:	f003 fe53 	bl	800463c <osMessagePut>
	osDelay(50);
 8000996:	2032      	movs	r0, #50	@ 0x32
 8000998:	f003 fe13 	bl	80045c2 <osDelay>
	HAL_I2C_Mem_Read_IT(&hi2c1, DS3231_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT, u8_revBuffer, 7);
 800099c:	bf00      	nop
 800099e:	e7e9      	b.n	8000974 <StartDefaultTask+0x8>
 80009a0:	2000037c 	.word	0x2000037c
 80009a4:	200002d0 	.word	0x200002d0
 80009a8:	20000378 	.word	0x20000378

080009ac <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
      if (HAL_UART_Receive(&huart1, &uartRxData, 1, HAL_MAX_DELAY) == HAL_OK) {
 80009b4:	f04f 33ff 	mov.w	r3, #4294967295
 80009b8:	2201      	movs	r2, #1
 80009ba:	490a      	ldr	r1, [pc, #40]	@ (80009e4 <StartTask02+0x38>)
 80009bc:	480a      	ldr	r0, [pc, #40]	@ (80009e8 <StartTask02+0x3c>)
 80009be:	f003 f9ac 	bl	8003d1a <HAL_UART_Receive>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d109      	bne.n	80009dc <StartTask02+0x30>
          osMessagePut(myQueue01Handle, uartRxData, osWaitForever);
 80009c8:	4b08      	ldr	r3, [pc, #32]	@ (80009ec <StartTask02+0x40>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a05      	ldr	r2, [pc, #20]	@ (80009e4 <StartTask02+0x38>)
 80009ce:	7812      	ldrb	r2, [r2, #0]
 80009d0:	4611      	mov	r1, r2
 80009d2:	f04f 32ff 	mov.w	r2, #4294967295
 80009d6:	4618      	mov	r0, r3
 80009d8:	f003 fe30 	bl	800463c <osMessagePut>
      }
      osDelay(50);
 80009dc:	2032      	movs	r0, #50	@ 0x32
 80009de:	f003 fdf0 	bl	80045c2 <osDelay>
      if (HAL_UART_Receive(&huart1, &uartRxData, 1, HAL_MAX_DELAY) == HAL_OK) {
 80009e2:	e7e7      	b.n	80009b4 <StartTask02+0x8>
 80009e4:	20000404 	.word	0x20000404
 80009e8:	20000324 	.word	0x20000324
 80009ec:	20000378 	.word	0x20000378

080009f0 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 80009f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009f2:	b093      	sub	sp, #76	@ 0x4c
 80009f4:	af06      	add	r7, sp, #24
 80009f6:	6178      	str	r0, [r7, #20]
  uint32_t lastReceivedTick = osKernelSysTick();
 80009f8:	f003 fd87 	bl	800450a <osKernelSysTick>
 80009fc:	62f8      	str	r0, [r7, #44]	@ 0x2c
  osEvent event;
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	event = osMessageGet(myQueue01Handle, 0);
 80009fe:	4b4f      	ldr	r3, [pc, #316]	@ (8000b3c <StartTask03+0x14c>)
 8000a00:	6819      	ldr	r1, [r3, #0]
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	2200      	movs	r2, #0
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f003 fe57 	bl	80046bc <osMessageGet>
	if (event.status == osEventMessage) {
 8000a0e:	69fb      	ldr	r3, [r7, #28]
 8000a10:	2b10      	cmp	r3, #16
 8000a12:	d148      	bne.n	8000aa6 <StartTask03+0xb6>
		lastReceivedTick = osKernelSysTick();
 8000a14:	f003 fd79 	bl	800450a <osKernelSysTick>
 8000a18:	62f8      	str	r0, [r7, #44]	@ 0x2c
		uint8_t receivedChar = event.value.v;
 8000a1a:	6a3b      	ldr	r3, [r7, #32]
 8000a1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

		if (receivedChar == 'D') { // Nếu ấn ký tự D (Date) từ bàn phím: Sẽ hiển thị Ngày:Tháng:Năm
 8000a20:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000a24:	2b44      	cmp	r3, #68	@ 0x44
 8000a26:	d11f      	bne.n	8000a68 <StartTask03+0x78>
			snprintf(uartBuf, sizeof(uartBuf), "(Pressed D)=> Display only Date, Day: %02d/%02d/%04d (Day: %d)\r\n", // format DD:MM:YYYY
					DS3231_TimeNow.date, DS3231_TimeNow.month, DS3231_TimeNow.year, DS3231_TimeNow.day);
 8000a28:	4b45      	ldr	r3, [pc, #276]	@ (8000b40 <StartTask03+0x150>)
 8000a2a:	78db      	ldrb	r3, [r3, #3]
			snprintf(uartBuf, sizeof(uartBuf), "(Pressed D)=> Display only Date, Day: %02d/%02d/%04d (Day: %d)\r\n", // format DD:MM:YYYY
 8000a2c:	4618      	mov	r0, r3
					DS3231_TimeNow.date, DS3231_TimeNow.month, DS3231_TimeNow.year, DS3231_TimeNow.day);
 8000a2e:	4b44      	ldr	r3, [pc, #272]	@ (8000b40 <StartTask03+0x150>)
 8000a30:	795b      	ldrb	r3, [r3, #5]
			snprintf(uartBuf, sizeof(uartBuf), "(Pressed D)=> Display only Date, Day: %02d/%02d/%04d (Day: %d)\r\n", // format DD:MM:YYYY
 8000a32:	461a      	mov	r2, r3
					DS3231_TimeNow.date, DS3231_TimeNow.month, DS3231_TimeNow.year, DS3231_TimeNow.day);
 8000a34:	4b42      	ldr	r3, [pc, #264]	@ (8000b40 <StartTask03+0x150>)
 8000a36:	799b      	ldrb	r3, [r3, #6]
			snprintf(uartBuf, sizeof(uartBuf), "(Pressed D)=> Display only Date, Day: %02d/%02d/%04d (Day: %d)\r\n", // format DD:MM:YYYY
 8000a38:	4619      	mov	r1, r3
					DS3231_TimeNow.date, DS3231_TimeNow.month, DS3231_TimeNow.year, DS3231_TimeNow.day);
 8000a3a:	4b41      	ldr	r3, [pc, #260]	@ (8000b40 <StartTask03+0x150>)
 8000a3c:	791b      	ldrb	r3, [r3, #4]
			snprintf(uartBuf, sizeof(uartBuf), "(Pressed D)=> Display only Date, Day: %02d/%02d/%04d (Day: %d)\r\n", // format DD:MM:YYYY
 8000a3e:	9302      	str	r3, [sp, #8]
 8000a40:	9101      	str	r1, [sp, #4]
 8000a42:	9200      	str	r2, [sp, #0]
 8000a44:	4603      	mov	r3, r0
 8000a46:	4a3f      	ldr	r2, [pc, #252]	@ (8000b44 <StartTask03+0x154>)
 8000a48:	2180      	movs	r1, #128	@ 0x80
 8000a4a:	483f      	ldr	r0, [pc, #252]	@ (8000b48 <StartTask03+0x158>)
 8000a4c:	f005 fffc 	bl	8006a48 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t *)uartBuf, strlen(uartBuf), HAL_MAX_DELAY);
 8000a50:	483d      	ldr	r0, [pc, #244]	@ (8000b48 <StartTask03+0x158>)
 8000a52:	f7ff fbbd 	bl	80001d0 <strlen>
 8000a56:	4603      	mov	r3, r0
 8000a58:	b29a      	uxth	r2, r3
 8000a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5e:	493a      	ldr	r1, [pc, #232]	@ (8000b48 <StartTask03+0x158>)
 8000a60:	483a      	ldr	r0, [pc, #232]	@ (8000b4c <StartTask03+0x15c>)
 8000a62:	f003 f8cf 	bl	8003c04 <HAL_UART_Transmit>
 8000a66:	e01e      	b.n	8000aa6 <StartTask03+0xb6>
		} else if (receivedChar == 'T') { // Nếu ấn ký tự T (Time) từ bàn phím: Sẽ hiển thị Giờ:Phút:Giây
 8000a68:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000a6c:	2b54      	cmp	r3, #84	@ 0x54
 8000a6e:	d11a      	bne.n	8000aa6 <StartTask03+0xb6>
			snprintf(uartBuf, sizeof(uartBuf), "(Pressed T)=> Display only Time: %02d:%02d:%02d\r\n", // format hh:mm:ss
					DS3231_TimeNow.hour, DS3231_TimeNow.min, DS3231_TimeNow.sec);
 8000a70:	4b33      	ldr	r3, [pc, #204]	@ (8000b40 <StartTask03+0x150>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
			snprintf(uartBuf, sizeof(uartBuf), "(Pressed T)=> Display only Time: %02d:%02d:%02d\r\n", // format hh:mm:ss
 8000a74:	4619      	mov	r1, r3
					DS3231_TimeNow.hour, DS3231_TimeNow.min, DS3231_TimeNow.sec);
 8000a76:	4b32      	ldr	r3, [pc, #200]	@ (8000b40 <StartTask03+0x150>)
 8000a78:	785b      	ldrb	r3, [r3, #1]
			snprintf(uartBuf, sizeof(uartBuf), "(Pressed T)=> Display only Time: %02d:%02d:%02d\r\n", // format hh:mm:ss
 8000a7a:	461a      	mov	r2, r3
					DS3231_TimeNow.hour, DS3231_TimeNow.min, DS3231_TimeNow.sec);
 8000a7c:	4b30      	ldr	r3, [pc, #192]	@ (8000b40 <StartTask03+0x150>)
 8000a7e:	789b      	ldrb	r3, [r3, #2]
			snprintf(uartBuf, sizeof(uartBuf), "(Pressed T)=> Display only Time: %02d:%02d:%02d\r\n", // format hh:mm:ss
 8000a80:	9301      	str	r3, [sp, #4]
 8000a82:	9200      	str	r2, [sp, #0]
 8000a84:	460b      	mov	r3, r1
 8000a86:	4a32      	ldr	r2, [pc, #200]	@ (8000b50 <StartTask03+0x160>)
 8000a88:	2180      	movs	r1, #128	@ 0x80
 8000a8a:	482f      	ldr	r0, [pc, #188]	@ (8000b48 <StartTask03+0x158>)
 8000a8c:	f005 ffdc 	bl	8006a48 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t *)uartBuf, strlen(uartBuf), HAL_MAX_DELAY);
 8000a90:	482d      	ldr	r0, [pc, #180]	@ (8000b48 <StartTask03+0x158>)
 8000a92:	f7ff fb9d 	bl	80001d0 <strlen>
 8000a96:	4603      	mov	r3, r0
 8000a98:	b29a      	uxth	r2, r3
 8000a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9e:	492a      	ldr	r1, [pc, #168]	@ (8000b48 <StartTask03+0x158>)
 8000aa0:	482a      	ldr	r0, [pc, #168]	@ (8000b4c <StartTask03+0x15c>)
 8000aa2:	f003 f8af 	bl	8003c04 <HAL_UART_Transmit>
		}
	}

	// Nhận dữ liệu từ Queue thời gian
	event = osMessageGet(myQueue01Handle, 0);
 8000aa6:	4b25      	ldr	r3, [pc, #148]	@ (8000b3c <StartTask03+0x14c>)
 8000aa8:	6819      	ldr	r1, [r3, #0]
 8000aaa:	463b      	mov	r3, r7
 8000aac:	2200      	movs	r2, #0
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f003 fe04 	bl	80046bc <osMessageGet>
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	463a      	mov	r2, r7
 8000aba:	ca07      	ldmia	r2, {r0, r1, r2}
 8000abc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (event.status != osEventMessage) {
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	2b10      	cmp	r3, #16
 8000ac4:	d035      	beq.n	8000b32 <StartTask03+0x142>
// Nếu không ấn phím nào kể từ lần ấn gần nhất 2 giây, hiển thị toàn bộ thông tin Ngày:Tháng:Năm Giờ:Phút:Giây
		if (osKernelSysTick() - lastReceivedTick > 2000) {
 8000ac6:	f003 fd20 	bl	800450a <osKernelSysTick>
 8000aca:	4602      	mov	r2, r0
 8000acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ace:	1ad3      	subs	r3, r2, r3
 8000ad0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000ad4:	d92d      	bls.n	8000b32 <StartTask03+0x142>
			snprintf(uartBuf, sizeof(uartBuf), "(No key pressed)=> Auto display Full (Date, Time, Day): %02d/%02d/%04d %02d:%02d:%02d (Day: %d)\r\n",
					DS3231_TimeNow.date, DS3231_TimeNow.month, DS3231_TimeNow.year,
 8000ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b40 <StartTask03+0x150>)
 8000ad8:	78db      	ldrb	r3, [r3, #3]
			snprintf(uartBuf, sizeof(uartBuf), "(No key pressed)=> Auto display Full (Date, Time, Day): %02d/%02d/%04d %02d:%02d:%02d (Day: %d)\r\n",
 8000ada:	461e      	mov	r6, r3
					DS3231_TimeNow.date, DS3231_TimeNow.month, DS3231_TimeNow.year,
 8000adc:	4b18      	ldr	r3, [pc, #96]	@ (8000b40 <StartTask03+0x150>)
 8000ade:	795b      	ldrb	r3, [r3, #5]
			snprintf(uartBuf, sizeof(uartBuf), "(No key pressed)=> Auto display Full (Date, Time, Day): %02d/%02d/%04d %02d:%02d:%02d (Day: %d)\r\n",
 8000ae0:	461a      	mov	r2, r3
					DS3231_TimeNow.date, DS3231_TimeNow.month, DS3231_TimeNow.year,
 8000ae2:	4b17      	ldr	r3, [pc, #92]	@ (8000b40 <StartTask03+0x150>)
 8000ae4:	799b      	ldrb	r3, [r3, #6]
			snprintf(uartBuf, sizeof(uartBuf), "(No key pressed)=> Auto display Full (Date, Time, Day): %02d/%02d/%04d %02d:%02d:%02d (Day: %d)\r\n",
 8000ae6:	4619      	mov	r1, r3
					DS3231_TimeNow.hour, DS3231_TimeNow.min, DS3231_TimeNow.sec, DS3231_TimeNow.day);
 8000ae8:	4b15      	ldr	r3, [pc, #84]	@ (8000b40 <StartTask03+0x150>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
			snprintf(uartBuf, sizeof(uartBuf), "(No key pressed)=> Auto display Full (Date, Time, Day): %02d/%02d/%04d %02d:%02d:%02d (Day: %d)\r\n",
 8000aec:	4618      	mov	r0, r3
					DS3231_TimeNow.hour, DS3231_TimeNow.min, DS3231_TimeNow.sec, DS3231_TimeNow.day);
 8000aee:	4b14      	ldr	r3, [pc, #80]	@ (8000b40 <StartTask03+0x150>)
 8000af0:	785b      	ldrb	r3, [r3, #1]
			snprintf(uartBuf, sizeof(uartBuf), "(No key pressed)=> Auto display Full (Date, Time, Day): %02d/%02d/%04d %02d:%02d:%02d (Day: %d)\r\n",
 8000af2:	461c      	mov	r4, r3
					DS3231_TimeNow.hour, DS3231_TimeNow.min, DS3231_TimeNow.sec, DS3231_TimeNow.day);
 8000af4:	4b12      	ldr	r3, [pc, #72]	@ (8000b40 <StartTask03+0x150>)
 8000af6:	789b      	ldrb	r3, [r3, #2]
			snprintf(uartBuf, sizeof(uartBuf), "(No key pressed)=> Auto display Full (Date, Time, Day): %02d/%02d/%04d %02d:%02d:%02d (Day: %d)\r\n",
 8000af8:	461d      	mov	r5, r3
					DS3231_TimeNow.hour, DS3231_TimeNow.min, DS3231_TimeNow.sec, DS3231_TimeNow.day);
 8000afa:	4b11      	ldr	r3, [pc, #68]	@ (8000b40 <StartTask03+0x150>)
 8000afc:	791b      	ldrb	r3, [r3, #4]
			snprintf(uartBuf, sizeof(uartBuf), "(No key pressed)=> Auto display Full (Date, Time, Day): %02d/%02d/%04d %02d:%02d:%02d (Day: %d)\r\n",
 8000afe:	9305      	str	r3, [sp, #20]
 8000b00:	9504      	str	r5, [sp, #16]
 8000b02:	9403      	str	r4, [sp, #12]
 8000b04:	9002      	str	r0, [sp, #8]
 8000b06:	9101      	str	r1, [sp, #4]
 8000b08:	9200      	str	r2, [sp, #0]
 8000b0a:	4633      	mov	r3, r6
 8000b0c:	4a11      	ldr	r2, [pc, #68]	@ (8000b54 <StartTask03+0x164>)
 8000b0e:	2180      	movs	r1, #128	@ 0x80
 8000b10:	480d      	ldr	r0, [pc, #52]	@ (8000b48 <StartTask03+0x158>)
 8000b12:	f005 ff99 	bl	8006a48 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t *)uartBuf, strlen(uartBuf), HAL_MAX_DELAY);
 8000b16:	480c      	ldr	r0, [pc, #48]	@ (8000b48 <StartTask03+0x158>)
 8000b18:	f7ff fb5a 	bl	80001d0 <strlen>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	b29a      	uxth	r2, r3
 8000b20:	f04f 33ff 	mov.w	r3, #4294967295
 8000b24:	4908      	ldr	r1, [pc, #32]	@ (8000b48 <StartTask03+0x158>)
 8000b26:	4809      	ldr	r0, [pc, #36]	@ (8000b4c <StartTask03+0x15c>)
 8000b28:	f003 f86c 	bl	8003c04 <HAL_UART_Transmit>
			lastReceivedTick = osKernelSysTick();
 8000b2c:	f003 fced 	bl	800450a <osKernelSysTick>
 8000b30:	62f8      	str	r0, [r7, #44]	@ 0x2c
		}
	}

	osDelay(50);
 8000b32:	2032      	movs	r0, #50	@ 0x32
 8000b34:	f003 fd45 	bl	80045c2 <osDelay>
	event = osMessageGet(myQueue01Handle, 0);
 8000b38:	e761      	b.n	80009fe <StartTask03+0xe>
 8000b3a:	bf00      	nop
 8000b3c:	20000378 	.word	0x20000378
 8000b40:	20000408 	.word	0x20000408
 8000b44:	08007444 	.word	0x08007444
 8000b48:	20000384 	.word	0x20000384
 8000b4c:	20000324 	.word	0x20000324
 8000b50:	08007488 	.word	0x08007488
 8000b54:	080074bc 	.word	0x080074bc

08000b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b5c:	b672      	cpsid	i
}
 8000b5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <Error_Handler+0x8>

08000b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	4b12      	ldr	r3, [pc, #72]	@ (8000bb8 <HAL_MspInit+0x54>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b72:	4a11      	ldr	r2, [pc, #68]	@ (8000bb8 <HAL_MspInit+0x54>)
 8000b74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b78:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb8 <HAL_MspInit+0x54>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	603b      	str	r3, [r7, #0]
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb8 <HAL_MspInit+0x54>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb8 <HAL_MspInit+0x54>)
 8000b90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b96:	4b08      	ldr	r3, [pc, #32]	@ (8000bb8 <HAL_MspInit+0x54>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	210f      	movs	r1, #15
 8000ba6:	f06f 0001 	mvn.w	r0, #1
 8000baa:	f000 faa2 	bl	80010f2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40023800 	.word	0x40023800

08000bbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08a      	sub	sp, #40	@ 0x28
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a21      	ldr	r2, [pc, #132]	@ (8000c60 <HAL_I2C_MspInit+0xa4>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d13b      	bne.n	8000c56 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	4b20      	ldr	r3, [pc, #128]	@ (8000c64 <HAL_I2C_MspInit+0xa8>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	4a1f      	ldr	r2, [pc, #124]	@ (8000c64 <HAL_I2C_MspInit+0xa8>)
 8000be8:	f043 0302 	orr.w	r3, r3, #2
 8000bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bee:	4b1d      	ldr	r3, [pc, #116]	@ (8000c64 <HAL_I2C_MspInit+0xa8>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	f003 0302 	and.w	r3, r3, #2
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bfa:	23c0      	movs	r3, #192	@ 0xc0
 8000bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bfe:	2312      	movs	r3, #18
 8000c00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c06:	2303      	movs	r3, #3
 8000c08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c0a:	2304      	movs	r3, #4
 8000c0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	4814      	ldr	r0, [pc, #80]	@ (8000c68 <HAL_I2C_MspInit+0xac>)
 8000c16:	f000 fad3 	bl	80011c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	4b11      	ldr	r3, [pc, #68]	@ (8000c64 <HAL_I2C_MspInit+0xa8>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c22:	4a10      	ldr	r2, [pc, #64]	@ (8000c64 <HAL_I2C_MspInit+0xa8>)
 8000c24:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c64 <HAL_I2C_MspInit+0xa8>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2105      	movs	r1, #5
 8000c3a:	201f      	movs	r0, #31
 8000c3c:	f000 fa59 	bl	80010f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c40:	201f      	movs	r0, #31
 8000c42:	f000 fa72 	bl	800112a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2105      	movs	r1, #5
 8000c4a:	2020      	movs	r0, #32
 8000c4c:	f000 fa51 	bl	80010f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000c50:	2020      	movs	r0, #32
 8000c52:	f000 fa6a 	bl	800112a <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c56:	bf00      	nop
 8000c58:	3728      	adds	r7, #40	@ 0x28
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40005400 	.word	0x40005400
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40020400 	.word	0x40020400

08000c6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08a      	sub	sp, #40	@ 0x28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a19      	ldr	r2, [pc, #100]	@ (8000cf0 <HAL_UART_MspInit+0x84>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d12c      	bne.n	8000ce8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	4b18      	ldr	r3, [pc, #96]	@ (8000cf4 <HAL_UART_MspInit+0x88>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c96:	4a17      	ldr	r2, [pc, #92]	@ (8000cf4 <HAL_UART_MspInit+0x88>)
 8000c98:	f043 0310 	orr.w	r3, r3, #16
 8000c9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c9e:	4b15      	ldr	r3, [pc, #84]	@ (8000cf4 <HAL_UART_MspInit+0x88>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca2:	f003 0310 	and.w	r3, r3, #16
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	4b11      	ldr	r3, [pc, #68]	@ (8000cf4 <HAL_UART_MspInit+0x88>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb2:	4a10      	ldr	r2, [pc, #64]	@ (8000cf4 <HAL_UART_MspInit+0x88>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cba:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf4 <HAL_UART_MspInit+0x88>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cc6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cd8:	2307      	movs	r3, #7
 8000cda:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4805      	ldr	r0, [pc, #20]	@ (8000cf8 <HAL_UART_MspInit+0x8c>)
 8000ce4:	f000 fa6c 	bl	80011c0 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000ce8:	bf00      	nop
 8000cea:	3728      	adds	r7, #40	@ 0x28
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40011000 	.word	0x40011000
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	40020000 	.word	0x40020000

08000cfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <NMI_Handler+0x4>

08000d04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <HardFault_Handler+0x4>

08000d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d10:	bf00      	nop
 8000d12:	e7fd      	b.n	8000d10 <MemManage_Handler+0x4>

08000d14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <BusFault_Handler+0x4>

08000d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d20:	bf00      	nop
 8000d22:	e7fd      	b.n	8000d20 <UsageFault_Handler+0x4>

08000d24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d36:	f000 f8e1 	bl	8000efc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000d3a:	f005 f937 	bl	8005fac <xTaskGetSchedulerState>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d001      	beq.n	8000d48 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000d44:	f005 fc00 	bl	8006548 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000d50:	4802      	ldr	r0, [pc, #8]	@ (8000d5c <I2C1_EV_IRQHandler+0x10>)
 8000d52:	f000 fde5 	bl	8001920 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	200002d0 	.word	0x200002d0

08000d60 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000d64:	4802      	ldr	r0, [pc, #8]	@ (8000d70 <I2C1_ER_IRQHandler+0x10>)
 8000d66:	f000 ff2e 	bl	8001bc6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	200002d0 	.word	0x200002d0

08000d74 <_sbrk>:
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	4a14      	ldr	r2, [pc, #80]	@ (8000dd0 <_sbrk+0x5c>)
 8000d7e:	4b15      	ldr	r3, [pc, #84]	@ (8000dd4 <_sbrk+0x60>)
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	4b13      	ldr	r3, [pc, #76]	@ (8000dd8 <_sbrk+0x64>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d102      	bne.n	8000d96 <_sbrk+0x22>
 8000d90:	4b11      	ldr	r3, [pc, #68]	@ (8000dd8 <_sbrk+0x64>)
 8000d92:	4a12      	ldr	r2, [pc, #72]	@ (8000ddc <_sbrk+0x68>)
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	4b10      	ldr	r3, [pc, #64]	@ (8000dd8 <_sbrk+0x64>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d207      	bcs.n	8000db4 <_sbrk+0x40>
 8000da4:	f005 fe8c 	bl	8006ac0 <__errno>
 8000da8:	4603      	mov	r3, r0
 8000daa:	220c      	movs	r2, #12
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	f04f 33ff 	mov.w	r3, #4294967295
 8000db2:	e009      	b.n	8000dc8 <_sbrk+0x54>
 8000db4:	4b08      	ldr	r3, [pc, #32]	@ (8000dd8 <_sbrk+0x64>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	4b07      	ldr	r3, [pc, #28]	@ (8000dd8 <_sbrk+0x64>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	4a05      	ldr	r2, [pc, #20]	@ (8000dd8 <_sbrk+0x64>)
 8000dc4:	6013      	str	r3, [r2, #0]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20020000 	.word	0x20020000
 8000dd4:	00000400 	.word	0x00000400
 8000dd8:	20000410 	.word	0x20000410
 8000ddc:	200042b8 	.word	0x200042b8

08000de0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de4:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <SystemInit+0x20>)
 8000de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dea:	4a05      	ldr	r2, [pc, #20]	@ (8000e00 <SystemInit+0x20>)
 8000dec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000df0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <Reset_Handler>:
 8000e04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e3c <LoopFillZerobss+0xe>
 8000e08:	f7ff ffea 	bl	8000de0 <SystemInit>
 8000e0c:	480c      	ldr	r0, [pc, #48]	@ (8000e40 <LoopFillZerobss+0x12>)
 8000e0e:	490d      	ldr	r1, [pc, #52]	@ (8000e44 <LoopFillZerobss+0x16>)
 8000e10:	4a0d      	ldr	r2, [pc, #52]	@ (8000e48 <LoopFillZerobss+0x1a>)
 8000e12:	2300      	movs	r3, #0
 8000e14:	e002      	b.n	8000e1c <LoopCopyDataInit>

08000e16 <CopyDataInit>:
 8000e16:	58d4      	ldr	r4, [r2, r3]
 8000e18:	50c4      	str	r4, [r0, r3]
 8000e1a:	3304      	adds	r3, #4

08000e1c <LoopCopyDataInit>:
 8000e1c:	18c4      	adds	r4, r0, r3
 8000e1e:	428c      	cmp	r4, r1
 8000e20:	d3f9      	bcc.n	8000e16 <CopyDataInit>
 8000e22:	4a0a      	ldr	r2, [pc, #40]	@ (8000e4c <LoopFillZerobss+0x1e>)
 8000e24:	4c0a      	ldr	r4, [pc, #40]	@ (8000e50 <LoopFillZerobss+0x22>)
 8000e26:	2300      	movs	r3, #0
 8000e28:	e001      	b.n	8000e2e <LoopFillZerobss>

08000e2a <FillZerobss>:
 8000e2a:	6013      	str	r3, [r2, #0]
 8000e2c:	3204      	adds	r2, #4

08000e2e <LoopFillZerobss>:
 8000e2e:	42a2      	cmp	r2, r4
 8000e30:	d3fb      	bcc.n	8000e2a <FillZerobss>
 8000e32:	f005 fe4b 	bl	8006acc <__libc_init_array>
 8000e36:	f7ff fc25 	bl	8000684 <main>
 8000e3a:	4770      	bx	lr
 8000e3c:	20020000 	.word	0x20020000
 8000e40:	20000000 	.word	0x20000000
 8000e44:	20000060 	.word	0x20000060
 8000e48:	08007584 	.word	0x08007584
 8000e4c:	20000060 	.word	0x20000060
 8000e50:	200042b4 	.word	0x200042b4

08000e54 <ADC_IRQHandler>:
 8000e54:	e7fe      	b.n	8000e54 <ADC_IRQHandler>
	...

08000e58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e98 <HAL_Init+0x40>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a0d      	ldr	r2, [pc, #52]	@ (8000e98 <HAL_Init+0x40>)
 8000e62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e68:	4b0b      	ldr	r3, [pc, #44]	@ (8000e98 <HAL_Init+0x40>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a0a      	ldr	r2, [pc, #40]	@ (8000e98 <HAL_Init+0x40>)
 8000e6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e74:	4b08      	ldr	r3, [pc, #32]	@ (8000e98 <HAL_Init+0x40>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a07      	ldr	r2, [pc, #28]	@ (8000e98 <HAL_Init+0x40>)
 8000e7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e80:	2003      	movs	r0, #3
 8000e82:	f000 f92b 	bl	80010dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e86:	200f      	movs	r0, #15
 8000e88:	f000 f808 	bl	8000e9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e8c:	f7ff fe6a 	bl	8000b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40023c00 	.word	0x40023c00

08000e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea4:	4b12      	ldr	r3, [pc, #72]	@ (8000ef0 <HAL_InitTick+0x54>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4b12      	ldr	r3, [pc, #72]	@ (8000ef4 <HAL_InitTick+0x58>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	4619      	mov	r1, r3
 8000eae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 f943 	bl	8001146 <HAL_SYSTICK_Config>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e00e      	b.n	8000ee8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b0f      	cmp	r3, #15
 8000ece:	d80a      	bhi.n	8000ee6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed8:	f000 f90b 	bl	80010f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000edc:	4a06      	ldr	r2, [pc, #24]	@ (8000ef8 <HAL_InitTick+0x5c>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	e000      	b.n	8000ee8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000000 	.word	0x20000000
 8000ef4:	20000008 	.word	0x20000008
 8000ef8:	20000004 	.word	0x20000004

08000efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f00:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <HAL_IncTick+0x20>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <HAL_IncTick+0x24>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	4a04      	ldr	r2, [pc, #16]	@ (8000f20 <HAL_IncTick+0x24>)
 8000f0e:	6013      	str	r3, [r2, #0]
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20000008 	.word	0x20000008
 8000f20:	20000414 	.word	0x20000414

08000f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return uwTick;
 8000f28:	4b03      	ldr	r3, [pc, #12]	@ (8000f38 <HAL_GetTick+0x14>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	20000414 	.word	0x20000414

08000f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6e:	4a04      	ldr	r2, [pc, #16]	@ (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	60d3      	str	r3, [r2, #12]
}
 8000f74:	bf00      	nop
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f88:	4b04      	ldr	r3, [pc, #16]	@ (8000f9c <__NVIC_GetPriorityGrouping+0x18>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	0a1b      	lsrs	r3, r3, #8
 8000f8e:	f003 0307 	and.w	r3, r3, #7
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	db0b      	blt.n	8000fca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	f003 021f 	and.w	r2, r3, #31
 8000fb8:	4907      	ldr	r1, [pc, #28]	@ (8000fd8 <__NVIC_EnableIRQ+0x38>)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	095b      	lsrs	r3, r3, #5
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000e100 	.word	0xe000e100

08000fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	6039      	str	r1, [r7, #0]
 8000fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	db0a      	blt.n	8001006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	490c      	ldr	r1, [pc, #48]	@ (8001028 <__NVIC_SetPriority+0x4c>)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	0112      	lsls	r2, r2, #4
 8000ffc:	b2d2      	uxtb	r2, r2
 8000ffe:	440b      	add	r3, r1
 8001000:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001004:	e00a      	b.n	800101c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4908      	ldr	r1, [pc, #32]	@ (800102c <__NVIC_SetPriority+0x50>)
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	f003 030f 	and.w	r3, r3, #15
 8001012:	3b04      	subs	r3, #4
 8001014:	0112      	lsls	r2, r2, #4
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	440b      	add	r3, r1
 800101a:	761a      	strb	r2, [r3, #24]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000e100 	.word	0xe000e100
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	@ 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f1c3 0307 	rsb	r3, r3, #7
 800104a:	2b04      	cmp	r3, #4
 800104c:	bf28      	it	cs
 800104e:	2304      	movcs	r3, #4
 8001050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3304      	adds	r3, #4
 8001056:	2b06      	cmp	r3, #6
 8001058:	d902      	bls.n	8001060 <NVIC_EncodePriority+0x30>
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3b03      	subs	r3, #3
 800105e:	e000      	b.n	8001062 <NVIC_EncodePriority+0x32>
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	f04f 32ff 	mov.w	r2, #4294967295
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43da      	mvns	r2, r3
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	401a      	ands	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001078:	f04f 31ff 	mov.w	r1, #4294967295
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	fa01 f303 	lsl.w	r3, r1, r3
 8001082:	43d9      	mvns	r1, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	4313      	orrs	r3, r2
         );
}
 800108a:	4618      	mov	r0, r3
 800108c:	3724      	adds	r7, #36	@ 0x24
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010a8:	d301      	bcc.n	80010ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00f      	b.n	80010ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ae:	4a0a      	ldr	r2, [pc, #40]	@ (80010d8 <SysTick_Config+0x40>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010b6:	210f      	movs	r1, #15
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295
 80010bc:	f7ff ff8e 	bl	8000fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c0:	4b05      	ldr	r3, [pc, #20]	@ (80010d8 <SysTick_Config+0x40>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c6:	4b04      	ldr	r3, [pc, #16]	@ (80010d8 <SysTick_Config+0x40>)
 80010c8:	2207      	movs	r2, #7
 80010ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	e000e010 	.word	0xe000e010

080010dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ff29 	bl	8000f3c <__NVIC_SetPriorityGrouping>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b086      	sub	sp, #24
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
 80010fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001104:	f7ff ff3e 	bl	8000f84 <__NVIC_GetPriorityGrouping>
 8001108:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	68b9      	ldr	r1, [r7, #8]
 800110e:	6978      	ldr	r0, [r7, #20]
 8001110:	f7ff ff8e 	bl	8001030 <NVIC_EncodePriority>
 8001114:	4602      	mov	r2, r0
 8001116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff5d 	bl	8000fdc <__NVIC_SetPriority>
}
 8001122:	bf00      	nop
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	4603      	mov	r3, r0
 8001132:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff31 	bl	8000fa0 <__NVIC_EnableIRQ>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff ffa2 	bl	8001098 <SysTick_Config>
 8001154:	4603      	mov	r3, r0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800115e:	b480      	push	{r7}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2b02      	cmp	r3, #2
 8001170:	d004      	beq.n	800117c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2280      	movs	r2, #128	@ 0x80
 8001176:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e00c      	b.n	8001196 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2205      	movs	r2, #5
 8001180:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f022 0201 	bic.w	r2, r2, #1
 8001192:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80011a2:	b480      	push	{r7}
 80011a4:	b083      	sub	sp, #12
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80011b0:	b2db      	uxtb	r3, r3
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
	...

080011c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b089      	sub	sp, #36	@ 0x24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]
 80011da:	e16b      	b.n	80014b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011dc:	2201      	movs	r2, #1
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	697a      	ldr	r2, [r7, #20]
 80011ec:	4013      	ands	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	f040 815a 	bne.w	80014ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f003 0303 	and.w	r3, r3, #3
 8001202:	2b01      	cmp	r3, #1
 8001204:	d005      	beq.n	8001212 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800120e:	2b02      	cmp	r3, #2
 8001210:	d130      	bne.n	8001274 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	2203      	movs	r2, #3
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4013      	ands	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	68da      	ldr	r2, [r3, #12]
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4313      	orrs	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001248:	2201      	movs	r2, #1
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	091b      	lsrs	r3, r3, #4
 800125e:	f003 0201 	and.w	r2, r3, #1
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 0303 	and.w	r3, r3, #3
 800127c:	2b03      	cmp	r3, #3
 800127e:	d017      	beq.n	80012b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	2203      	movs	r2, #3
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	689a      	ldr	r2, [r3, #8]
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 0303 	and.w	r3, r3, #3
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d123      	bne.n	8001304 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	08da      	lsrs	r2, r3, #3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3208      	adds	r2, #8
 80012c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	f003 0307 	and.w	r3, r3, #7
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	220f      	movs	r2, #15
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	691a      	ldr	r2, [r3, #16]
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	08da      	lsrs	r2, r3, #3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	3208      	adds	r2, #8
 80012fe:	69b9      	ldr	r1, [r7, #24]
 8001300:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	2203      	movs	r2, #3
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	43db      	mvns	r3, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4013      	ands	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 0203 	and.w	r2, r3, #3
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001340:	2b00      	cmp	r3, #0
 8001342:	f000 80b4 	beq.w	80014ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	4b60      	ldr	r3, [pc, #384]	@ (80014cc <HAL_GPIO_Init+0x30c>)
 800134c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800134e:	4a5f      	ldr	r2, [pc, #380]	@ (80014cc <HAL_GPIO_Init+0x30c>)
 8001350:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001354:	6453      	str	r3, [r2, #68]	@ 0x44
 8001356:	4b5d      	ldr	r3, [pc, #372]	@ (80014cc <HAL_GPIO_Init+0x30c>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800135a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001362:	4a5b      	ldr	r2, [pc, #364]	@ (80014d0 <HAL_GPIO_Init+0x310>)
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	089b      	lsrs	r3, r3, #2
 8001368:	3302      	adds	r3, #2
 800136a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800136e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f003 0303 	and.w	r3, r3, #3
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	220f      	movs	r2, #15
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	43db      	mvns	r3, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4013      	ands	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a52      	ldr	r2, [pc, #328]	@ (80014d4 <HAL_GPIO_Init+0x314>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d02b      	beq.n	80013e6 <HAL_GPIO_Init+0x226>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a51      	ldr	r2, [pc, #324]	@ (80014d8 <HAL_GPIO_Init+0x318>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d025      	beq.n	80013e2 <HAL_GPIO_Init+0x222>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a50      	ldr	r2, [pc, #320]	@ (80014dc <HAL_GPIO_Init+0x31c>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d01f      	beq.n	80013de <HAL_GPIO_Init+0x21e>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a4f      	ldr	r2, [pc, #316]	@ (80014e0 <HAL_GPIO_Init+0x320>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d019      	beq.n	80013da <HAL_GPIO_Init+0x21a>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a4e      	ldr	r2, [pc, #312]	@ (80014e4 <HAL_GPIO_Init+0x324>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d013      	beq.n	80013d6 <HAL_GPIO_Init+0x216>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a4d      	ldr	r2, [pc, #308]	@ (80014e8 <HAL_GPIO_Init+0x328>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d00d      	beq.n	80013d2 <HAL_GPIO_Init+0x212>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a4c      	ldr	r2, [pc, #304]	@ (80014ec <HAL_GPIO_Init+0x32c>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d007      	beq.n	80013ce <HAL_GPIO_Init+0x20e>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a4b      	ldr	r2, [pc, #300]	@ (80014f0 <HAL_GPIO_Init+0x330>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d101      	bne.n	80013ca <HAL_GPIO_Init+0x20a>
 80013c6:	2307      	movs	r3, #7
 80013c8:	e00e      	b.n	80013e8 <HAL_GPIO_Init+0x228>
 80013ca:	2308      	movs	r3, #8
 80013cc:	e00c      	b.n	80013e8 <HAL_GPIO_Init+0x228>
 80013ce:	2306      	movs	r3, #6
 80013d0:	e00a      	b.n	80013e8 <HAL_GPIO_Init+0x228>
 80013d2:	2305      	movs	r3, #5
 80013d4:	e008      	b.n	80013e8 <HAL_GPIO_Init+0x228>
 80013d6:	2304      	movs	r3, #4
 80013d8:	e006      	b.n	80013e8 <HAL_GPIO_Init+0x228>
 80013da:	2303      	movs	r3, #3
 80013dc:	e004      	b.n	80013e8 <HAL_GPIO_Init+0x228>
 80013de:	2302      	movs	r3, #2
 80013e0:	e002      	b.n	80013e8 <HAL_GPIO_Init+0x228>
 80013e2:	2301      	movs	r3, #1
 80013e4:	e000      	b.n	80013e8 <HAL_GPIO_Init+0x228>
 80013e6:	2300      	movs	r3, #0
 80013e8:	69fa      	ldr	r2, [r7, #28]
 80013ea:	f002 0203 	and.w	r2, r2, #3
 80013ee:	0092      	lsls	r2, r2, #2
 80013f0:	4093      	lsls	r3, r2
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013f8:	4935      	ldr	r1, [pc, #212]	@ (80014d0 <HAL_GPIO_Init+0x310>)
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	089b      	lsrs	r3, r3, #2
 80013fe:	3302      	adds	r3, #2
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001406:	4b3b      	ldr	r3, [pc, #236]	@ (80014f4 <HAL_GPIO_Init+0x334>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	43db      	mvns	r3, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4013      	ands	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	4313      	orrs	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800142a:	4a32      	ldr	r2, [pc, #200]	@ (80014f4 <HAL_GPIO_Init+0x334>)
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001430:	4b30      	ldr	r3, [pc, #192]	@ (80014f4 <HAL_GPIO_Init+0x334>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	43db      	mvns	r3, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001454:	4a27      	ldr	r2, [pc, #156]	@ (80014f4 <HAL_GPIO_Init+0x334>)
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800145a:	4b26      	ldr	r3, [pc, #152]	@ (80014f4 <HAL_GPIO_Init+0x334>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	43db      	mvns	r3, r3
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4013      	ands	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800147e:	4a1d      	ldr	r2, [pc, #116]	@ (80014f4 <HAL_GPIO_Init+0x334>)
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001484:	4b1b      	ldr	r3, [pc, #108]	@ (80014f4 <HAL_GPIO_Init+0x334>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	43db      	mvns	r3, r3
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4013      	ands	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d003      	beq.n	80014a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014a8:	4a12      	ldr	r2, [pc, #72]	@ (80014f4 <HAL_GPIO_Init+0x334>)
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	3301      	adds	r3, #1
 80014b2:	61fb      	str	r3, [r7, #28]
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	2b0f      	cmp	r3, #15
 80014b8:	f67f ae90 	bls.w	80011dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014bc:	bf00      	nop
 80014be:	bf00      	nop
 80014c0:	3724      	adds	r7, #36	@ 0x24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40013800 	.word	0x40013800
 80014d4:	40020000 	.word	0x40020000
 80014d8:	40020400 	.word	0x40020400
 80014dc:	40020800 	.word	0x40020800
 80014e0:	40020c00 	.word	0x40020c00
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40021400 	.word	0x40021400
 80014ec:	40021800 	.word	0x40021800
 80014f0:	40021c00 	.word	0x40021c00
 80014f4:	40013c00 	.word	0x40013c00

080014f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e12b      	b.n	8001762 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d106      	bne.n	8001524 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff fb4c 	bl	8000bbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2224      	movs	r2, #36	@ 0x24
 8001528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f022 0201 	bic.w	r2, r2, #1
 800153a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800154a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800155a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800155c:	f002 fada 	bl	8003b14 <HAL_RCC_GetPCLK1Freq>
 8001560:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	4a81      	ldr	r2, [pc, #516]	@ (800176c <HAL_I2C_Init+0x274>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d807      	bhi.n	800157c <HAL_I2C_Init+0x84>
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4a80      	ldr	r2, [pc, #512]	@ (8001770 <HAL_I2C_Init+0x278>)
 8001570:	4293      	cmp	r3, r2
 8001572:	bf94      	ite	ls
 8001574:	2301      	movls	r3, #1
 8001576:	2300      	movhi	r3, #0
 8001578:	b2db      	uxtb	r3, r3
 800157a:	e006      	b.n	800158a <HAL_I2C_Init+0x92>
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	4a7d      	ldr	r2, [pc, #500]	@ (8001774 <HAL_I2C_Init+0x27c>)
 8001580:	4293      	cmp	r3, r2
 8001582:	bf94      	ite	ls
 8001584:	2301      	movls	r3, #1
 8001586:	2300      	movhi	r3, #0
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e0e7      	b.n	8001762 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	4a78      	ldr	r2, [pc, #480]	@ (8001778 <HAL_I2C_Init+0x280>)
 8001596:	fba2 2303 	umull	r2, r3, r2, r3
 800159a:	0c9b      	lsrs	r3, r3, #18
 800159c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	68ba      	ldr	r2, [r7, #8]
 80015ae:	430a      	orrs	r2, r1
 80015b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6a1b      	ldr	r3, [r3, #32]
 80015b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	4a6a      	ldr	r2, [pc, #424]	@ (800176c <HAL_I2C_Init+0x274>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d802      	bhi.n	80015cc <HAL_I2C_Init+0xd4>
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	3301      	adds	r3, #1
 80015ca:	e009      	b.n	80015e0 <HAL_I2C_Init+0xe8>
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80015d2:	fb02 f303 	mul.w	r3, r2, r3
 80015d6:	4a69      	ldr	r2, [pc, #420]	@ (800177c <HAL_I2C_Init+0x284>)
 80015d8:	fba2 2303 	umull	r2, r3, r2, r3
 80015dc:	099b      	lsrs	r3, r3, #6
 80015de:	3301      	adds	r3, #1
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	6812      	ldr	r2, [r2, #0]
 80015e4:	430b      	orrs	r3, r1
 80015e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80015f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	495c      	ldr	r1, [pc, #368]	@ (800176c <HAL_I2C_Init+0x274>)
 80015fc:	428b      	cmp	r3, r1
 80015fe:	d819      	bhi.n	8001634 <HAL_I2C_Init+0x13c>
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	1e59      	subs	r1, r3, #1
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	fbb1 f3f3 	udiv	r3, r1, r3
 800160e:	1c59      	adds	r1, r3, #1
 8001610:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001614:	400b      	ands	r3, r1
 8001616:	2b00      	cmp	r3, #0
 8001618:	d00a      	beq.n	8001630 <HAL_I2C_Init+0x138>
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	1e59      	subs	r1, r3, #1
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	fbb1 f3f3 	udiv	r3, r1, r3
 8001628:	3301      	adds	r3, #1
 800162a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800162e:	e051      	b.n	80016d4 <HAL_I2C_Init+0x1dc>
 8001630:	2304      	movs	r3, #4
 8001632:	e04f      	b.n	80016d4 <HAL_I2C_Init+0x1dc>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d111      	bne.n	8001660 <HAL_I2C_Init+0x168>
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	1e58      	subs	r0, r3, #1
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6859      	ldr	r1, [r3, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	440b      	add	r3, r1
 800164a:	fbb0 f3f3 	udiv	r3, r0, r3
 800164e:	3301      	adds	r3, #1
 8001650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001654:	2b00      	cmp	r3, #0
 8001656:	bf0c      	ite	eq
 8001658:	2301      	moveq	r3, #1
 800165a:	2300      	movne	r3, #0
 800165c:	b2db      	uxtb	r3, r3
 800165e:	e012      	b.n	8001686 <HAL_I2C_Init+0x18e>
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	1e58      	subs	r0, r3, #1
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6859      	ldr	r1, [r3, #4]
 8001668:	460b      	mov	r3, r1
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	440b      	add	r3, r1
 800166e:	0099      	lsls	r1, r3, #2
 8001670:	440b      	add	r3, r1
 8001672:	fbb0 f3f3 	udiv	r3, r0, r3
 8001676:	3301      	adds	r3, #1
 8001678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800167c:	2b00      	cmp	r3, #0
 800167e:	bf0c      	ite	eq
 8001680:	2301      	moveq	r3, #1
 8001682:	2300      	movne	r3, #0
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <HAL_I2C_Init+0x196>
 800168a:	2301      	movs	r3, #1
 800168c:	e022      	b.n	80016d4 <HAL_I2C_Init+0x1dc>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d10e      	bne.n	80016b4 <HAL_I2C_Init+0x1bc>
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	1e58      	subs	r0, r3, #1
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6859      	ldr	r1, [r3, #4]
 800169e:	460b      	mov	r3, r1
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	440b      	add	r3, r1
 80016a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80016a8:	3301      	adds	r3, #1
 80016aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016b2:	e00f      	b.n	80016d4 <HAL_I2C_Init+0x1dc>
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	1e58      	subs	r0, r3, #1
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6859      	ldr	r1, [r3, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	440b      	add	r3, r1
 80016c2:	0099      	lsls	r1, r3, #2
 80016c4:	440b      	add	r3, r1
 80016c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80016ca:	3301      	adds	r3, #1
 80016cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	6809      	ldr	r1, [r1, #0]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69da      	ldr	r2, [r3, #28]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a1b      	ldr	r3, [r3, #32]
 80016ee:	431a      	orrs	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	430a      	orrs	r2, r1
 80016f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001702:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	6911      	ldr	r1, [r2, #16]
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	68d2      	ldr	r2, [r2, #12]
 800170e:	4311      	orrs	r1, r2
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	6812      	ldr	r2, [r2, #0]
 8001714:	430b      	orrs	r3, r1
 8001716:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	695a      	ldr	r2, [r3, #20]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	431a      	orrs	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	430a      	orrs	r2, r1
 8001732:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f042 0201 	orr.w	r2, r2, #1
 8001742:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2220      	movs	r2, #32
 800174e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	000186a0 	.word	0x000186a0
 8001770:	001e847f 	.word	0x001e847f
 8001774:	003d08ff 	.word	0x003d08ff
 8001778:	431bde83 	.word	0x431bde83
 800177c:	10624dd3 	.word	0x10624dd3

08001780 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	695b      	ldr	r3, [r3, #20]
 800178e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001792:	2b80      	cmp	r3, #128	@ 0x80
 8001794:	d103      	bne.n	800179e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2200      	movs	r2, #0
 800179c:	611a      	str	r2, [r3, #16]
  }
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
	...

080017ac <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b087      	sub	sp, #28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	4608      	mov	r0, r1
 80017b6:	4611      	mov	r1, r2
 80017b8:	461a      	mov	r2, r3
 80017ba:	4603      	mov	r3, r0
 80017bc:	817b      	strh	r3, [r7, #10]
 80017be:	460b      	mov	r3, r1
 80017c0:	813b      	strh	r3, [r7, #8]
 80017c2:	4613      	mov	r3, r2
 80017c4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b20      	cmp	r3, #32
 80017d4:	f040 8096 	bne.w	8001904 <HAL_I2C_Mem_Read_IT+0x158>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80017d8:	4b4e      	ldr	r3, [pc, #312]	@ (8001914 <HAL_I2C_Mem_Read_IT+0x168>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	08db      	lsrs	r3, r3, #3
 80017de:	4a4e      	ldr	r2, [pc, #312]	@ (8001918 <HAL_I2C_Mem_Read_IT+0x16c>)
 80017e0:	fba2 2303 	umull	r2, r3, r2, r3
 80017e4:	0a1a      	lsrs	r2, r3, #8
 80017e6:	4613      	mov	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	009a      	lsls	r2, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	3b01      	subs	r3, #1
 80017f6:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d112      	bne.n	8001824 <HAL_I2C_Mem_Read_IT+0x78>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2200      	movs	r2, #0
 8001802:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2220      	movs	r2, #32
 8001808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001818:	f043 0220 	orr.w	r2, r3, #32
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8001820:	2302      	movs	r3, #2
 8001822:	e070      	b.n	8001906 <HAL_I2C_Mem_Read_IT+0x15a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b02      	cmp	r3, #2
 8001830:	d0df      	beq.n	80017f2 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001838:	2b01      	cmp	r3, #1
 800183a:	d101      	bne.n	8001840 <HAL_I2C_Mem_Read_IT+0x94>
 800183c:	2302      	movs	r3, #2
 800183e:	e062      	b.n	8001906 <HAL_I2C_Mem_Read_IT+0x15a>
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b01      	cmp	r3, #1
 8001854:	d007      	beq.n	8001866 <HAL_I2C_Mem_Read_IT+0xba>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f042 0201 	orr.w	r2, r2, #1
 8001864:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001874:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2222      	movs	r2, #34	@ 0x22
 800187a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2240      	movs	r2, #64	@ 0x40
 8001882:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2200      	movs	r2, #0
 800188a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	6a3a      	ldr	r2, [r7, #32]
 8001890:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001896:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800189c:	b29a      	uxth	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	4a1d      	ldr	r2, [pc, #116]	@ (800191c <HAL_I2C_Mem_Read_IT+0x170>)
 80018a6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80018a8:	897a      	ldrh	r2, [r7, #10]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80018ae:	893a      	ldrh	r2, [r7, #8]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80018b4:	88fa      	ldrh	r2, [r7, #6]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2200      	movs	r2, #0
 80018be:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80018ce:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80018de:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if (hi2c->XferSize > 0U)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d007      	beq.n	8001900 <HAL_I2C_Mem_Read_IT+0x154>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	685a      	ldr	r2, [r3, #4]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80018fe:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8001900:	2300      	movs	r3, #0
 8001902:	e000      	b.n	8001906 <HAL_I2C_Mem_Read_IT+0x15a>
  }
  else
  {
    return HAL_BUSY;
 8001904:	2302      	movs	r3, #2
  }
}
 8001906:	4618      	mov	r0, r3
 8001908:	371c      	adds	r7, #28
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	20000000 	.word	0x20000000
 8001918:	14f8b589 	.word	0x14f8b589
 800191c:	ffff0000 	.word	0xffff0000

08001920 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001928:	2300      	movs	r3, #0
 800192a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001938:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001940:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001948:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800194a:	7bfb      	ldrb	r3, [r7, #15]
 800194c:	2b10      	cmp	r3, #16
 800194e:	d003      	beq.n	8001958 <HAL_I2C_EV_IRQHandler+0x38>
 8001950:	7bfb      	ldrb	r3, [r7, #15]
 8001952:	2b40      	cmp	r3, #64	@ 0x40
 8001954:	f040 80b1 	bne.w	8001aba <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	2b00      	cmp	r3, #0
 8001970:	d10d      	bne.n	800198e <HAL_I2C_EV_IRQHandler+0x6e>
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8001978:	d003      	beq.n	8001982 <HAL_I2C_EV_IRQHandler+0x62>
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8001980:	d101      	bne.n	8001986 <HAL_I2C_EV_IRQHandler+0x66>
 8001982:	2301      	movs	r3, #1
 8001984:	e000      	b.n	8001988 <HAL_I2C_EV_IRQHandler+0x68>
 8001986:	2300      	movs	r3, #0
 8001988:	2b01      	cmp	r3, #1
 800198a:	f000 8114 	beq.w	8001bb6 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	2b00      	cmp	r3, #0
 8001996:	d00b      	beq.n	80019b0 <HAL_I2C_EV_IRQHandler+0x90>
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d006      	beq.n	80019b0 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f001 fc6a 	bl	800327c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f000 fd70 	bl	800248e <I2C_Master_SB>
 80019ae:	e083      	b.n	8001ab8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f003 0308 	and.w	r3, r3, #8
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d008      	beq.n	80019cc <HAL_I2C_EV_IRQHandler+0xac>
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f000 fde8 	bl	800259a <I2C_Master_ADD10>
 80019ca:	e075      	b.n	8001ab8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d008      	beq.n	80019e8 <HAL_I2C_EV_IRQHandler+0xc8>
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f000 fe04 	bl	80025ee <I2C_Master_ADDR>
 80019e6:	e067      	b.n	8001ab8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	f003 0304 	and.w	r3, r3, #4
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d036      	beq.n	8001a60 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001a00:	f000 80db 	beq.w	8001bba <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00d      	beq.n	8001a2a <HAL_I2C_EV_IRQHandler+0x10a>
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d008      	beq.n	8001a2a <HAL_I2C_EV_IRQHandler+0x10a>
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f003 0304 	and.w	r3, r3, #4
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d103      	bne.n	8001a2a <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 f9cc 	bl	8001dc0 <I2C_MasterTransmit_TXE>
 8001a28:	e046      	b.n	8001ab8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	f003 0304 	and.w	r3, r3, #4
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 80c2 	beq.w	8001bba <HAL_I2C_EV_IRQHandler+0x29a>
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f000 80bc 	beq.w	8001bba <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001a42:	7bbb      	ldrb	r3, [r7, #14]
 8001a44:	2b21      	cmp	r3, #33	@ 0x21
 8001a46:	d103      	bne.n	8001a50 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 fa55 	bl	8001ef8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a4e:	e0b4      	b.n	8001bba <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	2b40      	cmp	r3, #64	@ 0x40
 8001a54:	f040 80b1 	bne.w	8001bba <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f000 fac3 	bl	8001fe4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a5e:	e0ac      	b.n	8001bba <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001a6e:	f000 80a4 	beq.w	8001bba <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00d      	beq.n	8001a98 <HAL_I2C_EV_IRQHandler+0x178>
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d008      	beq.n	8001a98 <HAL_I2C_EV_IRQHandler+0x178>
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d103      	bne.n	8001a98 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 fb3f 	bl	8002114 <I2C_MasterReceive_RXNE>
 8001a96:	e00f      	b.n	8001ab8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	f003 0304 	and.w	r3, r3, #4
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f000 808b 	beq.w	8001bba <HAL_I2C_EV_IRQHandler+0x29a>
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f000 8085 	beq.w	8001bba <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 fbf7 	bl	80022a4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ab6:	e080      	b.n	8001bba <HAL_I2C_EV_IRQHandler+0x29a>
 8001ab8:	e07f      	b.n	8001bba <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d004      	beq.n	8001acc <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	61fb      	str	r3, [r7, #28]
 8001aca:	e007      	b.n	8001adc <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d011      	beq.n	8001b0a <HAL_I2C_EV_IRQHandler+0x1ea>
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d00c      	beq.n	8001b0a <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001b00:	69b9      	ldr	r1, [r7, #24]
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 ffc2 	bl	8002a8c <I2C_Slave_ADDR>
 8001b08:	e05a      	b.n	8001bc0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	f003 0310 	and.w	r3, r3, #16
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d008      	beq.n	8001b26 <HAL_I2C_EV_IRQHandler+0x206>
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 fffc 	bl	8002b1c <I2C_Slave_STOPF>
 8001b24:	e04c      	b.n	8001bc0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001b26:	7bbb      	ldrb	r3, [r7, #14]
 8001b28:	2b21      	cmp	r3, #33	@ 0x21
 8001b2a:	d002      	beq.n	8001b32 <HAL_I2C_EV_IRQHandler+0x212>
 8001b2c:	7bbb      	ldrb	r3, [r7, #14]
 8001b2e:	2b29      	cmp	r3, #41	@ 0x29
 8001b30:	d120      	bne.n	8001b74 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d00d      	beq.n	8001b58 <HAL_I2C_EV_IRQHandler+0x238>
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d008      	beq.n	8001b58 <HAL_I2C_EV_IRQHandler+0x238>
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d103      	bne.n	8001b58 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 fedd 	bl	8002910 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001b56:	e032      	b.n	8001bbe <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f003 0304 	and.w	r3, r3, #4
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d02d      	beq.n	8001bbe <HAL_I2C_EV_IRQHandler+0x29e>
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d028      	beq.n	8001bbe <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 ff0c 	bl	800298a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001b72:	e024      	b.n	8001bbe <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00d      	beq.n	8001b9a <HAL_I2C_EV_IRQHandler+0x27a>
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d008      	beq.n	8001b9a <HAL_I2C_EV_IRQHandler+0x27a>
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	f003 0304 	and.w	r3, r3, #4
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d103      	bne.n	8001b9a <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 ff1a 	bl	80029cc <I2C_SlaveReceive_RXNE>
 8001b98:	e012      	b.n	8001bc0 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d00d      	beq.n	8001bc0 <HAL_I2C_EV_IRQHandler+0x2a0>
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d008      	beq.n	8001bc0 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 ff4a 	bl	8002a48 <I2C_SlaveReceive_BTF>
 8001bb4:	e004      	b.n	8001bc0 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8001bb6:	bf00      	nop
 8001bb8:	e002      	b.n	8001bc0 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001bba:	bf00      	nop
 8001bbc:	e000      	b.n	8001bc0 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001bbe:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001bc0:	3720      	adds	r7, #32
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b08a      	sub	sp, #40	@ 0x28
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	695b      	ldr	r3, [r3, #20]
 8001bd4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001bde:	2300      	movs	r3, #0
 8001be0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001be8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001bea:	6a3b      	ldr	r3, [r7, #32]
 8001bec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d00d      	beq.n	8001c10 <HAL_I2C_ER_IRQHandler+0x4a>
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d008      	beq.n	8001c10 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001c0e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001c10:	6a3b      	ldr	r3, [r7, #32]
 8001c12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d00d      	beq.n	8001c36 <HAL_I2C_ER_IRQHandler+0x70>
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d008      	beq.n	8001c36 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c26:	f043 0302 	orr.w	r3, r3, #2
 8001c2a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8001c34:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001c36:	6a3b      	ldr	r3, [r7, #32]
 8001c38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d03e      	beq.n	8001cbe <HAL_I2C_ER_IRQHandler+0xf8>
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d039      	beq.n	8001cbe <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8001c4a:	7efb      	ldrb	r3, [r7, #27]
 8001c4c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c5c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c62:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001c64:	7ebb      	ldrb	r3, [r7, #26]
 8001c66:	2b20      	cmp	r3, #32
 8001c68:	d112      	bne.n	8001c90 <HAL_I2C_ER_IRQHandler+0xca>
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d10f      	bne.n	8001c90 <HAL_I2C_ER_IRQHandler+0xca>
 8001c70:	7cfb      	ldrb	r3, [r7, #19]
 8001c72:	2b21      	cmp	r3, #33	@ 0x21
 8001c74:	d008      	beq.n	8001c88 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001c76:	7cfb      	ldrb	r3, [r7, #19]
 8001c78:	2b29      	cmp	r3, #41	@ 0x29
 8001c7a:	d005      	beq.n	8001c88 <HAL_I2C_ER_IRQHandler+0xc2>
 8001c7c:	7cfb      	ldrb	r3, [r7, #19]
 8001c7e:	2b28      	cmp	r3, #40	@ 0x28
 8001c80:	d106      	bne.n	8001c90 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2b21      	cmp	r3, #33	@ 0x21
 8001c86:	d103      	bne.n	8001c90 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f001 f877 	bl	8002d7c <I2C_Slave_AF>
 8001c8e:	e016      	b.n	8001cbe <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001c98:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9c:	f043 0304 	orr.w	r3, r3, #4
 8001ca0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001ca2:	7efb      	ldrb	r3, [r7, #27]
 8001ca4:	2b10      	cmp	r3, #16
 8001ca6:	d002      	beq.n	8001cae <HAL_I2C_ER_IRQHandler+0xe8>
 8001ca8:	7efb      	ldrb	r3, [r7, #27]
 8001caa:	2b40      	cmp	r3, #64	@ 0x40
 8001cac:	d107      	bne.n	8001cbe <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cbc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001cbe:	6a3b      	ldr	r3, [r7, #32]
 8001cc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d00d      	beq.n	8001ce4 <HAL_I2C_ER_IRQHandler+0x11e>
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d008      	beq.n	8001ce4 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd4:	f043 0308 	orr.w	r3, r3, #8
 8001cd8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8001ce2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d008      	beq.n	8001cfc <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f001 f8b4 	bl	8002e64 <I2C_ITError>
  }
}
 8001cfc:	bf00      	nop
 8001cfe:	3728      	adds	r7, #40	@ 0x28
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	70fb      	strb	r3, [r7, #3]
 8001d60:	4613      	mov	r3, r2
 8001d62:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dce:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001dd6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ddc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d150      	bne.n	8001e88 <I2C_MasterTransmit_TXE+0xc8>
 8001de6:	7bfb      	ldrb	r3, [r7, #15]
 8001de8:	2b21      	cmp	r3, #33	@ 0x21
 8001dea:	d14d      	bne.n	8001e88 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	2b08      	cmp	r3, #8
 8001df0:	d01d      	beq.n	8001e2e <I2C_MasterTransmit_TXE+0x6e>
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	2b20      	cmp	r3, #32
 8001df6:	d01a      	beq.n	8001e2e <I2C_MasterTransmit_TXE+0x6e>
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001dfe:	d016      	beq.n	8001e2e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001e0e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2211      	movs	r2, #17
 8001e14:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2220      	movs	r2, #32
 8001e22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff ff6c 	bl	8001d04 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001e2c:	e060      	b.n	8001ef0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001e3c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e4c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2220      	movs	r2, #32
 8001e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b40      	cmp	r3, #64	@ 0x40
 8001e66:	d107      	bne.n	8001e78 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f7ff ff87 	bl	8001d84 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001e76:	e03b      	b.n	8001ef0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff ff3f 	bl	8001d04 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001e86:	e033      	b.n	8001ef0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001e88:	7bfb      	ldrb	r3, [r7, #15]
 8001e8a:	2b21      	cmp	r3, #33	@ 0x21
 8001e8c:	d005      	beq.n	8001e9a <I2C_MasterTransmit_TXE+0xda>
 8001e8e:	7bbb      	ldrb	r3, [r7, #14]
 8001e90:	2b40      	cmp	r3, #64	@ 0x40
 8001e92:	d12d      	bne.n	8001ef0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
 8001e96:	2b22      	cmp	r3, #34	@ 0x22
 8001e98:	d12a      	bne.n	8001ef0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d108      	bne.n	8001eb6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001eb2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001eb4:	e01c      	b.n	8001ef0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b40      	cmp	r3, #64	@ 0x40
 8001ec0:	d103      	bne.n	8001eca <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f88e 	bl	8001fe4 <I2C_MemoryTransmit_TXE_BTF>
}
 8001ec8:	e012      	b.n	8001ef0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ece:	781a      	ldrb	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eda:	1c5a      	adds	r2, r3, #1
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001eee:	e7ff      	b.n	8001ef0 <I2C_MasterTransmit_TXE+0x130>
 8001ef0:	bf00      	nop
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f04:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b21      	cmp	r3, #33	@ 0x21
 8001f10:	d164      	bne.n	8001fdc <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d012      	beq.n	8001f42 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f20:	781a      	ldrb	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f2c:	1c5a      	adds	r2, r3, #1
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001f40:	e04c      	b.n	8001fdc <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	d01d      	beq.n	8001f84 <I2C_MasterTransmit_BTF+0x8c>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2b20      	cmp	r3, #32
 8001f4c:	d01a      	beq.n	8001f84 <I2C_MasterTransmit_BTF+0x8c>
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001f54:	d016      	beq.n	8001f84 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001f64:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2211      	movs	r2, #17
 8001f6a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2220      	movs	r2, #32
 8001f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7ff fec1 	bl	8001d04 <HAL_I2C_MasterTxCpltCallback>
}
 8001f82:	e02b      	b.n	8001fdc <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	685a      	ldr	r2, [r3, #4]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001f92:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fa2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2220      	movs	r2, #32
 8001fae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b40      	cmp	r3, #64	@ 0x40
 8001fbc:	d107      	bne.n	8001fce <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7ff fedc 	bl	8001d84 <HAL_I2C_MemTxCpltCallback>
}
 8001fcc:	e006      	b.n	8001fdc <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7ff fe94 	bl	8001d04 <HAL_I2C_MasterTxCpltCallback>
}
 8001fdc:	bf00      	nop
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ff2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d11d      	bne.n	8002038 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002000:	2b01      	cmp	r3, #1
 8002002:	d10b      	bne.n	800201c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002008:	b2da      	uxtb	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002014:	1c9a      	adds	r2, r3, #2
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800201a:	e077      	b.n	800210c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002020:	b29b      	uxth	r3, r3
 8002022:	121b      	asrs	r3, r3, #8
 8002024:	b2da      	uxtb	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002030:	1c5a      	adds	r2, r3, #1
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002036:	e069      	b.n	800210c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800203c:	2b01      	cmp	r3, #1
 800203e:	d10b      	bne.n	8002058 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002044:	b2da      	uxtb	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002050:	1c5a      	adds	r2, r3, #1
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002056:	e059      	b.n	800210c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800205c:	2b02      	cmp	r3, #2
 800205e:	d152      	bne.n	8002106 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002060:	7bfb      	ldrb	r3, [r7, #15]
 8002062:	2b22      	cmp	r3, #34	@ 0x22
 8002064:	d10d      	bne.n	8002082 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002074:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800207a:	1c5a      	adds	r2, r3, #1
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002080:	e044      	b.n	800210c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002086:	b29b      	uxth	r3, r3
 8002088:	2b00      	cmp	r3, #0
 800208a:	d015      	beq.n	80020b8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800208c:	7bfb      	ldrb	r3, [r7, #15]
 800208e:	2b21      	cmp	r3, #33	@ 0x21
 8002090:	d112      	bne.n	80020b8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002096:	781a      	ldrb	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a2:	1c5a      	adds	r2, r3, #1
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	3b01      	subs	r3, #1
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80020b6:	e029      	b.n	800210c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020bc:	b29b      	uxth	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d124      	bne.n	800210c <I2C_MemoryTransmit_TXE_BTF+0x128>
 80020c2:	7bfb      	ldrb	r3, [r7, #15]
 80020c4:	2b21      	cmp	r3, #33	@ 0x21
 80020c6:	d121      	bne.n	800210c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80020d6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020e6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2220      	movs	r2, #32
 80020f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7ff fe40 	bl	8001d84 <HAL_I2C_MemTxCpltCallback>
}
 8002104:	e002      	b.n	800210c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7ff fb3a 	bl	8001780 <I2C_Flush_DR>
}
 800210c:	bf00      	nop
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b22      	cmp	r3, #34	@ 0x22
 8002126:	f040 80b9 	bne.w	800229c <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800212e:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002134:	b29b      	uxth	r3, r3
 8002136:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	2b03      	cmp	r3, #3
 800213c:	d921      	bls.n	8002182 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	691a      	ldr	r2, [r3, #16]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002148:	b2d2      	uxtb	r2, r2
 800214a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002150:	1c5a      	adds	r2, r3, #1
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800215a:	b29b      	uxth	r3, r3
 800215c:	3b01      	subs	r3, #1
 800215e:	b29a      	uxth	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002168:	b29b      	uxth	r3, r3
 800216a:	2b03      	cmp	r3, #3
 800216c:	f040 8096 	bne.w	800229c <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800217e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002180:	e08c      	b.n	800229c <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002186:	2b02      	cmp	r3, #2
 8002188:	d07f      	beq.n	800228a <I2C_MasterReceive_RXNE+0x176>
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d002      	beq.n	8002196 <I2C_MasterReceive_RXNE+0x82>
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d179      	bne.n	800228a <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f001 f83e 	bl	8003218 <I2C_WaitOnSTOPRequestThroughIT>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d14c      	bne.n	800223c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021b0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80021c0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	691a      	ldr	r2, [r3, #16]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d4:	1c5a      	adds	r2, r3, #1
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021de:	b29b      	uxth	r3, r3
 80021e0:	3b01      	subs	r3, #1
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2220      	movs	r2, #32
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b40      	cmp	r3, #64	@ 0x40
 80021fa:	d10a      	bne.n	8002212 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7fe f9e4 	bl	80005d8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002210:	e044      	b.n	800229c <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2b08      	cmp	r3, #8
 800221e:	d002      	beq.n	8002226 <I2C_MasterReceive_RXNE+0x112>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2b20      	cmp	r3, #32
 8002224:	d103      	bne.n	800222e <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	631a      	str	r2, [r3, #48]	@ 0x30
 800222c:	e002      	b.n	8002234 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2212      	movs	r2, #18
 8002232:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f7ff fd6f 	bl	8001d18 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800223a:	e02f      	b.n	800229c <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800224a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	691a      	ldr	r2, [r3, #16]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225e:	1c5a      	adds	r2, r3, #1
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002268:	b29b      	uxth	r3, r3
 800226a:	3b01      	subs	r3, #1
 800226c:	b29a      	uxth	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2220      	movs	r2, #32
 8002276:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff fd88 	bl	8001d98 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002288:	e008      	b.n	800229c <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	685a      	ldr	r2, [r3, #4]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002298:	605a      	str	r2, [r3, #4]
}
 800229a:	e7ff      	b.n	800229c <I2C_MasterReceive_RXNE+0x188>
 800229c:	bf00      	nop
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022b0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	2b04      	cmp	r3, #4
 80022ba:	d11b      	bne.n	80022f4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022ca:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	691a      	ldr	r2, [r3, #16]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	3b01      	subs	r3, #1
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80022f2:	e0c8      	b.n	8002486 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	2b03      	cmp	r3, #3
 80022fc:	d129      	bne.n	8002352 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800230c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2b04      	cmp	r3, #4
 8002312:	d00a      	beq.n	800232a <I2C_MasterReceive_BTF+0x86>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2b02      	cmp	r3, #2
 8002318:	d007      	beq.n	800232a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002328:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	691a      	ldr	r2, [r3, #16]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233c:	1c5a      	adds	r2, r3, #1
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002346:	b29b      	uxth	r3, r3
 8002348:	3b01      	subs	r3, #1
 800234a:	b29a      	uxth	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002350:	e099      	b.n	8002486 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002356:	b29b      	uxth	r3, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	f040 8081 	bne.w	8002460 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d002      	beq.n	800236a <I2C_MasterReceive_BTF+0xc6>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2b10      	cmp	r3, #16
 8002368:	d108      	bne.n	800237c <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	e019      	b.n	80023b0 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2b04      	cmp	r3, #4
 8002380:	d002      	beq.n	8002388 <I2C_MasterReceive_BTF+0xe4>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2b02      	cmp	r3, #2
 8002386:	d108      	bne.n	800239a <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	e00a      	b.n	80023b0 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2b10      	cmp	r3, #16
 800239e:	d007      	beq.n	80023b0 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023ae:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	691a      	ldr	r2, [r3, #16]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c2:	1c5a      	adds	r2, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	3b01      	subs	r3, #1
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	691a      	ldr	r2, [r3, #16]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e8:	1c5a      	adds	r2, r3, #1
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	3b01      	subs	r3, #1
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	685a      	ldr	r2, [r3, #4]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800240a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2220      	movs	r2, #32
 8002410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2b40      	cmp	r3, #64	@ 0x40
 800241e:	d10a      	bne.n	8002436 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7fe f8d2 	bl	80005d8 <HAL_I2C_MemRxCpltCallback>
}
 8002434:	e027      	b.n	8002486 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2b08      	cmp	r3, #8
 8002442:	d002      	beq.n	800244a <I2C_MasterReceive_BTF+0x1a6>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2b20      	cmp	r3, #32
 8002448:	d103      	bne.n	8002452 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002450:	e002      	b.n	8002458 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2212      	movs	r2, #18
 8002456:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7ff fc5d 	bl	8001d18 <HAL_I2C_MasterRxCpltCallback>
}
 800245e:	e012      	b.n	8002486 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	691a      	ldr	r2, [r3, #16]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002472:	1c5a      	adds	r2, r3, #1
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800247c:	b29b      	uxth	r3, r3
 800247e:	3b01      	subs	r3, #1
 8002480:	b29a      	uxth	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002486:	bf00      	nop
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b40      	cmp	r3, #64	@ 0x40
 80024a0:	d117      	bne.n	80024d2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d109      	bne.n	80024be <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	461a      	mov	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80024ba:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80024bc:	e067      	b.n	800258e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	611a      	str	r2, [r3, #16]
}
 80024d0:	e05d      	b.n	800258e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80024da:	d133      	bne.n	8002544 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b21      	cmp	r3, #33	@ 0x21
 80024e6:	d109      	bne.n	80024fc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	461a      	mov	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80024f8:	611a      	str	r2, [r3, #16]
 80024fa:	e008      	b.n	800250e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002500:	b2db      	uxtb	r3, r3
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	b2da      	uxtb	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002512:	2b00      	cmp	r3, #0
 8002514:	d004      	beq.n	8002520 <I2C_Master_SB+0x92>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800251a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800251c:	2b00      	cmp	r3, #0
 800251e:	d108      	bne.n	8002532 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002524:	2b00      	cmp	r3, #0
 8002526:	d032      	beq.n	800258e <I2C_Master_SB+0x100>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800252c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800252e:	2b00      	cmp	r3, #0
 8002530:	d02d      	beq.n	800258e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002540:	605a      	str	r2, [r3, #4]
}
 8002542:	e024      	b.n	800258e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10e      	bne.n	800256a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002550:	b29b      	uxth	r3, r3
 8002552:	11db      	asrs	r3, r3, #7
 8002554:	b2db      	uxtb	r3, r3
 8002556:	f003 0306 	and.w	r3, r3, #6
 800255a:	b2db      	uxtb	r3, r3
 800255c:	f063 030f 	orn	r3, r3, #15
 8002560:	b2da      	uxtb	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	611a      	str	r2, [r3, #16]
}
 8002568:	e011      	b.n	800258e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800256e:	2b01      	cmp	r3, #1
 8002570:	d10d      	bne.n	800258e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002576:	b29b      	uxth	r3, r3
 8002578:	11db      	asrs	r3, r3, #7
 800257a:	b2db      	uxtb	r3, r3
 800257c:	f003 0306 	and.w	r3, r3, #6
 8002580:	b2db      	uxtb	r3, r3
 8002582:	f063 030e 	orn	r3, r3, #14
 8002586:	b2da      	uxtb	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	611a      	str	r2, [r3, #16]
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d004      	beq.n	80025c0 <I2C_Master_ADD10+0x26>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d108      	bne.n	80025d2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00c      	beq.n	80025e2 <I2C_Master_ADD10+0x48>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d007      	beq.n	80025e2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025e0:	605a      	str	r2, [r3, #4]
  }
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b091      	sub	sp, #68	@ 0x44
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80025fc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002604:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b22      	cmp	r3, #34	@ 0x22
 8002616:	f040 8169 	bne.w	80028ec <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10f      	bne.n	8002642 <I2C_Master_ADDR+0x54>
 8002622:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002626:	2b40      	cmp	r3, #64	@ 0x40
 8002628:	d10b      	bne.n	8002642 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800262a:	2300      	movs	r3, #0
 800262c:	633b      	str	r3, [r7, #48]	@ 0x30
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	633b      	str	r3, [r7, #48]	@ 0x30
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	633b      	str	r3, [r7, #48]	@ 0x30
 800263e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002640:	e160      	b.n	8002904 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002646:	2b00      	cmp	r3, #0
 8002648:	d11d      	bne.n	8002686 <I2C_Master_ADDR+0x98>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002652:	d118      	bne.n	8002686 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002654:	2300      	movs	r3, #0
 8002656:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002678:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800267e:	1c5a      	adds	r2, r3, #1
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	651a      	str	r2, [r3, #80]	@ 0x50
 8002684:	e13e      	b.n	8002904 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800268a:	b29b      	uxth	r3, r3
 800268c:	2b00      	cmp	r3, #0
 800268e:	d113      	bne.n	80026b8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002690:	2300      	movs	r3, #0
 8002692:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	e115      	b.n	80028e4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026bc:	b29b      	uxth	r3, r3
 80026be:	2b01      	cmp	r3, #1
 80026c0:	f040 808a 	bne.w	80027d8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80026c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026c6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80026ca:	d137      	bne.n	800273c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026da:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80026ea:	d113      	bne.n	8002714 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026fa:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026fc:	2300      	movs	r3, #0
 80026fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	627b      	str	r3, [r7, #36]	@ 0x24
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002712:	e0e7      	b.n	80028e4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002714:	2300      	movs	r3, #0
 8002716:	623b      	str	r3, [r7, #32]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	623b      	str	r3, [r7, #32]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	623b      	str	r3, [r7, #32]
 8002728:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	e0d3      	b.n	80028e4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800273c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800273e:	2b08      	cmp	r3, #8
 8002740:	d02e      	beq.n	80027a0 <I2C_Master_ADDR+0x1b2>
 8002742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002744:	2b20      	cmp	r3, #32
 8002746:	d02b      	beq.n	80027a0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800274a:	2b12      	cmp	r3, #18
 800274c:	d102      	bne.n	8002754 <I2C_Master_ADDR+0x166>
 800274e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002750:	2b01      	cmp	r3, #1
 8002752:	d125      	bne.n	80027a0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002756:	2b04      	cmp	r3, #4
 8002758:	d00e      	beq.n	8002778 <I2C_Master_ADDR+0x18a>
 800275a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800275c:	2b02      	cmp	r3, #2
 800275e:	d00b      	beq.n	8002778 <I2C_Master_ADDR+0x18a>
 8002760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002762:	2b10      	cmp	r3, #16
 8002764:	d008      	beq.n	8002778 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	e007      	b.n	8002788 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002786:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002788:	2300      	movs	r3, #0
 800278a:	61fb      	str	r3, [r7, #28]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	61fb      	str	r3, [r7, #28]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	61fb      	str	r3, [r7, #28]
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	e0a1      	b.n	80028e4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027ae:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027b0:	2300      	movs	r3, #0
 80027b2:	61bb      	str	r3, [r7, #24]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	61bb      	str	r3, [r7, #24]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	61bb      	str	r3, [r7, #24]
 80027c4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	e085      	b.n	80028e4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027dc:	b29b      	uxth	r3, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d14d      	bne.n	800287e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80027e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027e4:	2b04      	cmp	r3, #4
 80027e6:	d016      	beq.n	8002816 <I2C_Master_ADDR+0x228>
 80027e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d013      	beq.n	8002816 <I2C_Master_ADDR+0x228>
 80027ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027f0:	2b10      	cmp	r3, #16
 80027f2:	d010      	beq.n	8002816 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002802:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	e007      	b.n	8002826 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002824:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002830:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002834:	d117      	bne.n	8002866 <I2C_Master_ADDR+0x278>
 8002836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002838:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800283c:	d00b      	beq.n	8002856 <I2C_Master_ADDR+0x268>
 800283e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002840:	2b01      	cmp	r3, #1
 8002842:	d008      	beq.n	8002856 <I2C_Master_ADDR+0x268>
 8002844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002846:	2b08      	cmp	r3, #8
 8002848:	d005      	beq.n	8002856 <I2C_Master_ADDR+0x268>
 800284a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800284c:	2b10      	cmp	r3, #16
 800284e:	d002      	beq.n	8002856 <I2C_Master_ADDR+0x268>
 8002850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002852:	2b20      	cmp	r3, #32
 8002854:	d107      	bne.n	8002866 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002864:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	617b      	str	r3, [r7, #20]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	617b      	str	r3, [r7, #20]
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	e032      	b.n	80028e4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800288c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002898:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800289c:	d117      	bne.n	80028ce <I2C_Master_ADDR+0x2e0>
 800289e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028a0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80028a4:	d00b      	beq.n	80028be <I2C_Master_ADDR+0x2d0>
 80028a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d008      	beq.n	80028be <I2C_Master_ADDR+0x2d0>
 80028ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028ae:	2b08      	cmp	r3, #8
 80028b0:	d005      	beq.n	80028be <I2C_Master_ADDR+0x2d0>
 80028b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028b4:	2b10      	cmp	r3, #16
 80028b6:	d002      	beq.n	80028be <I2C_Master_ADDR+0x2d0>
 80028b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028ba:	2b20      	cmp	r3, #32
 80028bc:	d107      	bne.n	80028ce <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80028cc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ce:	2300      	movs	r3, #0
 80028d0:	613b      	str	r3, [r7, #16]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	613b      	str	r3, [r7, #16]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	613b      	str	r3, [r7, #16]
 80028e2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80028ea:	e00b      	b.n	8002904 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ec:	2300      	movs	r3, #0
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	68fb      	ldr	r3, [r7, #12]
}
 8002902:	e7ff      	b.n	8002904 <I2C_Master_ADDR+0x316>
 8002904:	bf00      	nop
 8002906:	3744      	adds	r7, #68	@ 0x44
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800291e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002924:	b29b      	uxth	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d02b      	beq.n	8002982 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800292e:	781a      	ldrb	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293a:	1c5a      	adds	r2, r3, #1
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002944:	b29b      	uxth	r3, r3
 8002946:	3b01      	subs	r3, #1
 8002948:	b29a      	uxth	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002952:	b29b      	uxth	r3, r3
 8002954:	2b00      	cmp	r3, #0
 8002956:	d114      	bne.n	8002982 <I2C_SlaveTransmit_TXE+0x72>
 8002958:	7bfb      	ldrb	r3, [r7, #15]
 800295a:	2b29      	cmp	r3, #41	@ 0x29
 800295c:	d111      	bne.n	8002982 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800296c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2221      	movs	r2, #33	@ 0x21
 8002972:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2228      	movs	r2, #40	@ 0x28
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7ff f9d5 	bl	8001d2c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002982:	bf00      	nop
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002996:	b29b      	uxth	r3, r3
 8002998:	2b00      	cmp	r3, #0
 800299a:	d011      	beq.n	80029c0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a0:	781a      	ldrb	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ac:	1c5a      	adds	r2, r3, #1
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	3b01      	subs	r3, #1
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029da:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d02c      	beq.n	8002a40 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	691a      	ldr	r2, [r3, #16]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f8:	1c5a      	adds	r2, r3, #1
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	3b01      	subs	r3, #1
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d114      	bne.n	8002a40 <I2C_SlaveReceive_RXNE+0x74>
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
 8002a18:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a1a:	d111      	bne.n	8002a40 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a2a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2222      	movs	r2, #34	@ 0x22
 8002a30:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2228      	movs	r2, #40	@ 0x28
 8002a36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7ff f980 	bl	8001d40 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002a40:	bf00      	nop
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d012      	beq.n	8002a80 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	691a      	ldr	r2, [r3, #16]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6c:	1c5a      	adds	r2, r3, #1
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002a96:	2300      	movs	r3, #0
 8002a98:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002aa6:	2b28      	cmp	r3, #40	@ 0x28
 8002aa8:	d125      	bne.n	8002af6 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ab8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d103      	bne.n	8002ada <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	81bb      	strh	r3, [r7, #12]
 8002ad8:	e002      	b.n	8002ae0 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002ae8:	89ba      	ldrh	r2, [r7, #12]
 8002aea:	7bfb      	ldrb	r3, [r7, #15]
 8002aec:	4619      	mov	r1, r3
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7ff f930 	bl	8001d54 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002af4:	e00e      	b.n	8002b14 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002af6:	2300      	movs	r3, #0
 8002af8:	60bb      	str	r3, [r7, #8]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	60bb      	str	r3, [r7, #8]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	60bb      	str	r3, [r7, #8]
 8002b0a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8002b14:	bf00      	nop
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b2a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002b3a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	60bb      	str	r3, [r7, #8]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	60bb      	str	r3, [r7, #8]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 0201 	orr.w	r2, r2, #1
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b68:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b78:	d172      	bne.n	8002c60 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002b7a:	7bfb      	ldrb	r3, [r7, #15]
 8002b7c:	2b22      	cmp	r3, #34	@ 0x22
 8002b7e:	d002      	beq.n	8002b86 <I2C_Slave_STOPF+0x6a>
 8002b80:	7bfb      	ldrb	r3, [r7, #15]
 8002b82:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b84:	d135      	bne.n	8002bf2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d005      	beq.n	8002baa <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba2:	f043 0204 	orr.w	r2, r3, #4
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bb8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fe faef 	bl	80011a2 <HAL_DMA_GetState>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d049      	beq.n	8002c5e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bce:	4a69      	ldr	r2, [pc, #420]	@ (8002d74 <I2C_Slave_STOPF+0x258>)
 8002bd0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fe fac1 	bl	800115e <HAL_DMA_Abort_IT>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d03d      	beq.n	8002c5e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002bec:	4610      	mov	r0, r2
 8002bee:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002bf0:	e035      	b.n	8002c5e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d005      	beq.n	8002c16 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0e:	f043 0204 	orr.w	r2, r3, #4
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c24:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7fe fab9 	bl	80011a2 <HAL_DMA_GetState>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d014      	beq.n	8002c60 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c3a:	4a4e      	ldr	r2, [pc, #312]	@ (8002d74 <I2C_Slave_STOPF+0x258>)
 8002c3c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7fe fa8b 	bl	800115e <HAL_DMA_Abort_IT>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d008      	beq.n	8002c60 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002c58:	4610      	mov	r0, r2
 8002c5a:	4798      	blx	r3
 8002c5c:	e000      	b.n	8002c60 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002c5e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d03e      	beq.n	8002ce8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d112      	bne.n	8002c9e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	691a      	ldr	r2, [r3, #16]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8a:	1c5a      	adds	r2, r3, #1
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	3b01      	subs	r3, #1
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ca8:	2b40      	cmp	r3, #64	@ 0x40
 8002caa:	d112      	bne.n	8002cd2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	691a      	ldr	r2, [r3, #16]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb6:	b2d2      	uxtb	r2, r2
 8002cb8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cbe:	1c5a      	adds	r2, r3, #1
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d005      	beq.n	8002ce8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce0:	f043 0204 	orr.w	r2, r3, #4
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 f8b7 	bl	8002e64 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002cf6:	e039      	b.n	8002d6c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
 8002cfa:	2b2a      	cmp	r3, #42	@ 0x2a
 8002cfc:	d109      	bne.n	8002d12 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2228      	movs	r2, #40	@ 0x28
 8002d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f7ff f817 	bl	8001d40 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b28      	cmp	r3, #40	@ 0x28
 8002d1c:	d111      	bne.n	8002d42 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a15      	ldr	r2, [pc, #84]	@ (8002d78 <I2C_Slave_STOPF+0x25c>)
 8002d22:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2220      	movs	r2, #32
 8002d2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7ff f818 	bl	8001d70 <HAL_I2C_ListenCpltCallback>
}
 8002d40:	e014      	b.n	8002d6c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d46:	2b22      	cmp	r3, #34	@ 0x22
 8002d48:	d002      	beq.n	8002d50 <I2C_Slave_STOPF+0x234>
 8002d4a:	7bfb      	ldrb	r3, [r7, #15]
 8002d4c:	2b22      	cmp	r3, #34	@ 0x22
 8002d4e:	d10d      	bne.n	8002d6c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2220      	movs	r2, #32
 8002d5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7fe ffea 	bl	8001d40 <HAL_I2C_SlaveRxCpltCallback>
}
 8002d6c:	bf00      	nop
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	080030c9 	.word	0x080030c9
 8002d78:	ffff0000 	.word	0xffff0000

08002d7c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d90:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	d002      	beq.n	8002d9e <I2C_Slave_AF+0x22>
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2b20      	cmp	r3, #32
 8002d9c:	d129      	bne.n	8002df2 <I2C_Slave_AF+0x76>
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
 8002da0:	2b28      	cmp	r3, #40	@ 0x28
 8002da2:	d126      	bne.n	8002df2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a2e      	ldr	r2, [pc, #184]	@ (8002e60 <I2C_Slave_AF+0xe4>)
 8002da8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002db8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002dc2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dd2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f7fe ffc0 	bl	8001d70 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002df0:	e031      	b.n	8002e56 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002df2:	7bfb      	ldrb	r3, [r7, #15]
 8002df4:	2b21      	cmp	r3, #33	@ 0x21
 8002df6:	d129      	bne.n	8002e4c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a19      	ldr	r2, [pc, #100]	@ (8002e60 <I2C_Slave_AF+0xe4>)
 8002dfc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2221      	movs	r2, #33	@ 0x21
 8002e02:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2220      	movs	r2, #32
 8002e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002e22:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e2c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e3c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7fe fc9e 	bl	8001780 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7fe ff71 	bl	8001d2c <HAL_I2C_SlaveTxCpltCallback>
}
 8002e4a:	e004      	b.n	8002e56 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e54:	615a      	str	r2, [r3, #20]
}
 8002e56:	bf00      	nop
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	ffff0000 	.word	0xffff0000

08002e64 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e72:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e7a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002e7c:	7bbb      	ldrb	r3, [r7, #14]
 8002e7e:	2b10      	cmp	r3, #16
 8002e80:	d002      	beq.n	8002e88 <I2C_ITError+0x24>
 8002e82:	7bbb      	ldrb	r3, [r7, #14]
 8002e84:	2b40      	cmp	r3, #64	@ 0x40
 8002e86:	d10a      	bne.n	8002e9e <I2C_ITError+0x3a>
 8002e88:	7bfb      	ldrb	r3, [r7, #15]
 8002e8a:	2b22      	cmp	r3, #34	@ 0x22
 8002e8c:	d107      	bne.n	8002e9e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e9c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ea0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002ea4:	2b28      	cmp	r3, #40	@ 0x28
 8002ea6:	d107      	bne.n	8002eb8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2228      	movs	r2, #40	@ 0x28
 8002eb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002eb6:	e015      	b.n	8002ee4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ec2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ec6:	d00a      	beq.n	8002ede <I2C_ITError+0x7a>
 8002ec8:	7bfb      	ldrb	r3, [r7, #15]
 8002eca:	2b60      	cmp	r3, #96	@ 0x60
 8002ecc:	d007      	beq.n	8002ede <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002eee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ef2:	d162      	bne.n	8002fba <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f02:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d020      	beq.n	8002f54 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f16:	4a6a      	ldr	r2, [pc, #424]	@ (80030c0 <I2C_ITError+0x25c>)
 8002f18:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fe f91d 	bl	800115e <HAL_DMA_Abort_IT>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f000 8089 	beq.w	800303e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0201 	bic.w	r2, r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002f4e:	4610      	mov	r0, r2
 8002f50:	4798      	blx	r3
 8002f52:	e074      	b.n	800303e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f58:	4a59      	ldr	r2, [pc, #356]	@ (80030c0 <I2C_ITError+0x25c>)
 8002f5a:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7fe f8fc 	bl	800115e <HAL_DMA_Abort_IT>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d068      	beq.n	800303e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f76:	2b40      	cmp	r3, #64	@ 0x40
 8002f78:	d10b      	bne.n	8002f92 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	691a      	ldr	r2, [r3, #16]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f84:	b2d2      	uxtb	r2, r2
 8002f86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8c:	1c5a      	adds	r2, r3, #1
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0201 	bic.w	r2, r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002fb4:	4610      	mov	r0, r2
 8002fb6:	4798      	blx	r3
 8002fb8:	e041      	b.n	800303e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b60      	cmp	r3, #96	@ 0x60
 8002fc4:	d125      	bne.n	8003012 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2220      	movs	r2, #32
 8002fca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fde:	2b40      	cmp	r3, #64	@ 0x40
 8002fe0:	d10b      	bne.n	8002ffa <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	691a      	ldr	r2, [r3, #16]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fec:	b2d2      	uxtb	r2, r2
 8002fee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff4:	1c5a      	adds	r2, r3, #1
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0201 	bic.w	r2, r2, #1
 8003008:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7fe fece 	bl	8001dac <HAL_I2C_AbortCpltCallback>
 8003010:	e015      	b.n	800303e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800301c:	2b40      	cmp	r3, #64	@ 0x40
 800301e:	d10b      	bne.n	8003038 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	691a      	ldr	r2, [r3, #16]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003032:	1c5a      	adds	r2, r3, #1
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7fe fead 	bl	8001d98 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003042:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10e      	bne.n	800306c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003054:	2b00      	cmp	r3, #0
 8003056:	d109      	bne.n	800306c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800305e:	2b00      	cmp	r3, #0
 8003060:	d104      	bne.n	800306c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003068:	2b00      	cmp	r3, #0
 800306a:	d007      	beq.n	800307c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800307a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003082:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b04      	cmp	r3, #4
 800308e:	d113      	bne.n	80030b8 <I2C_ITError+0x254>
 8003090:	7bfb      	ldrb	r3, [r7, #15]
 8003092:	2b28      	cmp	r3, #40	@ 0x28
 8003094:	d110      	bne.n	80030b8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a0a      	ldr	r2, [pc, #40]	@ (80030c4 <I2C_ITError+0x260>)
 800309a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2220      	movs	r2, #32
 80030a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7fe fe5c 	bl	8001d70 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80030b8:	bf00      	nop
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	080030c9 	.word	0x080030c9
 80030c4:	ffff0000 	.word	0xffff0000

080030c8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80030d0:	2300      	movs	r3, #0
 80030d2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030e0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80030e2:	4b4b      	ldr	r3, [pc, #300]	@ (8003210 <I2C_DMAAbort+0x148>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	08db      	lsrs	r3, r3, #3
 80030e8:	4a4a      	ldr	r2, [pc, #296]	@ (8003214 <I2C_DMAAbort+0x14c>)
 80030ea:	fba2 2303 	umull	r2, r3, r2, r3
 80030ee:	0a1a      	lsrs	r2, r3, #8
 80030f0:	4613      	mov	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	00da      	lsls	r2, r3, #3
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d106      	bne.n	8003110 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003106:	f043 0220 	orr.w	r2, r3, #32
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800310e:	e00a      	b.n	8003126 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	3b01      	subs	r3, #1
 8003114:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003120:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003124:	d0ea      	beq.n	80030fc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003132:	2200      	movs	r2, #0
 8003134:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003142:	2200      	movs	r2, #0
 8003144:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003154:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	2200      	movs	r2, #0
 800315a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003160:	2b00      	cmp	r3, #0
 8003162:	d003      	beq.n	800316c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003168:	2200      	movs	r2, #0
 800316a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003170:	2b00      	cmp	r3, #0
 8003172:	d003      	beq.n	800317c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003178:	2200      	movs	r2, #0
 800317a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0201 	bic.w	r2, r2, #1
 800318a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b60      	cmp	r3, #96	@ 0x60
 8003196:	d10e      	bne.n	80031b6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	2220      	movs	r2, #32
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	2200      	movs	r2, #0
 80031ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80031ae:	6978      	ldr	r0, [r7, #20]
 80031b0:	f7fe fdfc 	bl	8001dac <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80031b4:	e027      	b.n	8003206 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80031b6:	7cfb      	ldrb	r3, [r7, #19]
 80031b8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80031bc:	2b28      	cmp	r3, #40	@ 0x28
 80031be:	d117      	bne.n	80031f0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 0201 	orr.w	r2, r2, #1
 80031ce:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80031de:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	2200      	movs	r2, #0
 80031e4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	2228      	movs	r2, #40	@ 0x28
 80031ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80031ee:	e007      	b.n	8003200 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	2220      	movs	r2, #32
 80031f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003200:	6978      	ldr	r0, [r7, #20]
 8003202:	f7fe fdc9 	bl	8001d98 <HAL_I2C_ErrorCallback>
}
 8003206:	bf00      	nop
 8003208:	3718      	adds	r7, #24
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	20000000 	.word	0x20000000
 8003214:	14f8b589 	.word	0x14f8b589

08003218 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003220:	2300      	movs	r3, #0
 8003222:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003224:	4b13      	ldr	r3, [pc, #76]	@ (8003274 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	08db      	lsrs	r3, r3, #3
 800322a:	4a13      	ldr	r2, [pc, #76]	@ (8003278 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800322c:	fba2 2303 	umull	r2, r3, r2, r3
 8003230:	0a1a      	lsrs	r2, r3, #8
 8003232:	4613      	mov	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	4413      	add	r3, r2
 8003238:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	3b01      	subs	r3, #1
 800323e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d107      	bne.n	8003256 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324a:	f043 0220 	orr.w	r2, r3, #32
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e008      	b.n	8003268 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003260:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003264:	d0e9      	beq.n	800323a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3714      	adds	r7, #20
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	20000000 	.word	0x20000000
 8003278:	14f8b589 	.word	0x14f8b589

0800327c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003288:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800328c:	d103      	bne.n	8003296 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003294:	e007      	b.n	80032a6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800329a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800329e:	d102      	bne.n	80032a6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2208      	movs	r2, #8
 80032a4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80032a6:	bf00      	nop
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
	...

080032b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e267      	b.n	8003796 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d075      	beq.n	80033be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80032d2:	4b88      	ldr	r3, [pc, #544]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 030c 	and.w	r3, r3, #12
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d00c      	beq.n	80032f8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032de:	4b85      	ldr	r3, [pc, #532]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80032e6:	2b08      	cmp	r3, #8
 80032e8:	d112      	bne.n	8003310 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ea:	4b82      	ldr	r3, [pc, #520]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032f6:	d10b      	bne.n	8003310 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f8:	4b7e      	ldr	r3, [pc, #504]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d05b      	beq.n	80033bc <HAL_RCC_OscConfig+0x108>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d157      	bne.n	80033bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e242      	b.n	8003796 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003318:	d106      	bne.n	8003328 <HAL_RCC_OscConfig+0x74>
 800331a:	4b76      	ldr	r3, [pc, #472]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a75      	ldr	r2, [pc, #468]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 8003320:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003324:	6013      	str	r3, [r2, #0]
 8003326:	e01d      	b.n	8003364 <HAL_RCC_OscConfig+0xb0>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003330:	d10c      	bne.n	800334c <HAL_RCC_OscConfig+0x98>
 8003332:	4b70      	ldr	r3, [pc, #448]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a6f      	ldr	r2, [pc, #444]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 8003338:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	4b6d      	ldr	r3, [pc, #436]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a6c      	ldr	r2, [pc, #432]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 8003344:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003348:	6013      	str	r3, [r2, #0]
 800334a:	e00b      	b.n	8003364 <HAL_RCC_OscConfig+0xb0>
 800334c:	4b69      	ldr	r3, [pc, #420]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a68      	ldr	r2, [pc, #416]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 8003352:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003356:	6013      	str	r3, [r2, #0]
 8003358:	4b66      	ldr	r3, [pc, #408]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a65      	ldr	r2, [pc, #404]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 800335e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003362:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d013      	beq.n	8003394 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336c:	f7fd fdda 	bl	8000f24 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003374:	f7fd fdd6 	bl	8000f24 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b64      	cmp	r3, #100	@ 0x64
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e207      	b.n	8003796 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003386:	4b5b      	ldr	r3, [pc, #364]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0f0      	beq.n	8003374 <HAL_RCC_OscConfig+0xc0>
 8003392:	e014      	b.n	80033be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003394:	f7fd fdc6 	bl	8000f24 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800339c:	f7fd fdc2 	bl	8000f24 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b64      	cmp	r3, #100	@ 0x64
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e1f3      	b.n	8003796 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ae:	4b51      	ldr	r3, [pc, #324]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1f0      	bne.n	800339c <HAL_RCC_OscConfig+0xe8>
 80033ba:	e000      	b.n	80033be <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d063      	beq.n	8003492 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80033ca:	4b4a      	ldr	r3, [pc, #296]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f003 030c 	and.w	r3, r3, #12
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00b      	beq.n	80033ee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033d6:	4b47      	ldr	r3, [pc, #284]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80033de:	2b08      	cmp	r3, #8
 80033e0:	d11c      	bne.n	800341c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033e2:	4b44      	ldr	r3, [pc, #272]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d116      	bne.n	800341c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ee:	4b41      	ldr	r3, [pc, #260]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d005      	beq.n	8003406 <HAL_RCC_OscConfig+0x152>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d001      	beq.n	8003406 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e1c7      	b.n	8003796 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003406:	4b3b      	ldr	r3, [pc, #236]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	4937      	ldr	r1, [pc, #220]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 8003416:	4313      	orrs	r3, r2
 8003418:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800341a:	e03a      	b.n	8003492 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d020      	beq.n	8003466 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003424:	4b34      	ldr	r3, [pc, #208]	@ (80034f8 <HAL_RCC_OscConfig+0x244>)
 8003426:	2201      	movs	r2, #1
 8003428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342a:	f7fd fd7b 	bl	8000f24 <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003430:	e008      	b.n	8003444 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003432:	f7fd fd77 	bl	8000f24 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d901      	bls.n	8003444 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e1a8      	b.n	8003796 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003444:	4b2b      	ldr	r3, [pc, #172]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d0f0      	beq.n	8003432 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003450:	4b28      	ldr	r3, [pc, #160]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	4925      	ldr	r1, [pc, #148]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 8003460:	4313      	orrs	r3, r2
 8003462:	600b      	str	r3, [r1, #0]
 8003464:	e015      	b.n	8003492 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003466:	4b24      	ldr	r3, [pc, #144]	@ (80034f8 <HAL_RCC_OscConfig+0x244>)
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346c:	f7fd fd5a 	bl	8000f24 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003474:	f7fd fd56 	bl	8000f24 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e187      	b.n	8003796 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003486:	4b1b      	ldr	r3, [pc, #108]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1f0      	bne.n	8003474 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0308 	and.w	r3, r3, #8
 800349a:	2b00      	cmp	r3, #0
 800349c:	d036      	beq.n	800350c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d016      	beq.n	80034d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034a6:	4b15      	ldr	r3, [pc, #84]	@ (80034fc <HAL_RCC_OscConfig+0x248>)
 80034a8:	2201      	movs	r2, #1
 80034aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ac:	f7fd fd3a 	bl	8000f24 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034b4:	f7fd fd36 	bl	8000f24 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e167      	b.n	8003796 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034c6:	4b0b      	ldr	r3, [pc, #44]	@ (80034f4 <HAL_RCC_OscConfig+0x240>)
 80034c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0f0      	beq.n	80034b4 <HAL_RCC_OscConfig+0x200>
 80034d2:	e01b      	b.n	800350c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034d4:	4b09      	ldr	r3, [pc, #36]	@ (80034fc <HAL_RCC_OscConfig+0x248>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034da:	f7fd fd23 	bl	8000f24 <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e0:	e00e      	b.n	8003500 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034e2:	f7fd fd1f 	bl	8000f24 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d907      	bls.n	8003500 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e150      	b.n	8003796 <HAL_RCC_OscConfig+0x4e2>
 80034f4:	40023800 	.word	0x40023800
 80034f8:	42470000 	.word	0x42470000
 80034fc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003500:	4b88      	ldr	r3, [pc, #544]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 8003502:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1ea      	bne.n	80034e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 8097 	beq.w	8003648 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800351a:	2300      	movs	r3, #0
 800351c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800351e:	4b81      	ldr	r3, [pc, #516]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 8003520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003522:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10f      	bne.n	800354a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800352a:	2300      	movs	r3, #0
 800352c:	60bb      	str	r3, [r7, #8]
 800352e:	4b7d      	ldr	r3, [pc, #500]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 8003530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003532:	4a7c      	ldr	r2, [pc, #496]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 8003534:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003538:	6413      	str	r3, [r2, #64]	@ 0x40
 800353a:	4b7a      	ldr	r3, [pc, #488]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 800353c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800353e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003542:	60bb      	str	r3, [r7, #8]
 8003544:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003546:	2301      	movs	r3, #1
 8003548:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800354a:	4b77      	ldr	r3, [pc, #476]	@ (8003728 <HAL_RCC_OscConfig+0x474>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003552:	2b00      	cmp	r3, #0
 8003554:	d118      	bne.n	8003588 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003556:	4b74      	ldr	r3, [pc, #464]	@ (8003728 <HAL_RCC_OscConfig+0x474>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a73      	ldr	r2, [pc, #460]	@ (8003728 <HAL_RCC_OscConfig+0x474>)
 800355c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003560:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003562:	f7fd fcdf 	bl	8000f24 <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003568:	e008      	b.n	800357c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800356a:	f7fd fcdb 	bl	8000f24 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e10c      	b.n	8003796 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800357c:	4b6a      	ldr	r3, [pc, #424]	@ (8003728 <HAL_RCC_OscConfig+0x474>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003584:	2b00      	cmp	r3, #0
 8003586:	d0f0      	beq.n	800356a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d106      	bne.n	800359e <HAL_RCC_OscConfig+0x2ea>
 8003590:	4b64      	ldr	r3, [pc, #400]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 8003592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003594:	4a63      	ldr	r2, [pc, #396]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 8003596:	f043 0301 	orr.w	r3, r3, #1
 800359a:	6713      	str	r3, [r2, #112]	@ 0x70
 800359c:	e01c      	b.n	80035d8 <HAL_RCC_OscConfig+0x324>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	2b05      	cmp	r3, #5
 80035a4:	d10c      	bne.n	80035c0 <HAL_RCC_OscConfig+0x30c>
 80035a6:	4b5f      	ldr	r3, [pc, #380]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 80035a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035aa:	4a5e      	ldr	r2, [pc, #376]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 80035ac:	f043 0304 	orr.w	r3, r3, #4
 80035b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80035b2:	4b5c      	ldr	r3, [pc, #368]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 80035b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035b6:	4a5b      	ldr	r2, [pc, #364]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 80035b8:	f043 0301 	orr.w	r3, r3, #1
 80035bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80035be:	e00b      	b.n	80035d8 <HAL_RCC_OscConfig+0x324>
 80035c0:	4b58      	ldr	r3, [pc, #352]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 80035c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035c4:	4a57      	ldr	r2, [pc, #348]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 80035c6:	f023 0301 	bic.w	r3, r3, #1
 80035ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80035cc:	4b55      	ldr	r3, [pc, #340]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 80035ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035d0:	4a54      	ldr	r2, [pc, #336]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 80035d2:	f023 0304 	bic.w	r3, r3, #4
 80035d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d015      	beq.n	800360c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e0:	f7fd fca0 	bl	8000f24 <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035e6:	e00a      	b.n	80035fe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035e8:	f7fd fc9c 	bl	8000f24 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e0cb      	b.n	8003796 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035fe:	4b49      	ldr	r3, [pc, #292]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 8003600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d0ee      	beq.n	80035e8 <HAL_RCC_OscConfig+0x334>
 800360a:	e014      	b.n	8003636 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800360c:	f7fd fc8a 	bl	8000f24 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003612:	e00a      	b.n	800362a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003614:	f7fd fc86 	bl	8000f24 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003622:	4293      	cmp	r3, r2
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e0b5      	b.n	8003796 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800362a:	4b3e      	ldr	r3, [pc, #248]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 800362c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1ee      	bne.n	8003614 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003636:	7dfb      	ldrb	r3, [r7, #23]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d105      	bne.n	8003648 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800363c:	4b39      	ldr	r3, [pc, #228]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 800363e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003640:	4a38      	ldr	r2, [pc, #224]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 8003642:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003646:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 80a1 	beq.w	8003794 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003652:	4b34      	ldr	r3, [pc, #208]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 030c 	and.w	r3, r3, #12
 800365a:	2b08      	cmp	r3, #8
 800365c:	d05c      	beq.n	8003718 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	2b02      	cmp	r3, #2
 8003664:	d141      	bne.n	80036ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003666:	4b31      	ldr	r3, [pc, #196]	@ (800372c <HAL_RCC_OscConfig+0x478>)
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800366c:	f7fd fc5a 	bl	8000f24 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003674:	f7fd fc56 	bl	8000f24 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e087      	b.n	8003796 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003686:	4b27      	ldr	r3, [pc, #156]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1f0      	bne.n	8003674 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	69da      	ldr	r2, [r3, #28]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a0:	019b      	lsls	r3, r3, #6
 80036a2:	431a      	orrs	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a8:	085b      	lsrs	r3, r3, #1
 80036aa:	3b01      	subs	r3, #1
 80036ac:	041b      	lsls	r3, r3, #16
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b4:	061b      	lsls	r3, r3, #24
 80036b6:	491b      	ldr	r1, [pc, #108]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036bc:	4b1b      	ldr	r3, [pc, #108]	@ (800372c <HAL_RCC_OscConfig+0x478>)
 80036be:	2201      	movs	r2, #1
 80036c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c2:	f7fd fc2f 	bl	8000f24 <HAL_GetTick>
 80036c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c8:	e008      	b.n	80036dc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ca:	f7fd fc2b 	bl	8000f24 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e05c      	b.n	8003796 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036dc:	4b11      	ldr	r3, [pc, #68]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d0f0      	beq.n	80036ca <HAL_RCC_OscConfig+0x416>
 80036e8:	e054      	b.n	8003794 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ea:	4b10      	ldr	r3, [pc, #64]	@ (800372c <HAL_RCC_OscConfig+0x478>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f0:	f7fd fc18 	bl	8000f24 <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f8:	f7fd fc14 	bl	8000f24 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e045      	b.n	8003796 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800370a:	4b06      	ldr	r3, [pc, #24]	@ (8003724 <HAL_RCC_OscConfig+0x470>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1f0      	bne.n	80036f8 <HAL_RCC_OscConfig+0x444>
 8003716:	e03d      	b.n	8003794 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d107      	bne.n	8003730 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e038      	b.n	8003796 <HAL_RCC_OscConfig+0x4e2>
 8003724:	40023800 	.word	0x40023800
 8003728:	40007000 	.word	0x40007000
 800372c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003730:	4b1b      	ldr	r3, [pc, #108]	@ (80037a0 <HAL_RCC_OscConfig+0x4ec>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d028      	beq.n	8003790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003748:	429a      	cmp	r2, r3
 800374a:	d121      	bne.n	8003790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003756:	429a      	cmp	r2, r3
 8003758:	d11a      	bne.n	8003790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003760:	4013      	ands	r3, r2
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003766:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003768:	4293      	cmp	r3, r2
 800376a:	d111      	bne.n	8003790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003776:	085b      	lsrs	r3, r3, #1
 8003778:	3b01      	subs	r3, #1
 800377a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800377c:	429a      	cmp	r2, r3
 800377e:	d107      	bne.n	8003790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800378a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800378c:	429a      	cmp	r2, r3
 800378e:	d001      	beq.n	8003794 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e000      	b.n	8003796 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3718      	adds	r7, #24
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	40023800 	.word	0x40023800

080037a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e0cc      	b.n	8003952 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037b8:	4b68      	ldr	r3, [pc, #416]	@ (800395c <HAL_RCC_ClockConfig+0x1b8>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d90c      	bls.n	80037e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037c6:	4b65      	ldr	r3, [pc, #404]	@ (800395c <HAL_RCC_ClockConfig+0x1b8>)
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	b2d2      	uxtb	r2, r2
 80037cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ce:	4b63      	ldr	r3, [pc, #396]	@ (800395c <HAL_RCC_ClockConfig+0x1b8>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0307 	and.w	r3, r3, #7
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d001      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e0b8      	b.n	8003952 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d020      	beq.n	800382e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d005      	beq.n	8003804 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037f8:	4b59      	ldr	r3, [pc, #356]	@ (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	4a58      	ldr	r2, [pc, #352]	@ (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 80037fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003802:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0308 	and.w	r3, r3, #8
 800380c:	2b00      	cmp	r3, #0
 800380e:	d005      	beq.n	800381c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003810:	4b53      	ldr	r3, [pc, #332]	@ (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	4a52      	ldr	r2, [pc, #328]	@ (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 8003816:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800381a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800381c:	4b50      	ldr	r3, [pc, #320]	@ (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	494d      	ldr	r1, [pc, #308]	@ (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 800382a:	4313      	orrs	r3, r2
 800382c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d044      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d107      	bne.n	8003852 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003842:	4b47      	ldr	r3, [pc, #284]	@ (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d119      	bne.n	8003882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e07f      	b.n	8003952 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	2b02      	cmp	r3, #2
 8003858:	d003      	beq.n	8003862 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800385e:	2b03      	cmp	r3, #3
 8003860:	d107      	bne.n	8003872 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003862:	4b3f      	ldr	r3, [pc, #252]	@ (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d109      	bne.n	8003882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e06f      	b.n	8003952 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003872:	4b3b      	ldr	r3, [pc, #236]	@ (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e067      	b.n	8003952 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003882:	4b37      	ldr	r3, [pc, #220]	@ (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f023 0203 	bic.w	r2, r3, #3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	4934      	ldr	r1, [pc, #208]	@ (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 8003890:	4313      	orrs	r3, r2
 8003892:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003894:	f7fd fb46 	bl	8000f24 <HAL_GetTick>
 8003898:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800389a:	e00a      	b.n	80038b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800389c:	f7fd fb42 	bl	8000f24 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e04f      	b.n	8003952 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038b2:	4b2b      	ldr	r3, [pc, #172]	@ (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 020c 	and.w	r2, r3, #12
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d1eb      	bne.n	800389c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038c4:	4b25      	ldr	r3, [pc, #148]	@ (800395c <HAL_RCC_ClockConfig+0x1b8>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0307 	and.w	r3, r3, #7
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d20c      	bcs.n	80038ec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038d2:	4b22      	ldr	r3, [pc, #136]	@ (800395c <HAL_RCC_ClockConfig+0x1b8>)
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	b2d2      	uxtb	r2, r2
 80038d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038da:	4b20      	ldr	r3, [pc, #128]	@ (800395c <HAL_RCC_ClockConfig+0x1b8>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0307 	and.w	r3, r3, #7
 80038e2:	683a      	ldr	r2, [r7, #0]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d001      	beq.n	80038ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e032      	b.n	8003952 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d008      	beq.n	800390a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038f8:	4b19      	ldr	r3, [pc, #100]	@ (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	4916      	ldr	r1, [pc, #88]	@ (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 8003906:	4313      	orrs	r3, r2
 8003908:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	2b00      	cmp	r3, #0
 8003914:	d009      	beq.n	800392a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003916:	4b12      	ldr	r3, [pc, #72]	@ (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	490e      	ldr	r1, [pc, #56]	@ (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 8003926:	4313      	orrs	r3, r2
 8003928:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800392a:	f000 f821 	bl	8003970 <HAL_RCC_GetSysClockFreq>
 800392e:	4602      	mov	r2, r0
 8003930:	4b0b      	ldr	r3, [pc, #44]	@ (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	091b      	lsrs	r3, r3, #4
 8003936:	f003 030f 	and.w	r3, r3, #15
 800393a:	490a      	ldr	r1, [pc, #40]	@ (8003964 <HAL_RCC_ClockConfig+0x1c0>)
 800393c:	5ccb      	ldrb	r3, [r1, r3]
 800393e:	fa22 f303 	lsr.w	r3, r2, r3
 8003942:	4a09      	ldr	r2, [pc, #36]	@ (8003968 <HAL_RCC_ClockConfig+0x1c4>)
 8003944:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003946:	4b09      	ldr	r3, [pc, #36]	@ (800396c <HAL_RCC_ClockConfig+0x1c8>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4618      	mov	r0, r3
 800394c:	f7fd faa6 	bl	8000e9c <HAL_InitTick>

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	40023c00 	.word	0x40023c00
 8003960:	40023800 	.word	0x40023800
 8003964:	08007528 	.word	0x08007528
 8003968:	20000000 	.word	0x20000000
 800396c:	20000004 	.word	0x20000004

08003970 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003970:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003974:	b090      	sub	sp, #64	@ 0x40
 8003976:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003978:	2300      	movs	r3, #0
 800397a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800397c:	2300      	movs	r3, #0
 800397e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003980:	2300      	movs	r3, #0
 8003982:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003984:	2300      	movs	r3, #0
 8003986:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003988:	4b59      	ldr	r3, [pc, #356]	@ (8003af0 <HAL_RCC_GetSysClockFreq+0x180>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f003 030c 	and.w	r3, r3, #12
 8003990:	2b08      	cmp	r3, #8
 8003992:	d00d      	beq.n	80039b0 <HAL_RCC_GetSysClockFreq+0x40>
 8003994:	2b08      	cmp	r3, #8
 8003996:	f200 80a1 	bhi.w	8003adc <HAL_RCC_GetSysClockFreq+0x16c>
 800399a:	2b00      	cmp	r3, #0
 800399c:	d002      	beq.n	80039a4 <HAL_RCC_GetSysClockFreq+0x34>
 800399e:	2b04      	cmp	r3, #4
 80039a0:	d003      	beq.n	80039aa <HAL_RCC_GetSysClockFreq+0x3a>
 80039a2:	e09b      	b.n	8003adc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039a4:	4b53      	ldr	r3, [pc, #332]	@ (8003af4 <HAL_RCC_GetSysClockFreq+0x184>)
 80039a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80039a8:	e09b      	b.n	8003ae2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039aa:	4b53      	ldr	r3, [pc, #332]	@ (8003af8 <HAL_RCC_GetSysClockFreq+0x188>)
 80039ac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80039ae:	e098      	b.n	8003ae2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039b0:	4b4f      	ldr	r3, [pc, #316]	@ (8003af0 <HAL_RCC_GetSysClockFreq+0x180>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039b8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039ba:	4b4d      	ldr	r3, [pc, #308]	@ (8003af0 <HAL_RCC_GetSysClockFreq+0x180>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d028      	beq.n	8003a18 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039c6:	4b4a      	ldr	r3, [pc, #296]	@ (8003af0 <HAL_RCC_GetSysClockFreq+0x180>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	099b      	lsrs	r3, r3, #6
 80039cc:	2200      	movs	r2, #0
 80039ce:	623b      	str	r3, [r7, #32]
 80039d0:	627a      	str	r2, [r7, #36]	@ 0x24
 80039d2:	6a3b      	ldr	r3, [r7, #32]
 80039d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80039d8:	2100      	movs	r1, #0
 80039da:	4b47      	ldr	r3, [pc, #284]	@ (8003af8 <HAL_RCC_GetSysClockFreq+0x188>)
 80039dc:	fb03 f201 	mul.w	r2, r3, r1
 80039e0:	2300      	movs	r3, #0
 80039e2:	fb00 f303 	mul.w	r3, r0, r3
 80039e6:	4413      	add	r3, r2
 80039e8:	4a43      	ldr	r2, [pc, #268]	@ (8003af8 <HAL_RCC_GetSysClockFreq+0x188>)
 80039ea:	fba0 1202 	umull	r1, r2, r0, r2
 80039ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039f0:	460a      	mov	r2, r1
 80039f2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80039f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039f6:	4413      	add	r3, r2
 80039f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039fc:	2200      	movs	r2, #0
 80039fe:	61bb      	str	r3, [r7, #24]
 8003a00:	61fa      	str	r2, [r7, #28]
 8003a02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a06:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003a0a:	f7fc fc39 	bl	8000280 <__aeabi_uldivmod>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	460b      	mov	r3, r1
 8003a12:	4613      	mov	r3, r2
 8003a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a16:	e053      	b.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a18:	4b35      	ldr	r3, [pc, #212]	@ (8003af0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	099b      	lsrs	r3, r3, #6
 8003a1e:	2200      	movs	r2, #0
 8003a20:	613b      	str	r3, [r7, #16]
 8003a22:	617a      	str	r2, [r7, #20]
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003a2a:	f04f 0b00 	mov.w	fp, #0
 8003a2e:	4652      	mov	r2, sl
 8003a30:	465b      	mov	r3, fp
 8003a32:	f04f 0000 	mov.w	r0, #0
 8003a36:	f04f 0100 	mov.w	r1, #0
 8003a3a:	0159      	lsls	r1, r3, #5
 8003a3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a40:	0150      	lsls	r0, r2, #5
 8003a42:	4602      	mov	r2, r0
 8003a44:	460b      	mov	r3, r1
 8003a46:	ebb2 080a 	subs.w	r8, r2, sl
 8003a4a:	eb63 090b 	sbc.w	r9, r3, fp
 8003a4e:	f04f 0200 	mov.w	r2, #0
 8003a52:	f04f 0300 	mov.w	r3, #0
 8003a56:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003a5a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003a5e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003a62:	ebb2 0408 	subs.w	r4, r2, r8
 8003a66:	eb63 0509 	sbc.w	r5, r3, r9
 8003a6a:	f04f 0200 	mov.w	r2, #0
 8003a6e:	f04f 0300 	mov.w	r3, #0
 8003a72:	00eb      	lsls	r3, r5, #3
 8003a74:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a78:	00e2      	lsls	r2, r4, #3
 8003a7a:	4614      	mov	r4, r2
 8003a7c:	461d      	mov	r5, r3
 8003a7e:	eb14 030a 	adds.w	r3, r4, sl
 8003a82:	603b      	str	r3, [r7, #0]
 8003a84:	eb45 030b 	adc.w	r3, r5, fp
 8003a88:	607b      	str	r3, [r7, #4]
 8003a8a:	f04f 0200 	mov.w	r2, #0
 8003a8e:	f04f 0300 	mov.w	r3, #0
 8003a92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a96:	4629      	mov	r1, r5
 8003a98:	028b      	lsls	r3, r1, #10
 8003a9a:	4621      	mov	r1, r4
 8003a9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003aa0:	4621      	mov	r1, r4
 8003aa2:	028a      	lsls	r2, r1, #10
 8003aa4:	4610      	mov	r0, r2
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aaa:	2200      	movs	r2, #0
 8003aac:	60bb      	str	r3, [r7, #8]
 8003aae:	60fa      	str	r2, [r7, #12]
 8003ab0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ab4:	f7fc fbe4 	bl	8000280 <__aeabi_uldivmod>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	460b      	mov	r3, r1
 8003abc:	4613      	mov	r3, r2
 8003abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8003af0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	0c1b      	lsrs	r3, r3, #16
 8003ac6:	f003 0303 	and.w	r3, r3, #3
 8003aca:	3301      	adds	r3, #1
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003ad0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ada:	e002      	b.n	8003ae2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003adc:	4b05      	ldr	r3, [pc, #20]	@ (8003af4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003ade:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ae0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3740      	adds	r7, #64	@ 0x40
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003aee:	bf00      	nop
 8003af0:	40023800 	.word	0x40023800
 8003af4:	00f42400 	.word	0x00f42400
 8003af8:	017d7840 	.word	0x017d7840

08003afc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b00:	4b03      	ldr	r3, [pc, #12]	@ (8003b10 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b02:	681b      	ldr	r3, [r3, #0]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	20000000 	.word	0x20000000

08003b14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b18:	f7ff fff0 	bl	8003afc <HAL_RCC_GetHCLKFreq>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	4b05      	ldr	r3, [pc, #20]	@ (8003b34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	0a9b      	lsrs	r3, r3, #10
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	4903      	ldr	r1, [pc, #12]	@ (8003b38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b2a:	5ccb      	ldrb	r3, [r1, r3]
 8003b2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	40023800 	.word	0x40023800
 8003b38:	08007538 	.word	0x08007538

08003b3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b40:	f7ff ffdc 	bl	8003afc <HAL_RCC_GetHCLKFreq>
 8003b44:	4602      	mov	r2, r0
 8003b46:	4b05      	ldr	r3, [pc, #20]	@ (8003b5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	0b5b      	lsrs	r3, r3, #13
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	4903      	ldr	r1, [pc, #12]	@ (8003b60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b52:	5ccb      	ldrb	r3, [r1, r3]
 8003b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	40023800 	.word	0x40023800
 8003b60:	08007538 	.word	0x08007538

08003b64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e042      	b.n	8003bfc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d106      	bne.n	8003b90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7fd f86e 	bl	8000c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2224      	movs	r2, #36	@ 0x24
 8003b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ba6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 fa09 	bl	8003fc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	691a      	ldr	r2, [r3, #16]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003bbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	695a      	ldr	r2, [r3, #20]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003bcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003bdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2220      	movs	r2, #32
 8003be8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08a      	sub	sp, #40	@ 0x28
 8003c08:	af02      	add	r7, sp, #8
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	603b      	str	r3, [r7, #0]
 8003c10:	4613      	mov	r3, r2
 8003c12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c14:	2300      	movs	r3, #0
 8003c16:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b20      	cmp	r3, #32
 8003c22:	d175      	bne.n	8003d10 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d002      	beq.n	8003c30 <HAL_UART_Transmit+0x2c>
 8003c2a:	88fb      	ldrh	r3, [r7, #6]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e06e      	b.n	8003d12 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2221      	movs	r2, #33	@ 0x21
 8003c3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c42:	f7fd f96f 	bl	8000f24 <HAL_GetTick>
 8003c46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	88fa      	ldrh	r2, [r7, #6]
 8003c4c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	88fa      	ldrh	r2, [r7, #6]
 8003c52:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c5c:	d108      	bne.n	8003c70 <HAL_UART_Transmit+0x6c>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d104      	bne.n	8003c70 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003c66:	2300      	movs	r3, #0
 8003c68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	61bb      	str	r3, [r7, #24]
 8003c6e:	e003      	b.n	8003c78 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c74:	2300      	movs	r3, #0
 8003c76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c78:	e02e      	b.n	8003cd8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	2200      	movs	r2, #0
 8003c82:	2180      	movs	r1, #128	@ 0x80
 8003c84:	68f8      	ldr	r0, [r7, #12]
 8003c86:	f000 f8df 	bl	8003e48 <UART_WaitOnFlagUntilTimeout>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d005      	beq.n	8003c9c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e03a      	b.n	8003d12 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10b      	bne.n	8003cba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	881b      	ldrh	r3, [r3, #0]
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cb0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	3302      	adds	r3, #2
 8003cb6:	61bb      	str	r3, [r7, #24]
 8003cb8:	e007      	b.n	8003cca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	781a      	ldrb	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1cb      	bne.n	8003c7a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	2140      	movs	r1, #64	@ 0x40
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f000 f8ab 	bl	8003e48 <UART_WaitOnFlagUntilTimeout>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d005      	beq.n	8003d04 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e006      	b.n	8003d12 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2220      	movs	r2, #32
 8003d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	e000      	b.n	8003d12 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003d10:	2302      	movs	r3, #2
  }
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3720      	adds	r7, #32
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b08a      	sub	sp, #40	@ 0x28
 8003d1e:	af02      	add	r7, sp, #8
 8003d20:	60f8      	str	r0, [r7, #12]
 8003d22:	60b9      	str	r1, [r7, #8]
 8003d24:	603b      	str	r3, [r7, #0]
 8003d26:	4613      	mov	r3, r2
 8003d28:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b20      	cmp	r3, #32
 8003d38:	f040 8081 	bne.w	8003e3e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d002      	beq.n	8003d48 <HAL_UART_Receive+0x2e>
 8003d42:	88fb      	ldrh	r3, [r7, #6]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e079      	b.n	8003e40 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2222      	movs	r2, #34	@ 0x22
 8003d56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d60:	f7fd f8e0 	bl	8000f24 <HAL_GetTick>
 8003d64:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	88fa      	ldrh	r2, [r7, #6]
 8003d6a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	88fa      	ldrh	r2, [r7, #6]
 8003d70:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d7a:	d108      	bne.n	8003d8e <HAL_UART_Receive+0x74>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d104      	bne.n	8003d8e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003d84:	2300      	movs	r3, #0
 8003d86:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	61bb      	str	r3, [r7, #24]
 8003d8c:	e003      	b.n	8003d96 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d92:	2300      	movs	r3, #0
 8003d94:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003d96:	e047      	b.n	8003e28 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	2120      	movs	r1, #32
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f000 f850 	bl	8003e48 <UART_WaitOnFlagUntilTimeout>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d005      	beq.n	8003dba <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2220      	movs	r2, #32
 8003db2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e042      	b.n	8003e40 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10c      	bne.n	8003dda <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	3302      	adds	r3, #2
 8003dd6:	61bb      	str	r3, [r7, #24]
 8003dd8:	e01f      	b.n	8003e1a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003de2:	d007      	beq.n	8003df4 <HAL_UART_Receive+0xda>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d10a      	bne.n	8003e02 <HAL_UART_Receive+0xe8>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d106      	bne.n	8003e02 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	b2da      	uxtb	r2, r3
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	701a      	strb	r2, [r3, #0]
 8003e00:	e008      	b.n	8003e14 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e0e:	b2da      	uxtb	r2, r3
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	3301      	adds	r3, #1
 8003e18:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	3b01      	subs	r3, #1
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1b2      	bne.n	8003d98 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2220      	movs	r2, #32
 8003e36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	e000      	b.n	8003e40 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003e3e:	2302      	movs	r3, #2
  }
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3720      	adds	r7, #32
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b086      	sub	sp, #24
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	603b      	str	r3, [r7, #0]
 8003e54:	4613      	mov	r3, r2
 8003e56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e58:	e03b      	b.n	8003ed2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e5a:	6a3b      	ldr	r3, [r7, #32]
 8003e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e60:	d037      	beq.n	8003ed2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e62:	f7fd f85f 	bl	8000f24 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	6a3a      	ldr	r2, [r7, #32]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d302      	bcc.n	8003e78 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e03a      	b.n	8003ef2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	f003 0304 	and.w	r3, r3, #4
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d023      	beq.n	8003ed2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	2b80      	cmp	r3, #128	@ 0x80
 8003e8e:	d020      	beq.n	8003ed2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	2b40      	cmp	r3, #64	@ 0x40
 8003e94:	d01d      	beq.n	8003ed2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0308 	and.w	r3, r3, #8
 8003ea0:	2b08      	cmp	r3, #8
 8003ea2:	d116      	bne.n	8003ed2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	617b      	str	r3, [r7, #20]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	617b      	str	r3, [r7, #20]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f000 f81d 	bl	8003efa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2208      	movs	r2, #8
 8003ec4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e00f      	b.n	8003ef2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	4013      	ands	r3, r2
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	bf0c      	ite	eq
 8003ee2:	2301      	moveq	r3, #1
 8003ee4:	2300      	movne	r3, #0
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	461a      	mov	r2, r3
 8003eea:	79fb      	ldrb	r3, [r7, #7]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d0b4      	beq.n	8003e5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3718      	adds	r7, #24
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b095      	sub	sp, #84	@ 0x54
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	330c      	adds	r3, #12
 8003f08:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f0c:	e853 3f00 	ldrex	r3, [r3]
 8003f10:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	330c      	adds	r3, #12
 8003f20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f22:	643a      	str	r2, [r7, #64]	@ 0x40
 8003f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f26:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f2a:	e841 2300 	strex	r3, r2, [r1]
 8003f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1e5      	bne.n	8003f02 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	3314      	adds	r3, #20
 8003f3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	e853 3f00 	ldrex	r3, [r3]
 8003f44:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	f023 0301 	bic.w	r3, r3, #1
 8003f4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	3314      	adds	r3, #20
 8003f54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f58:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f5e:	e841 2300 	strex	r3, r2, [r1]
 8003f62:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1e5      	bne.n	8003f36 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d119      	bne.n	8003fa6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	330c      	adds	r3, #12
 8003f78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	e853 3f00 	ldrex	r3, [r3]
 8003f80:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	f023 0310 	bic.w	r3, r3, #16
 8003f88:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	330c      	adds	r3, #12
 8003f90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f92:	61ba      	str	r2, [r7, #24]
 8003f94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f96:	6979      	ldr	r1, [r7, #20]
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	e841 2300 	strex	r3, r2, [r1]
 8003f9e:	613b      	str	r3, [r7, #16]
   return(result);
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1e5      	bne.n	8003f72 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003fb4:	bf00      	nop
 8003fb6:	3754      	adds	r7, #84	@ 0x54
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fc4:	b0c0      	sub	sp, #256	@ 0x100
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fdc:	68d9      	ldr	r1, [r3, #12]
 8003fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	ea40 0301 	orr.w	r3, r0, r1
 8003fe8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fee:	689a      	ldr	r2, [r3, #8]
 8003ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	431a      	orrs	r2, r3
 8004000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004004:	69db      	ldr	r3, [r3, #28]
 8004006:	4313      	orrs	r3, r2
 8004008:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800400c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004018:	f021 010c 	bic.w	r1, r1, #12
 800401c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004026:	430b      	orrs	r3, r1
 8004028:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800402a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800403a:	6999      	ldr	r1, [r3, #24]
 800403c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	ea40 0301 	orr.w	r3, r0, r1
 8004046:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	4b8f      	ldr	r3, [pc, #572]	@ (800428c <UART_SetConfig+0x2cc>)
 8004050:	429a      	cmp	r2, r3
 8004052:	d005      	beq.n	8004060 <UART_SetConfig+0xa0>
 8004054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	4b8d      	ldr	r3, [pc, #564]	@ (8004290 <UART_SetConfig+0x2d0>)
 800405c:	429a      	cmp	r2, r3
 800405e:	d104      	bne.n	800406a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004060:	f7ff fd6c 	bl	8003b3c <HAL_RCC_GetPCLK2Freq>
 8004064:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004068:	e003      	b.n	8004072 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800406a:	f7ff fd53 	bl	8003b14 <HAL_RCC_GetPCLK1Freq>
 800406e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004076:	69db      	ldr	r3, [r3, #28]
 8004078:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800407c:	f040 810c 	bne.w	8004298 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004080:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004084:	2200      	movs	r2, #0
 8004086:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800408a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800408e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004092:	4622      	mov	r2, r4
 8004094:	462b      	mov	r3, r5
 8004096:	1891      	adds	r1, r2, r2
 8004098:	65b9      	str	r1, [r7, #88]	@ 0x58
 800409a:	415b      	adcs	r3, r3
 800409c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800409e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80040a2:	4621      	mov	r1, r4
 80040a4:	eb12 0801 	adds.w	r8, r2, r1
 80040a8:	4629      	mov	r1, r5
 80040aa:	eb43 0901 	adc.w	r9, r3, r1
 80040ae:	f04f 0200 	mov.w	r2, #0
 80040b2:	f04f 0300 	mov.w	r3, #0
 80040b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040c2:	4690      	mov	r8, r2
 80040c4:	4699      	mov	r9, r3
 80040c6:	4623      	mov	r3, r4
 80040c8:	eb18 0303 	adds.w	r3, r8, r3
 80040cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80040d0:	462b      	mov	r3, r5
 80040d2:	eb49 0303 	adc.w	r3, r9, r3
 80040d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80040da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80040e6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80040ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80040ee:	460b      	mov	r3, r1
 80040f0:	18db      	adds	r3, r3, r3
 80040f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80040f4:	4613      	mov	r3, r2
 80040f6:	eb42 0303 	adc.w	r3, r2, r3
 80040fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80040fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004100:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004104:	f7fc f8bc 	bl	8000280 <__aeabi_uldivmod>
 8004108:	4602      	mov	r2, r0
 800410a:	460b      	mov	r3, r1
 800410c:	4b61      	ldr	r3, [pc, #388]	@ (8004294 <UART_SetConfig+0x2d4>)
 800410e:	fba3 2302 	umull	r2, r3, r3, r2
 8004112:	095b      	lsrs	r3, r3, #5
 8004114:	011c      	lsls	r4, r3, #4
 8004116:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800411a:	2200      	movs	r2, #0
 800411c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004120:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004124:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004128:	4642      	mov	r2, r8
 800412a:	464b      	mov	r3, r9
 800412c:	1891      	adds	r1, r2, r2
 800412e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004130:	415b      	adcs	r3, r3
 8004132:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004134:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004138:	4641      	mov	r1, r8
 800413a:	eb12 0a01 	adds.w	sl, r2, r1
 800413e:	4649      	mov	r1, r9
 8004140:	eb43 0b01 	adc.w	fp, r3, r1
 8004144:	f04f 0200 	mov.w	r2, #0
 8004148:	f04f 0300 	mov.w	r3, #0
 800414c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004150:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004154:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004158:	4692      	mov	sl, r2
 800415a:	469b      	mov	fp, r3
 800415c:	4643      	mov	r3, r8
 800415e:	eb1a 0303 	adds.w	r3, sl, r3
 8004162:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004166:	464b      	mov	r3, r9
 8004168:	eb4b 0303 	adc.w	r3, fp, r3
 800416c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800417c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004180:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004184:	460b      	mov	r3, r1
 8004186:	18db      	adds	r3, r3, r3
 8004188:	643b      	str	r3, [r7, #64]	@ 0x40
 800418a:	4613      	mov	r3, r2
 800418c:	eb42 0303 	adc.w	r3, r2, r3
 8004190:	647b      	str	r3, [r7, #68]	@ 0x44
 8004192:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004196:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800419a:	f7fc f871 	bl	8000280 <__aeabi_uldivmod>
 800419e:	4602      	mov	r2, r0
 80041a0:	460b      	mov	r3, r1
 80041a2:	4611      	mov	r1, r2
 80041a4:	4b3b      	ldr	r3, [pc, #236]	@ (8004294 <UART_SetConfig+0x2d4>)
 80041a6:	fba3 2301 	umull	r2, r3, r3, r1
 80041aa:	095b      	lsrs	r3, r3, #5
 80041ac:	2264      	movs	r2, #100	@ 0x64
 80041ae:	fb02 f303 	mul.w	r3, r2, r3
 80041b2:	1acb      	subs	r3, r1, r3
 80041b4:	00db      	lsls	r3, r3, #3
 80041b6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80041ba:	4b36      	ldr	r3, [pc, #216]	@ (8004294 <UART_SetConfig+0x2d4>)
 80041bc:	fba3 2302 	umull	r2, r3, r3, r2
 80041c0:	095b      	lsrs	r3, r3, #5
 80041c2:	005b      	lsls	r3, r3, #1
 80041c4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80041c8:	441c      	add	r4, r3
 80041ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041ce:	2200      	movs	r2, #0
 80041d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80041d4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80041d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80041dc:	4642      	mov	r2, r8
 80041de:	464b      	mov	r3, r9
 80041e0:	1891      	adds	r1, r2, r2
 80041e2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80041e4:	415b      	adcs	r3, r3
 80041e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80041ec:	4641      	mov	r1, r8
 80041ee:	1851      	adds	r1, r2, r1
 80041f0:	6339      	str	r1, [r7, #48]	@ 0x30
 80041f2:	4649      	mov	r1, r9
 80041f4:	414b      	adcs	r3, r1
 80041f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80041f8:	f04f 0200 	mov.w	r2, #0
 80041fc:	f04f 0300 	mov.w	r3, #0
 8004200:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004204:	4659      	mov	r1, fp
 8004206:	00cb      	lsls	r3, r1, #3
 8004208:	4651      	mov	r1, sl
 800420a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800420e:	4651      	mov	r1, sl
 8004210:	00ca      	lsls	r2, r1, #3
 8004212:	4610      	mov	r0, r2
 8004214:	4619      	mov	r1, r3
 8004216:	4603      	mov	r3, r0
 8004218:	4642      	mov	r2, r8
 800421a:	189b      	adds	r3, r3, r2
 800421c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004220:	464b      	mov	r3, r9
 8004222:	460a      	mov	r2, r1
 8004224:	eb42 0303 	adc.w	r3, r2, r3
 8004228:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800422c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004238:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800423c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004240:	460b      	mov	r3, r1
 8004242:	18db      	adds	r3, r3, r3
 8004244:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004246:	4613      	mov	r3, r2
 8004248:	eb42 0303 	adc.w	r3, r2, r3
 800424c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800424e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004252:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004256:	f7fc f813 	bl	8000280 <__aeabi_uldivmod>
 800425a:	4602      	mov	r2, r0
 800425c:	460b      	mov	r3, r1
 800425e:	4b0d      	ldr	r3, [pc, #52]	@ (8004294 <UART_SetConfig+0x2d4>)
 8004260:	fba3 1302 	umull	r1, r3, r3, r2
 8004264:	095b      	lsrs	r3, r3, #5
 8004266:	2164      	movs	r1, #100	@ 0x64
 8004268:	fb01 f303 	mul.w	r3, r1, r3
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	3332      	adds	r3, #50	@ 0x32
 8004272:	4a08      	ldr	r2, [pc, #32]	@ (8004294 <UART_SetConfig+0x2d4>)
 8004274:	fba2 2303 	umull	r2, r3, r2, r3
 8004278:	095b      	lsrs	r3, r3, #5
 800427a:	f003 0207 	and.w	r2, r3, #7
 800427e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4422      	add	r2, r4
 8004286:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004288:	e106      	b.n	8004498 <UART_SetConfig+0x4d8>
 800428a:	bf00      	nop
 800428c:	40011000 	.word	0x40011000
 8004290:	40011400 	.word	0x40011400
 8004294:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004298:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800429c:	2200      	movs	r2, #0
 800429e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80042a2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80042a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80042aa:	4642      	mov	r2, r8
 80042ac:	464b      	mov	r3, r9
 80042ae:	1891      	adds	r1, r2, r2
 80042b0:	6239      	str	r1, [r7, #32]
 80042b2:	415b      	adcs	r3, r3
 80042b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80042b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042ba:	4641      	mov	r1, r8
 80042bc:	1854      	adds	r4, r2, r1
 80042be:	4649      	mov	r1, r9
 80042c0:	eb43 0501 	adc.w	r5, r3, r1
 80042c4:	f04f 0200 	mov.w	r2, #0
 80042c8:	f04f 0300 	mov.w	r3, #0
 80042cc:	00eb      	lsls	r3, r5, #3
 80042ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042d2:	00e2      	lsls	r2, r4, #3
 80042d4:	4614      	mov	r4, r2
 80042d6:	461d      	mov	r5, r3
 80042d8:	4643      	mov	r3, r8
 80042da:	18e3      	adds	r3, r4, r3
 80042dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80042e0:	464b      	mov	r3, r9
 80042e2:	eb45 0303 	adc.w	r3, r5, r3
 80042e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80042ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80042f6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	f04f 0300 	mov.w	r3, #0
 8004302:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004306:	4629      	mov	r1, r5
 8004308:	008b      	lsls	r3, r1, #2
 800430a:	4621      	mov	r1, r4
 800430c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004310:	4621      	mov	r1, r4
 8004312:	008a      	lsls	r2, r1, #2
 8004314:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004318:	f7fb ffb2 	bl	8000280 <__aeabi_uldivmod>
 800431c:	4602      	mov	r2, r0
 800431e:	460b      	mov	r3, r1
 8004320:	4b60      	ldr	r3, [pc, #384]	@ (80044a4 <UART_SetConfig+0x4e4>)
 8004322:	fba3 2302 	umull	r2, r3, r3, r2
 8004326:	095b      	lsrs	r3, r3, #5
 8004328:	011c      	lsls	r4, r3, #4
 800432a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800432e:	2200      	movs	r2, #0
 8004330:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004334:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004338:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800433c:	4642      	mov	r2, r8
 800433e:	464b      	mov	r3, r9
 8004340:	1891      	adds	r1, r2, r2
 8004342:	61b9      	str	r1, [r7, #24]
 8004344:	415b      	adcs	r3, r3
 8004346:	61fb      	str	r3, [r7, #28]
 8004348:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800434c:	4641      	mov	r1, r8
 800434e:	1851      	adds	r1, r2, r1
 8004350:	6139      	str	r1, [r7, #16]
 8004352:	4649      	mov	r1, r9
 8004354:	414b      	adcs	r3, r1
 8004356:	617b      	str	r3, [r7, #20]
 8004358:	f04f 0200 	mov.w	r2, #0
 800435c:	f04f 0300 	mov.w	r3, #0
 8004360:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004364:	4659      	mov	r1, fp
 8004366:	00cb      	lsls	r3, r1, #3
 8004368:	4651      	mov	r1, sl
 800436a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800436e:	4651      	mov	r1, sl
 8004370:	00ca      	lsls	r2, r1, #3
 8004372:	4610      	mov	r0, r2
 8004374:	4619      	mov	r1, r3
 8004376:	4603      	mov	r3, r0
 8004378:	4642      	mov	r2, r8
 800437a:	189b      	adds	r3, r3, r2
 800437c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004380:	464b      	mov	r3, r9
 8004382:	460a      	mov	r2, r1
 8004384:	eb42 0303 	adc.w	r3, r2, r3
 8004388:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800438c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004396:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004398:	f04f 0200 	mov.w	r2, #0
 800439c:	f04f 0300 	mov.w	r3, #0
 80043a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80043a4:	4649      	mov	r1, r9
 80043a6:	008b      	lsls	r3, r1, #2
 80043a8:	4641      	mov	r1, r8
 80043aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043ae:	4641      	mov	r1, r8
 80043b0:	008a      	lsls	r2, r1, #2
 80043b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80043b6:	f7fb ff63 	bl	8000280 <__aeabi_uldivmod>
 80043ba:	4602      	mov	r2, r0
 80043bc:	460b      	mov	r3, r1
 80043be:	4611      	mov	r1, r2
 80043c0:	4b38      	ldr	r3, [pc, #224]	@ (80044a4 <UART_SetConfig+0x4e4>)
 80043c2:	fba3 2301 	umull	r2, r3, r3, r1
 80043c6:	095b      	lsrs	r3, r3, #5
 80043c8:	2264      	movs	r2, #100	@ 0x64
 80043ca:	fb02 f303 	mul.w	r3, r2, r3
 80043ce:	1acb      	subs	r3, r1, r3
 80043d0:	011b      	lsls	r3, r3, #4
 80043d2:	3332      	adds	r3, #50	@ 0x32
 80043d4:	4a33      	ldr	r2, [pc, #204]	@ (80044a4 <UART_SetConfig+0x4e4>)
 80043d6:	fba2 2303 	umull	r2, r3, r2, r3
 80043da:	095b      	lsrs	r3, r3, #5
 80043dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043e0:	441c      	add	r4, r3
 80043e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043e6:	2200      	movs	r2, #0
 80043e8:	673b      	str	r3, [r7, #112]	@ 0x70
 80043ea:	677a      	str	r2, [r7, #116]	@ 0x74
 80043ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80043f0:	4642      	mov	r2, r8
 80043f2:	464b      	mov	r3, r9
 80043f4:	1891      	adds	r1, r2, r2
 80043f6:	60b9      	str	r1, [r7, #8]
 80043f8:	415b      	adcs	r3, r3
 80043fa:	60fb      	str	r3, [r7, #12]
 80043fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004400:	4641      	mov	r1, r8
 8004402:	1851      	adds	r1, r2, r1
 8004404:	6039      	str	r1, [r7, #0]
 8004406:	4649      	mov	r1, r9
 8004408:	414b      	adcs	r3, r1
 800440a:	607b      	str	r3, [r7, #4]
 800440c:	f04f 0200 	mov.w	r2, #0
 8004410:	f04f 0300 	mov.w	r3, #0
 8004414:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004418:	4659      	mov	r1, fp
 800441a:	00cb      	lsls	r3, r1, #3
 800441c:	4651      	mov	r1, sl
 800441e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004422:	4651      	mov	r1, sl
 8004424:	00ca      	lsls	r2, r1, #3
 8004426:	4610      	mov	r0, r2
 8004428:	4619      	mov	r1, r3
 800442a:	4603      	mov	r3, r0
 800442c:	4642      	mov	r2, r8
 800442e:	189b      	adds	r3, r3, r2
 8004430:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004432:	464b      	mov	r3, r9
 8004434:	460a      	mov	r2, r1
 8004436:	eb42 0303 	adc.w	r3, r2, r3
 800443a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800443c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	663b      	str	r3, [r7, #96]	@ 0x60
 8004446:	667a      	str	r2, [r7, #100]	@ 0x64
 8004448:	f04f 0200 	mov.w	r2, #0
 800444c:	f04f 0300 	mov.w	r3, #0
 8004450:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004454:	4649      	mov	r1, r9
 8004456:	008b      	lsls	r3, r1, #2
 8004458:	4641      	mov	r1, r8
 800445a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800445e:	4641      	mov	r1, r8
 8004460:	008a      	lsls	r2, r1, #2
 8004462:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004466:	f7fb ff0b 	bl	8000280 <__aeabi_uldivmod>
 800446a:	4602      	mov	r2, r0
 800446c:	460b      	mov	r3, r1
 800446e:	4b0d      	ldr	r3, [pc, #52]	@ (80044a4 <UART_SetConfig+0x4e4>)
 8004470:	fba3 1302 	umull	r1, r3, r3, r2
 8004474:	095b      	lsrs	r3, r3, #5
 8004476:	2164      	movs	r1, #100	@ 0x64
 8004478:	fb01 f303 	mul.w	r3, r1, r3
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	011b      	lsls	r3, r3, #4
 8004480:	3332      	adds	r3, #50	@ 0x32
 8004482:	4a08      	ldr	r2, [pc, #32]	@ (80044a4 <UART_SetConfig+0x4e4>)
 8004484:	fba2 2303 	umull	r2, r3, r2, r3
 8004488:	095b      	lsrs	r3, r3, #5
 800448a:	f003 020f 	and.w	r2, r3, #15
 800448e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4422      	add	r2, r4
 8004496:	609a      	str	r2, [r3, #8]
}
 8004498:	bf00      	nop
 800449a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800449e:	46bd      	mov	sp, r7
 80044a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044a4:	51eb851f 	.word	0x51eb851f

080044a8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	4603      	mov	r3, r0
 80044b0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80044b2:	2300      	movs	r3, #0
 80044b4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80044b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044ba:	2b84      	cmp	r3, #132	@ 0x84
 80044bc:	d005      	beq.n	80044ca <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80044be:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	4413      	add	r3, r2
 80044c6:	3303      	adds	r3, #3
 80044c8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80044ca:	68fb      	ldr	r3, [r7, #12]
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3714      	adds	r7, #20
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044de:	f3ef 8305 	mrs	r3, IPSR
 80044e2:	607b      	str	r3, [r7, #4]
  return(result);
 80044e4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	bf14      	ite	ne
 80044ea:	2301      	movne	r3, #1
 80044ec:	2300      	moveq	r3, #0
 80044ee:	b2db      	uxtb	r3, r3
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004500:	f001 f928 	bl	8005754 <vTaskStartScheduler>
  
  return osOK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	bd80      	pop	{r7, pc}

0800450a <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800450e:	f7ff ffe3 	bl	80044d8 <inHandlerMode>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d003      	beq.n	8004520 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8004518:	f001 fa3a 	bl	8005990 <xTaskGetTickCountFromISR>
 800451c:	4603      	mov	r3, r0
 800451e:	e002      	b.n	8004526 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8004520:	f001 fa26 	bl	8005970 <xTaskGetTickCount>
 8004524:	4603      	mov	r3, r0
  }
}
 8004526:	4618      	mov	r0, r3
 8004528:	bd80      	pop	{r7, pc}

0800452a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800452a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800452c:	b089      	sub	sp, #36	@ 0x24
 800452e:	af04      	add	r7, sp, #16
 8004530:	6078      	str	r0, [r7, #4]
 8004532:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	695b      	ldr	r3, [r3, #20]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d020      	beq.n	800457e <osThreadCreate+0x54>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d01c      	beq.n	800457e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685c      	ldr	r4, [r3, #4]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691e      	ldr	r6, [r3, #16]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004556:	4618      	mov	r0, r3
 8004558:	f7ff ffa6 	bl	80044a8 <makeFreeRtosPriority>
 800455c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004566:	9202      	str	r2, [sp, #8]
 8004568:	9301      	str	r3, [sp, #4]
 800456a:	9100      	str	r1, [sp, #0]
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	4632      	mov	r2, r6
 8004570:	4629      	mov	r1, r5
 8004572:	4620      	mov	r0, r4
 8004574:	f000 ff20 	bl	80053b8 <xTaskCreateStatic>
 8004578:	4603      	mov	r3, r0
 800457a:	60fb      	str	r3, [r7, #12]
 800457c:	e01c      	b.n	80045b8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685c      	ldr	r4, [r3, #4]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800458a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004592:	4618      	mov	r0, r3
 8004594:	f7ff ff88 	bl	80044a8 <makeFreeRtosPriority>
 8004598:	4602      	mov	r2, r0
 800459a:	f107 030c 	add.w	r3, r7, #12
 800459e:	9301      	str	r3, [sp, #4]
 80045a0:	9200      	str	r2, [sp, #0]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	4632      	mov	r2, r6
 80045a6:	4629      	mov	r1, r5
 80045a8:	4620      	mov	r0, r4
 80045aa:	f000 ff65 	bl	8005478 <xTaskCreate>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d001      	beq.n	80045b8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80045b4:	2300      	movs	r3, #0
 80045b6:	e000      	b.n	80045ba <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80045b8:	68fb      	ldr	r3, [r7, #12]
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3714      	adds	r7, #20
 80045be:	46bd      	mov	sp, r7
 80045c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080045c2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b084      	sub	sp, #16
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d001      	beq.n	80045d8 <osDelay+0x16>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	e000      	b.n	80045da <osDelay+0x18>
 80045d8:	2301      	movs	r3, #1
 80045da:	4618      	mov	r0, r3
 80045dc:	f001 f884 	bl	80056e8 <vTaskDelay>
  
  return osOK;
 80045e0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80045ea:	b590      	push	{r4, r7, lr}
 80045ec:	b085      	sub	sp, #20
 80045ee:	af02      	add	r7, sp, #8
 80045f0:	6078      	str	r0, [r7, #4]
 80045f2:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d011      	beq.n	8004620 <osMessageCreate+0x36>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00d      	beq.n	8004620 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6818      	ldr	r0, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6859      	ldr	r1, [r3, #4]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689a      	ldr	r2, [r3, #8]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	2400      	movs	r4, #0
 8004616:	9400      	str	r4, [sp, #0]
 8004618:	f000 f9e2 	bl	80049e0 <xQueueGenericCreateStatic>
 800461c:	4603      	mov	r3, r0
 800461e:	e008      	b.n	8004632 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6818      	ldr	r0, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	4619      	mov	r1, r3
 800462c:	f000 fa55 	bl	8004ada <xQueueGenericCreate>
 8004630:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004632:	4618      	mov	r0, r3
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	bd90      	pop	{r4, r7, pc}
	...

0800463c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004648:	2300      	movs	r3, #0
 800464a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <osMessagePut+0x1e>
    ticks = 1;
 8004656:	2301      	movs	r3, #1
 8004658:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800465a:	f7ff ff3d 	bl	80044d8 <inHandlerMode>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d018      	beq.n	8004696 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004664:	f107 0210 	add.w	r2, r7, #16
 8004668:	f107 0108 	add.w	r1, r7, #8
 800466c:	2300      	movs	r3, #0
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f000 fb90 	bl	8004d94 <xQueueGenericSendFromISR>
 8004674:	4603      	mov	r3, r0
 8004676:	2b01      	cmp	r3, #1
 8004678:	d001      	beq.n	800467e <osMessagePut+0x42>
      return osErrorOS;
 800467a:	23ff      	movs	r3, #255	@ 0xff
 800467c:	e018      	b.n	80046b0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d014      	beq.n	80046ae <osMessagePut+0x72>
 8004684:	4b0c      	ldr	r3, [pc, #48]	@ (80046b8 <osMessagePut+0x7c>)
 8004686:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800468a:	601a      	str	r2, [r3, #0]
 800468c:	f3bf 8f4f 	dsb	sy
 8004690:	f3bf 8f6f 	isb	sy
 8004694:	e00b      	b.n	80046ae <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004696:	f107 0108 	add.w	r1, r7, #8
 800469a:	2300      	movs	r3, #0
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 fa76 	bl	8004b90 <xQueueGenericSend>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d001      	beq.n	80046ae <osMessagePut+0x72>
      return osErrorOS;
 80046aa:	23ff      	movs	r3, #255	@ 0xff
 80046ac:	e000      	b.n	80046b0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3718      	adds	r7, #24
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	e000ed04 	.word	0xe000ed04

080046bc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80046bc:	b590      	push	{r4, r7, lr}
 80046be:	b08b      	sub	sp, #44	@ 0x2c
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80046cc:	2300      	movs	r3, #0
 80046ce:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10a      	bne.n	80046ec <osMessageGet+0x30>
    event.status = osErrorParameter;
 80046d6:	2380      	movs	r3, #128	@ 0x80
 80046d8:	617b      	str	r3, [r7, #20]
    return event;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	461c      	mov	r4, r3
 80046de:	f107 0314 	add.w	r3, r7, #20
 80046e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80046e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80046ea:	e054      	b.n	8004796 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80046ec:	2300      	movs	r3, #0
 80046ee:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80046f0:	2300      	movs	r3, #0
 80046f2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046fa:	d103      	bne.n	8004704 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80046fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004700:	627b      	str	r3, [r7, #36]	@ 0x24
 8004702:	e009      	b.n	8004718 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d006      	beq.n	8004718 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800470e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004710:	2b00      	cmp	r3, #0
 8004712:	d101      	bne.n	8004718 <osMessageGet+0x5c>
      ticks = 1;
 8004714:	2301      	movs	r3, #1
 8004716:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004718:	f7ff fede 	bl	80044d8 <inHandlerMode>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d01c      	beq.n	800475c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004722:	f107 0220 	add.w	r2, r7, #32
 8004726:	f107 0314 	add.w	r3, r7, #20
 800472a:	3304      	adds	r3, #4
 800472c:	4619      	mov	r1, r3
 800472e:	68b8      	ldr	r0, [r7, #8]
 8004730:	f000 fcb0 	bl	8005094 <xQueueReceiveFromISR>
 8004734:	4603      	mov	r3, r0
 8004736:	2b01      	cmp	r3, #1
 8004738:	d102      	bne.n	8004740 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800473a:	2310      	movs	r3, #16
 800473c:	617b      	str	r3, [r7, #20]
 800473e:	e001      	b.n	8004744 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8004740:	2300      	movs	r3, #0
 8004742:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004744:	6a3b      	ldr	r3, [r7, #32]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d01d      	beq.n	8004786 <osMessageGet+0xca>
 800474a:	4b15      	ldr	r3, [pc, #84]	@ (80047a0 <osMessageGet+0xe4>)
 800474c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004750:	601a      	str	r2, [r3, #0]
 8004752:	f3bf 8f4f 	dsb	sy
 8004756:	f3bf 8f6f 	isb	sy
 800475a:	e014      	b.n	8004786 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800475c:	f107 0314 	add.w	r3, r7, #20
 8004760:	3304      	adds	r3, #4
 8004762:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004764:	4619      	mov	r1, r3
 8004766:	68b8      	ldr	r0, [r7, #8]
 8004768:	f000 fbb2 	bl	8004ed0 <xQueueReceive>
 800476c:	4603      	mov	r3, r0
 800476e:	2b01      	cmp	r3, #1
 8004770:	d102      	bne.n	8004778 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8004772:	2310      	movs	r3, #16
 8004774:	617b      	str	r3, [r7, #20]
 8004776:	e006      	b.n	8004786 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <osMessageGet+0xc6>
 800477e:	2300      	movs	r3, #0
 8004780:	e000      	b.n	8004784 <osMessageGet+0xc8>
 8004782:	2340      	movs	r3, #64	@ 0x40
 8004784:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	461c      	mov	r4, r3
 800478a:	f107 0314 	add.w	r3, r7, #20
 800478e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004792:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	372c      	adds	r7, #44	@ 0x2c
 800479a:	46bd      	mov	sp, r7
 800479c:	bd90      	pop	{r4, r7, pc}
 800479e:	bf00      	nop
 80047a0:	e000ed04 	.word	0xe000ed04

080047a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f103 0208 	add.w	r2, r3, #8
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f04f 32ff 	mov.w	r2, #4294967295
 80047bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f103 0208 	add.w	r2, r3, #8
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f103 0208 	add.w	r2, r3, #8
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80047f2:	bf00      	nop
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047fe:	b480      	push	{r7}
 8004800:	b085      	sub	sp, #20
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
 8004806:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	689a      	ldr	r2, [r3, #8]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	683a      	ldr	r2, [r7, #0]
 8004828:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	1c5a      	adds	r2, r3, #1
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	601a      	str	r2, [r3, #0]
}
 800483a:	bf00      	nop
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004846:	b480      	push	{r7}
 8004848:	b085      	sub	sp, #20
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
 800484e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800485c:	d103      	bne.n	8004866 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	60fb      	str	r3, [r7, #12]
 8004864:	e00c      	b.n	8004880 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	3308      	adds	r3, #8
 800486a:	60fb      	str	r3, [r7, #12]
 800486c:	e002      	b.n	8004874 <vListInsert+0x2e>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	429a      	cmp	r2, r3
 800487e:	d2f6      	bcs.n	800486e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	683a      	ldr	r2, [r7, #0]
 800488e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	1c5a      	adds	r2, r3, #1
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	601a      	str	r2, [r3, #0]
}
 80048ac:	bf00      	nop
 80048ae:	3714      	adds	r7, #20
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	6892      	ldr	r2, [r2, #8]
 80048ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	6852      	ldr	r2, [r2, #4]
 80048d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d103      	bne.n	80048ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	1e5a      	subs	r2, r3, #1
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
}
 8004900:	4618      	mov	r0, r3
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10b      	bne.n	8004938 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004924:	f383 8811 	msr	BASEPRI, r3
 8004928:	f3bf 8f6f 	isb	sy
 800492c:	f3bf 8f4f 	dsb	sy
 8004930:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004932:	bf00      	nop
 8004934:	bf00      	nop
 8004936:	e7fd      	b.n	8004934 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004938:	f001 fd76 	bl	8006428 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004944:	68f9      	ldr	r1, [r7, #12]
 8004946:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004948:	fb01 f303 	mul.w	r3, r1, r3
 800494c:	441a      	add	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004968:	3b01      	subs	r3, #1
 800496a:	68f9      	ldr	r1, [r7, #12]
 800496c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800496e:	fb01 f303 	mul.w	r3, r1, r3
 8004972:	441a      	add	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	22ff      	movs	r2, #255	@ 0xff
 800497c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	22ff      	movs	r2, #255	@ 0xff
 8004984:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d114      	bne.n	80049b8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d01a      	beq.n	80049cc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	3310      	adds	r3, #16
 800499a:	4618      	mov	r0, r3
 800499c:	f001 f946 	bl	8005c2c <xTaskRemoveFromEventList>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d012      	beq.n	80049cc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80049a6:	4b0d      	ldr	r3, [pc, #52]	@ (80049dc <xQueueGenericReset+0xd0>)
 80049a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	f3bf 8f4f 	dsb	sy
 80049b2:	f3bf 8f6f 	isb	sy
 80049b6:	e009      	b.n	80049cc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	3310      	adds	r3, #16
 80049bc:	4618      	mov	r0, r3
 80049be:	f7ff fef1 	bl	80047a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	3324      	adds	r3, #36	@ 0x24
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7ff feec 	bl	80047a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80049cc:	f001 fd5e 	bl	800648c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80049d0:	2301      	movs	r3, #1
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	e000ed04 	.word	0xe000ed04

080049e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b08e      	sub	sp, #56	@ 0x38
 80049e4:	af02      	add	r7, sp, #8
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
 80049ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10b      	bne.n	8004a0c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80049f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f8:	f383 8811 	msr	BASEPRI, r3
 80049fc:	f3bf 8f6f 	isb	sy
 8004a00:	f3bf 8f4f 	dsb	sy
 8004a04:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004a06:	bf00      	nop
 8004a08:	bf00      	nop
 8004a0a:	e7fd      	b.n	8004a08 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10b      	bne.n	8004a2a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a16:	f383 8811 	msr	BASEPRI, r3
 8004a1a:	f3bf 8f6f 	isb	sy
 8004a1e:	f3bf 8f4f 	dsb	sy
 8004a22:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004a24:	bf00      	nop
 8004a26:	bf00      	nop
 8004a28:	e7fd      	b.n	8004a26 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d002      	beq.n	8004a36 <xQueueGenericCreateStatic+0x56>
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <xQueueGenericCreateStatic+0x5a>
 8004a36:	2301      	movs	r3, #1
 8004a38:	e000      	b.n	8004a3c <xQueueGenericCreateStatic+0x5c>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10b      	bne.n	8004a58 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a44:	f383 8811 	msr	BASEPRI, r3
 8004a48:	f3bf 8f6f 	isb	sy
 8004a4c:	f3bf 8f4f 	dsb	sy
 8004a50:	623b      	str	r3, [r7, #32]
}
 8004a52:	bf00      	nop
 8004a54:	bf00      	nop
 8004a56:	e7fd      	b.n	8004a54 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d102      	bne.n	8004a64 <xQueueGenericCreateStatic+0x84>
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <xQueueGenericCreateStatic+0x88>
 8004a64:	2301      	movs	r3, #1
 8004a66:	e000      	b.n	8004a6a <xQueueGenericCreateStatic+0x8a>
 8004a68:	2300      	movs	r3, #0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d10b      	bne.n	8004a86 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a72:	f383 8811 	msr	BASEPRI, r3
 8004a76:	f3bf 8f6f 	isb	sy
 8004a7a:	f3bf 8f4f 	dsb	sy
 8004a7e:	61fb      	str	r3, [r7, #28]
}
 8004a80:	bf00      	nop
 8004a82:	bf00      	nop
 8004a84:	e7fd      	b.n	8004a82 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004a86:	2348      	movs	r3, #72	@ 0x48
 8004a88:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	2b48      	cmp	r3, #72	@ 0x48
 8004a8e:	d00b      	beq.n	8004aa8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a94:	f383 8811 	msr	BASEPRI, r3
 8004a98:	f3bf 8f6f 	isb	sy
 8004a9c:	f3bf 8f4f 	dsb	sy
 8004aa0:	61bb      	str	r3, [r7, #24]
}
 8004aa2:	bf00      	nop
 8004aa4:	bf00      	nop
 8004aa6:	e7fd      	b.n	8004aa4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004aa8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00d      	beq.n	8004ad0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004abc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	68b9      	ldr	r1, [r7, #8]
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f000 f840 	bl	8004b50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3730      	adds	r7, #48	@ 0x30
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b08a      	sub	sp, #40	@ 0x28
 8004ade:	af02      	add	r7, sp, #8
 8004ae0:	60f8      	str	r0, [r7, #12]
 8004ae2:	60b9      	str	r1, [r7, #8]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10b      	bne.n	8004b06 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004af2:	f383 8811 	msr	BASEPRI, r3
 8004af6:	f3bf 8f6f 	isb	sy
 8004afa:	f3bf 8f4f 	dsb	sy
 8004afe:	613b      	str	r3, [r7, #16]
}
 8004b00:	bf00      	nop
 8004b02:	bf00      	nop
 8004b04:	e7fd      	b.n	8004b02 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	fb02 f303 	mul.w	r3, r2, r3
 8004b0e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	3348      	adds	r3, #72	@ 0x48
 8004b14:	4618      	mov	r0, r3
 8004b16:	f001 fda9 	bl	800666c <pvPortMalloc>
 8004b1a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d011      	beq.n	8004b46 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	3348      	adds	r3, #72	@ 0x48
 8004b2a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b34:	79fa      	ldrb	r2, [r7, #7]
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	68b9      	ldr	r1, [r7, #8]
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f000 f805 	bl	8004b50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b46:	69bb      	ldr	r3, [r7, #24]
	}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3720      	adds	r7, #32
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
 8004b5c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d103      	bne.n	8004b6c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	69ba      	ldr	r2, [r7, #24]
 8004b68:	601a      	str	r2, [r3, #0]
 8004b6a:	e002      	b.n	8004b72 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b7e:	2101      	movs	r1, #1
 8004b80:	69b8      	ldr	r0, [r7, #24]
 8004b82:	f7ff fec3 	bl	800490c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004b86:	bf00      	nop
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
	...

08004b90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b08e      	sub	sp, #56	@ 0x38
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
 8004b9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10b      	bne.n	8004bc4 <xQueueGenericSend+0x34>
	__asm volatile
 8004bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb0:	f383 8811 	msr	BASEPRI, r3
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004bbe:	bf00      	nop
 8004bc0:	bf00      	nop
 8004bc2:	e7fd      	b.n	8004bc0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d103      	bne.n	8004bd2 <xQueueGenericSend+0x42>
 8004bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <xQueueGenericSend+0x46>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e000      	b.n	8004bd8 <xQueueGenericSend+0x48>
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10b      	bne.n	8004bf4 <xQueueGenericSend+0x64>
	__asm volatile
 8004bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004be0:	f383 8811 	msr	BASEPRI, r3
 8004be4:	f3bf 8f6f 	isb	sy
 8004be8:	f3bf 8f4f 	dsb	sy
 8004bec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004bee:	bf00      	nop
 8004bf0:	bf00      	nop
 8004bf2:	e7fd      	b.n	8004bf0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d103      	bne.n	8004c02 <xQueueGenericSend+0x72>
 8004bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d101      	bne.n	8004c06 <xQueueGenericSend+0x76>
 8004c02:	2301      	movs	r3, #1
 8004c04:	e000      	b.n	8004c08 <xQueueGenericSend+0x78>
 8004c06:	2300      	movs	r3, #0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d10b      	bne.n	8004c24 <xQueueGenericSend+0x94>
	__asm volatile
 8004c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c10:	f383 8811 	msr	BASEPRI, r3
 8004c14:	f3bf 8f6f 	isb	sy
 8004c18:	f3bf 8f4f 	dsb	sy
 8004c1c:	623b      	str	r3, [r7, #32]
}
 8004c1e:	bf00      	nop
 8004c20:	bf00      	nop
 8004c22:	e7fd      	b.n	8004c20 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c24:	f001 f9c2 	bl	8005fac <xTaskGetSchedulerState>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d102      	bne.n	8004c34 <xQueueGenericSend+0xa4>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d101      	bne.n	8004c38 <xQueueGenericSend+0xa8>
 8004c34:	2301      	movs	r3, #1
 8004c36:	e000      	b.n	8004c3a <xQueueGenericSend+0xaa>
 8004c38:	2300      	movs	r3, #0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10b      	bne.n	8004c56 <xQueueGenericSend+0xc6>
	__asm volatile
 8004c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c42:	f383 8811 	msr	BASEPRI, r3
 8004c46:	f3bf 8f6f 	isb	sy
 8004c4a:	f3bf 8f4f 	dsb	sy
 8004c4e:	61fb      	str	r3, [r7, #28]
}
 8004c50:	bf00      	nop
 8004c52:	bf00      	nop
 8004c54:	e7fd      	b.n	8004c52 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c56:	f001 fbe7 	bl	8006428 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d302      	bcc.n	8004c6c <xQueueGenericSend+0xdc>
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d129      	bne.n	8004cc0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	68b9      	ldr	r1, [r7, #8]
 8004c70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c72:	f000 fa91 	bl	8005198 <prvCopyDataToQueue>
 8004c76:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d010      	beq.n	8004ca2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c82:	3324      	adds	r3, #36	@ 0x24
 8004c84:	4618      	mov	r0, r3
 8004c86:	f000 ffd1 	bl	8005c2c <xTaskRemoveFromEventList>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d013      	beq.n	8004cb8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004c90:	4b3f      	ldr	r3, [pc, #252]	@ (8004d90 <xQueueGenericSend+0x200>)
 8004c92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c96:	601a      	str	r2, [r3, #0]
 8004c98:	f3bf 8f4f 	dsb	sy
 8004c9c:	f3bf 8f6f 	isb	sy
 8004ca0:	e00a      	b.n	8004cb8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d007      	beq.n	8004cb8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004ca8:	4b39      	ldr	r3, [pc, #228]	@ (8004d90 <xQueueGenericSend+0x200>)
 8004caa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cae:	601a      	str	r2, [r3, #0]
 8004cb0:	f3bf 8f4f 	dsb	sy
 8004cb4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004cb8:	f001 fbe8 	bl	800648c <vPortExitCritical>
				return pdPASS;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e063      	b.n	8004d88 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d103      	bne.n	8004cce <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004cc6:	f001 fbe1 	bl	800648c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	e05c      	b.n	8004d88 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004cce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d106      	bne.n	8004ce2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004cd4:	f107 0314 	add.w	r3, r7, #20
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f001 f80b 	bl	8005cf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ce2:	f001 fbd3 	bl	800648c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ce6:	f000 fd97 	bl	8005818 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004cea:	f001 fb9d 	bl	8006428 <vPortEnterCritical>
 8004cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004cf4:	b25b      	sxtb	r3, r3
 8004cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cfa:	d103      	bne.n	8004d04 <xQueueGenericSend+0x174>
 8004cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d0a:	b25b      	sxtb	r3, r3
 8004d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d10:	d103      	bne.n	8004d1a <xQueueGenericSend+0x18a>
 8004d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d1a:	f001 fbb7 	bl	800648c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d1e:	1d3a      	adds	r2, r7, #4
 8004d20:	f107 0314 	add.w	r3, r7, #20
 8004d24:	4611      	mov	r1, r2
 8004d26:	4618      	mov	r0, r3
 8004d28:	f000 fffa 	bl	8005d20 <xTaskCheckForTimeOut>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d124      	bne.n	8004d7c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004d32:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d34:	f000 fb28 	bl	8005388 <prvIsQueueFull>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d018      	beq.n	8004d70 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d40:	3310      	adds	r3, #16
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	4611      	mov	r1, r2
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 ff4a 	bl	8005be0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004d4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d4e:	f000 fab3 	bl	80052b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004d52:	f000 fd6f 	bl	8005834 <xTaskResumeAll>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f47f af7c 	bne.w	8004c56 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8004d90 <xQueueGenericSend+0x200>)
 8004d60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d64:	601a      	str	r2, [r3, #0]
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	f3bf 8f6f 	isb	sy
 8004d6e:	e772      	b.n	8004c56 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004d70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d72:	f000 faa1 	bl	80052b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d76:	f000 fd5d 	bl	8005834 <xTaskResumeAll>
 8004d7a:	e76c      	b.n	8004c56 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004d7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d7e:	f000 fa9b 	bl	80052b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d82:	f000 fd57 	bl	8005834 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004d86:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3738      	adds	r7, #56	@ 0x38
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	e000ed04 	.word	0xe000ed04

08004d94 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b090      	sub	sp, #64	@ 0x40
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
 8004da0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10b      	bne.n	8004dc4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db0:	f383 8811 	msr	BASEPRI, r3
 8004db4:	f3bf 8f6f 	isb	sy
 8004db8:	f3bf 8f4f 	dsb	sy
 8004dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004dbe:	bf00      	nop
 8004dc0:	bf00      	nop
 8004dc2:	e7fd      	b.n	8004dc0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d103      	bne.n	8004dd2 <xQueueGenericSendFromISR+0x3e>
 8004dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <xQueueGenericSendFromISR+0x42>
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e000      	b.n	8004dd8 <xQueueGenericSendFromISR+0x44>
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d10b      	bne.n	8004df4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004de0:	f383 8811 	msr	BASEPRI, r3
 8004de4:	f3bf 8f6f 	isb	sy
 8004de8:	f3bf 8f4f 	dsb	sy
 8004dec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004dee:	bf00      	nop
 8004df0:	bf00      	nop
 8004df2:	e7fd      	b.n	8004df0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d103      	bne.n	8004e02 <xQueueGenericSendFromISR+0x6e>
 8004dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d101      	bne.n	8004e06 <xQueueGenericSendFromISR+0x72>
 8004e02:	2301      	movs	r3, #1
 8004e04:	e000      	b.n	8004e08 <xQueueGenericSendFromISR+0x74>
 8004e06:	2300      	movs	r3, #0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10b      	bne.n	8004e24 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e10:	f383 8811 	msr	BASEPRI, r3
 8004e14:	f3bf 8f6f 	isb	sy
 8004e18:	f3bf 8f4f 	dsb	sy
 8004e1c:	623b      	str	r3, [r7, #32]
}
 8004e1e:	bf00      	nop
 8004e20:	bf00      	nop
 8004e22:	e7fd      	b.n	8004e20 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e24:	f001 fbe0 	bl	80065e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004e28:	f3ef 8211 	mrs	r2, BASEPRI
 8004e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e30:	f383 8811 	msr	BASEPRI, r3
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	61fa      	str	r2, [r7, #28]
 8004e3e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004e40:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e42:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d302      	bcc.n	8004e56 <xQueueGenericSendFromISR+0xc2>
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d12f      	bne.n	8004eb6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e5c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	68b9      	ldr	r1, [r7, #8]
 8004e6a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004e6c:	f000 f994 	bl	8005198 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004e70:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e78:	d112      	bne.n	8004ea0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d016      	beq.n	8004eb0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e84:	3324      	adds	r3, #36	@ 0x24
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 fed0 	bl	8005c2c <xTaskRemoveFromEventList>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00e      	beq.n	8004eb0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00b      	beq.n	8004eb0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	601a      	str	r2, [r3, #0]
 8004e9e:	e007      	b.n	8004eb0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004ea0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	b25a      	sxtb	r2, r3
 8004eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004eb4:	e001      	b.n	8004eba <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ebc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004ec4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ec6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3740      	adds	r7, #64	@ 0x40
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b08c      	sub	sp, #48	@ 0x30
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004edc:	2300      	movs	r3, #0
 8004ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d10b      	bne.n	8004f02 <xQueueReceive+0x32>
	__asm volatile
 8004eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eee:	f383 8811 	msr	BASEPRI, r3
 8004ef2:	f3bf 8f6f 	isb	sy
 8004ef6:	f3bf 8f4f 	dsb	sy
 8004efa:	623b      	str	r3, [r7, #32]
}
 8004efc:	bf00      	nop
 8004efe:	bf00      	nop
 8004f00:	e7fd      	b.n	8004efe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d103      	bne.n	8004f10 <xQueueReceive+0x40>
 8004f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d101      	bne.n	8004f14 <xQueueReceive+0x44>
 8004f10:	2301      	movs	r3, #1
 8004f12:	e000      	b.n	8004f16 <xQueueReceive+0x46>
 8004f14:	2300      	movs	r3, #0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10b      	bne.n	8004f32 <xQueueReceive+0x62>
	__asm volatile
 8004f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f1e:	f383 8811 	msr	BASEPRI, r3
 8004f22:	f3bf 8f6f 	isb	sy
 8004f26:	f3bf 8f4f 	dsb	sy
 8004f2a:	61fb      	str	r3, [r7, #28]
}
 8004f2c:	bf00      	nop
 8004f2e:	bf00      	nop
 8004f30:	e7fd      	b.n	8004f2e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f32:	f001 f83b 	bl	8005fac <xTaskGetSchedulerState>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d102      	bne.n	8004f42 <xQueueReceive+0x72>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <xQueueReceive+0x76>
 8004f42:	2301      	movs	r3, #1
 8004f44:	e000      	b.n	8004f48 <xQueueReceive+0x78>
 8004f46:	2300      	movs	r3, #0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d10b      	bne.n	8004f64 <xQueueReceive+0x94>
	__asm volatile
 8004f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f50:	f383 8811 	msr	BASEPRI, r3
 8004f54:	f3bf 8f6f 	isb	sy
 8004f58:	f3bf 8f4f 	dsb	sy
 8004f5c:	61bb      	str	r3, [r7, #24]
}
 8004f5e:	bf00      	nop
 8004f60:	bf00      	nop
 8004f62:	e7fd      	b.n	8004f60 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f64:	f001 fa60 	bl	8006428 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f6c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d01f      	beq.n	8004fb4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f74:	68b9      	ldr	r1, [r7, #8]
 8004f76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f78:	f000 f978 	bl	800526c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7e:	1e5a      	subs	r2, r3, #1
 8004f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f82:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00f      	beq.n	8004fac <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f8e:	3310      	adds	r3, #16
 8004f90:	4618      	mov	r0, r3
 8004f92:	f000 fe4b 	bl	8005c2c <xTaskRemoveFromEventList>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d007      	beq.n	8004fac <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f9c:	4b3c      	ldr	r3, [pc, #240]	@ (8005090 <xQueueReceive+0x1c0>)
 8004f9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fa2:	601a      	str	r2, [r3, #0]
 8004fa4:	f3bf 8f4f 	dsb	sy
 8004fa8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004fac:	f001 fa6e 	bl	800648c <vPortExitCritical>
				return pdPASS;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e069      	b.n	8005088 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d103      	bne.n	8004fc2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004fba:	f001 fa67 	bl	800648c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	e062      	b.n	8005088 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d106      	bne.n	8004fd6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fc8:	f107 0310 	add.w	r3, r7, #16
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f000 fe91 	bl	8005cf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fd6:	f001 fa59 	bl	800648c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004fda:	f000 fc1d 	bl	8005818 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fde:	f001 fa23 	bl	8006428 <vPortEnterCritical>
 8004fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fe4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004fe8:	b25b      	sxtb	r3, r3
 8004fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fee:	d103      	bne.n	8004ff8 <xQueueReceive+0x128>
 8004ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ffa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ffe:	b25b      	sxtb	r3, r3
 8005000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005004:	d103      	bne.n	800500e <xQueueReceive+0x13e>
 8005006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005008:	2200      	movs	r2, #0
 800500a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800500e:	f001 fa3d 	bl	800648c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005012:	1d3a      	adds	r2, r7, #4
 8005014:	f107 0310 	add.w	r3, r7, #16
 8005018:	4611      	mov	r1, r2
 800501a:	4618      	mov	r0, r3
 800501c:	f000 fe80 	bl	8005d20 <xTaskCheckForTimeOut>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d123      	bne.n	800506e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005026:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005028:	f000 f998 	bl	800535c <prvIsQueueEmpty>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d017      	beq.n	8005062 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005034:	3324      	adds	r3, #36	@ 0x24
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	4611      	mov	r1, r2
 800503a:	4618      	mov	r0, r3
 800503c:	f000 fdd0 	bl	8005be0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005040:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005042:	f000 f939 	bl	80052b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005046:	f000 fbf5 	bl	8005834 <xTaskResumeAll>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d189      	bne.n	8004f64 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005050:	4b0f      	ldr	r3, [pc, #60]	@ (8005090 <xQueueReceive+0x1c0>)
 8005052:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	f3bf 8f4f 	dsb	sy
 800505c:	f3bf 8f6f 	isb	sy
 8005060:	e780      	b.n	8004f64 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005062:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005064:	f000 f928 	bl	80052b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005068:	f000 fbe4 	bl	8005834 <xTaskResumeAll>
 800506c:	e77a      	b.n	8004f64 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800506e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005070:	f000 f922 	bl	80052b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005074:	f000 fbde 	bl	8005834 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005078:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800507a:	f000 f96f 	bl	800535c <prvIsQueueEmpty>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	f43f af6f 	beq.w	8004f64 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005086:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005088:	4618      	mov	r0, r3
 800508a:	3730      	adds	r7, #48	@ 0x30
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	e000ed04 	.word	0xe000ed04

08005094 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b08e      	sub	sp, #56	@ 0x38
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80050a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10b      	bne.n	80050c2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80050aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ae:	f383 8811 	msr	BASEPRI, r3
 80050b2:	f3bf 8f6f 	isb	sy
 80050b6:	f3bf 8f4f 	dsb	sy
 80050ba:	623b      	str	r3, [r7, #32]
}
 80050bc:	bf00      	nop
 80050be:	bf00      	nop
 80050c0:	e7fd      	b.n	80050be <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d103      	bne.n	80050d0 <xQueueReceiveFromISR+0x3c>
 80050c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d101      	bne.n	80050d4 <xQueueReceiveFromISR+0x40>
 80050d0:	2301      	movs	r3, #1
 80050d2:	e000      	b.n	80050d6 <xQueueReceiveFromISR+0x42>
 80050d4:	2300      	movs	r3, #0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10b      	bne.n	80050f2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80050da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050de:	f383 8811 	msr	BASEPRI, r3
 80050e2:	f3bf 8f6f 	isb	sy
 80050e6:	f3bf 8f4f 	dsb	sy
 80050ea:	61fb      	str	r3, [r7, #28]
}
 80050ec:	bf00      	nop
 80050ee:	bf00      	nop
 80050f0:	e7fd      	b.n	80050ee <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80050f2:	f001 fa79 	bl	80065e8 <vPortValidateInterruptPriority>
	__asm volatile
 80050f6:	f3ef 8211 	mrs	r2, BASEPRI
 80050fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050fe:	f383 8811 	msr	BASEPRI, r3
 8005102:	f3bf 8f6f 	isb	sy
 8005106:	f3bf 8f4f 	dsb	sy
 800510a:	61ba      	str	r2, [r7, #24]
 800510c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800510e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005110:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005116:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800511a:	2b00      	cmp	r3, #0
 800511c:	d02f      	beq.n	800517e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800511e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005120:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005124:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005128:	68b9      	ldr	r1, [r7, #8]
 800512a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800512c:	f000 f89e 	bl	800526c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005132:	1e5a      	subs	r2, r3, #1
 8005134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005136:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005138:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800513c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005140:	d112      	bne.n	8005168 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d016      	beq.n	8005178 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800514a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800514c:	3310      	adds	r3, #16
 800514e:	4618      	mov	r0, r3
 8005150:	f000 fd6c 	bl	8005c2c <xTaskRemoveFromEventList>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00e      	beq.n	8005178 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00b      	beq.n	8005178 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	601a      	str	r2, [r3, #0]
 8005166:	e007      	b.n	8005178 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005168:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800516c:	3301      	adds	r3, #1
 800516e:	b2db      	uxtb	r3, r3
 8005170:	b25a      	sxtb	r2, r3
 8005172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005174:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005178:	2301      	movs	r3, #1
 800517a:	637b      	str	r3, [r7, #52]	@ 0x34
 800517c:	e001      	b.n	8005182 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800517e:	2300      	movs	r3, #0
 8005180:	637b      	str	r3, [r7, #52]	@ 0x34
 8005182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005184:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	f383 8811 	msr	BASEPRI, r3
}
 800518c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800518e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005190:	4618      	mov	r0, r3
 8005192:	3738      	adds	r7, #56	@ 0x38
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b086      	sub	sp, #24
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80051a4:	2300      	movs	r3, #0
 80051a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d10d      	bne.n	80051d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d14d      	bne.n	800525a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 ff10 	bl	8005fe8 <xTaskPriorityDisinherit>
 80051c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	609a      	str	r2, [r3, #8]
 80051d0:	e043      	b.n	800525a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d119      	bne.n	800520c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6858      	ldr	r0, [r3, #4]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e0:	461a      	mov	r2, r3
 80051e2:	68b9      	ldr	r1, [r7, #8]
 80051e4:	f001 fc98 	bl	8006b18 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f0:	441a      	add	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	685a      	ldr	r2, [r3, #4]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d32b      	bcc.n	800525a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	605a      	str	r2, [r3, #4]
 800520a:	e026      	b.n	800525a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	68d8      	ldr	r0, [r3, #12]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005214:	461a      	mov	r2, r3
 8005216:	68b9      	ldr	r1, [r7, #8]
 8005218:	f001 fc7e 	bl	8006b18 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	68da      	ldr	r2, [r3, #12]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005224:	425b      	negs	r3, r3
 8005226:	441a      	add	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	68da      	ldr	r2, [r3, #12]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	429a      	cmp	r2, r3
 8005236:	d207      	bcs.n	8005248 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	689a      	ldr	r2, [r3, #8]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005240:	425b      	negs	r3, r3
 8005242:	441a      	add	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b02      	cmp	r3, #2
 800524c:	d105      	bne.n	800525a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d002      	beq.n	800525a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	3b01      	subs	r3, #1
 8005258:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	1c5a      	adds	r2, r3, #1
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005262:	697b      	ldr	r3, [r7, #20]
}
 8005264:	4618      	mov	r0, r3
 8005266:	3718      	adds	r7, #24
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800527a:	2b00      	cmp	r3, #0
 800527c:	d018      	beq.n	80052b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	68da      	ldr	r2, [r3, #12]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005286:	441a      	add	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	68da      	ldr	r2, [r3, #12]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	429a      	cmp	r2, r3
 8005296:	d303      	bcc.n	80052a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	68d9      	ldr	r1, [r3, #12]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a8:	461a      	mov	r2, r3
 80052aa:	6838      	ldr	r0, [r7, #0]
 80052ac:	f001 fc34 	bl	8006b18 <memcpy>
	}
}
 80052b0:	bf00      	nop
 80052b2:	3708      	adds	r7, #8
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80052c0:	f001 f8b2 	bl	8006428 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80052ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052cc:	e011      	b.n	80052f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d012      	beq.n	80052fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	3324      	adds	r3, #36	@ 0x24
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 fca6 	bl	8005c2c <xTaskRemoveFromEventList>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d001      	beq.n	80052ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80052e6:	f000 fd7f 	bl	8005de8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80052ea:	7bfb      	ldrb	r3, [r7, #15]
 80052ec:	3b01      	subs	r3, #1
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	dce9      	bgt.n	80052ce <prvUnlockQueue+0x16>
 80052fa:	e000      	b.n	80052fe <prvUnlockQueue+0x46>
					break;
 80052fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	22ff      	movs	r2, #255	@ 0xff
 8005302:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005306:	f001 f8c1 	bl	800648c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800530a:	f001 f88d 	bl	8006428 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005314:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005316:	e011      	b.n	800533c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d012      	beq.n	8005346 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	3310      	adds	r3, #16
 8005324:	4618      	mov	r0, r3
 8005326:	f000 fc81 	bl	8005c2c <xTaskRemoveFromEventList>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d001      	beq.n	8005334 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005330:	f000 fd5a 	bl	8005de8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005334:	7bbb      	ldrb	r3, [r7, #14]
 8005336:	3b01      	subs	r3, #1
 8005338:	b2db      	uxtb	r3, r3
 800533a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800533c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005340:	2b00      	cmp	r3, #0
 8005342:	dce9      	bgt.n	8005318 <prvUnlockQueue+0x60>
 8005344:	e000      	b.n	8005348 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005346:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	22ff      	movs	r2, #255	@ 0xff
 800534c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005350:	f001 f89c 	bl	800648c <vPortExitCritical>
}
 8005354:	bf00      	nop
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005364:	f001 f860 	bl	8006428 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800536c:	2b00      	cmp	r3, #0
 800536e:	d102      	bne.n	8005376 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005370:	2301      	movs	r3, #1
 8005372:	60fb      	str	r3, [r7, #12]
 8005374:	e001      	b.n	800537a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005376:	2300      	movs	r3, #0
 8005378:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800537a:	f001 f887 	bl	800648c <vPortExitCritical>

	return xReturn;
 800537e:	68fb      	ldr	r3, [r7, #12]
}
 8005380:	4618      	mov	r0, r3
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005390:	f001 f84a 	bl	8006428 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800539c:	429a      	cmp	r2, r3
 800539e:	d102      	bne.n	80053a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80053a0:	2301      	movs	r3, #1
 80053a2:	60fb      	str	r3, [r7, #12]
 80053a4:	e001      	b.n	80053aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80053a6:	2300      	movs	r3, #0
 80053a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80053aa:	f001 f86f 	bl	800648c <vPortExitCritical>

	return xReturn;
 80053ae:	68fb      	ldr	r3, [r7, #12]
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b08e      	sub	sp, #56	@ 0x38
 80053bc:	af04      	add	r7, sp, #16
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
 80053c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80053c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d10b      	bne.n	80053e4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80053cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d0:	f383 8811 	msr	BASEPRI, r3
 80053d4:	f3bf 8f6f 	isb	sy
 80053d8:	f3bf 8f4f 	dsb	sy
 80053dc:	623b      	str	r3, [r7, #32]
}
 80053de:	bf00      	nop
 80053e0:	bf00      	nop
 80053e2:	e7fd      	b.n	80053e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80053e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10b      	bne.n	8005402 <xTaskCreateStatic+0x4a>
	__asm volatile
 80053ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ee:	f383 8811 	msr	BASEPRI, r3
 80053f2:	f3bf 8f6f 	isb	sy
 80053f6:	f3bf 8f4f 	dsb	sy
 80053fa:	61fb      	str	r3, [r7, #28]
}
 80053fc:	bf00      	nop
 80053fe:	bf00      	nop
 8005400:	e7fd      	b.n	80053fe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005402:	2354      	movs	r3, #84	@ 0x54
 8005404:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	2b54      	cmp	r3, #84	@ 0x54
 800540a:	d00b      	beq.n	8005424 <xTaskCreateStatic+0x6c>
	__asm volatile
 800540c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005410:	f383 8811 	msr	BASEPRI, r3
 8005414:	f3bf 8f6f 	isb	sy
 8005418:	f3bf 8f4f 	dsb	sy
 800541c:	61bb      	str	r3, [r7, #24]
}
 800541e:	bf00      	nop
 8005420:	bf00      	nop
 8005422:	e7fd      	b.n	8005420 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005424:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005428:	2b00      	cmp	r3, #0
 800542a:	d01e      	beq.n	800546a <xTaskCreateStatic+0xb2>
 800542c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800542e:	2b00      	cmp	r3, #0
 8005430:	d01b      	beq.n	800546a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005434:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005438:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800543a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800543c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543e:	2202      	movs	r2, #2
 8005440:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005444:	2300      	movs	r3, #0
 8005446:	9303      	str	r3, [sp, #12]
 8005448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544a:	9302      	str	r3, [sp, #8]
 800544c:	f107 0314 	add.w	r3, r7, #20
 8005450:	9301      	str	r3, [sp, #4]
 8005452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	68b9      	ldr	r1, [r7, #8]
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f000 f850 	bl	8005502 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005462:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005464:	f000 f8d6 	bl	8005614 <prvAddNewTaskToReadyList>
 8005468:	e001      	b.n	800546e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800546a:	2300      	movs	r3, #0
 800546c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800546e:	697b      	ldr	r3, [r7, #20]
	}
 8005470:	4618      	mov	r0, r3
 8005472:	3728      	adds	r7, #40	@ 0x28
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005478:	b580      	push	{r7, lr}
 800547a:	b08c      	sub	sp, #48	@ 0x30
 800547c:	af04      	add	r7, sp, #16
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	603b      	str	r3, [r7, #0]
 8005484:	4613      	mov	r3, r2
 8005486:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005488:	88fb      	ldrh	r3, [r7, #6]
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	4618      	mov	r0, r3
 800548e:	f001 f8ed 	bl	800666c <pvPortMalloc>
 8005492:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00e      	beq.n	80054b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800549a:	2054      	movs	r0, #84	@ 0x54
 800549c:	f001 f8e6 	bl	800666c <pvPortMalloc>
 80054a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d003      	beq.n	80054b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80054ae:	e005      	b.n	80054bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80054b0:	6978      	ldr	r0, [r7, #20]
 80054b2:	f001 f9a9 	bl	8006808 <vPortFree>
 80054b6:	e001      	b.n	80054bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80054b8:	2300      	movs	r3, #0
 80054ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d017      	beq.n	80054f2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80054ca:	88fa      	ldrh	r2, [r7, #6]
 80054cc:	2300      	movs	r3, #0
 80054ce:	9303      	str	r3, [sp, #12]
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	9302      	str	r3, [sp, #8]
 80054d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054d6:	9301      	str	r3, [sp, #4]
 80054d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054da:	9300      	str	r3, [sp, #0]
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	68b9      	ldr	r1, [r7, #8]
 80054e0:	68f8      	ldr	r0, [r7, #12]
 80054e2:	f000 f80e 	bl	8005502 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054e6:	69f8      	ldr	r0, [r7, #28]
 80054e8:	f000 f894 	bl	8005614 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80054ec:	2301      	movs	r3, #1
 80054ee:	61bb      	str	r3, [r7, #24]
 80054f0:	e002      	b.n	80054f8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80054f2:	f04f 33ff 	mov.w	r3, #4294967295
 80054f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80054f8:	69bb      	ldr	r3, [r7, #24]
	}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3720      	adds	r7, #32
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005502:	b580      	push	{r7, lr}
 8005504:	b088      	sub	sp, #32
 8005506:	af00      	add	r7, sp, #0
 8005508:	60f8      	str	r0, [r7, #12]
 800550a:	60b9      	str	r1, [r7, #8]
 800550c:	607a      	str	r2, [r7, #4]
 800550e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005512:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800551a:	3b01      	subs	r3, #1
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	4413      	add	r3, r2
 8005520:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	f023 0307 	bic.w	r3, r3, #7
 8005528:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	f003 0307 	and.w	r3, r3, #7
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00b      	beq.n	800554c <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005538:	f383 8811 	msr	BASEPRI, r3
 800553c:	f3bf 8f6f 	isb	sy
 8005540:	f3bf 8f4f 	dsb	sy
 8005544:	617b      	str	r3, [r7, #20]
}
 8005546:	bf00      	nop
 8005548:	bf00      	nop
 800554a:	e7fd      	b.n	8005548 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d01f      	beq.n	8005592 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005552:	2300      	movs	r3, #0
 8005554:	61fb      	str	r3, [r7, #28]
 8005556:	e012      	b.n	800557e <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	4413      	add	r3, r2
 800555e:	7819      	ldrb	r1, [r3, #0]
 8005560:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	4413      	add	r3, r2
 8005566:	3334      	adds	r3, #52	@ 0x34
 8005568:	460a      	mov	r2, r1
 800556a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	4413      	add	r3, r2
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d006      	beq.n	8005586 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	3301      	adds	r3, #1
 800557c:	61fb      	str	r3, [r7, #28]
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	2b0f      	cmp	r3, #15
 8005582:	d9e9      	bls.n	8005558 <prvInitialiseNewTask+0x56>
 8005584:	e000      	b.n	8005588 <prvInitialiseNewTask+0x86>
			{
				break;
 8005586:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800558a:	2200      	movs	r2, #0
 800558c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005590:	e003      	b.n	800559a <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005594:	2200      	movs	r2, #0
 8005596:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800559a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800559c:	2b06      	cmp	r3, #6
 800559e:	d901      	bls.n	80055a4 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80055a0:	2306      	movs	r3, #6
 80055a2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80055a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055a8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80055aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055ae:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80055b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b2:	2200      	movs	r2, #0
 80055b4:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80055b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b8:	3304      	adds	r3, #4
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7ff f912 	bl	80047e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80055c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c2:	3318      	adds	r3, #24
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7ff f90d 	bl	80047e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80055ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055d2:	f1c3 0207 	rsb	r2, r3, #7
 80055d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80055da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055de:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80055e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e2:	2200      	movs	r2, #0
 80055e4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80055e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	68f9      	ldr	r1, [r7, #12]
 80055f2:	69b8      	ldr	r0, [r7, #24]
 80055f4:	f000 fde6 	bl	80061c4 <pxPortInitialiseStack>
 80055f8:	4602      	mov	r2, r0
 80055fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055fc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80055fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005600:	2b00      	cmp	r3, #0
 8005602:	d002      	beq.n	800560a <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005606:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005608:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800560a:	bf00      	nop
 800560c:	3720      	adds	r7, #32
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
	...

08005614 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800561c:	f000 ff04 	bl	8006428 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005620:	4b2a      	ldr	r3, [pc, #168]	@ (80056cc <prvAddNewTaskToReadyList+0xb8>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	3301      	adds	r3, #1
 8005626:	4a29      	ldr	r2, [pc, #164]	@ (80056cc <prvAddNewTaskToReadyList+0xb8>)
 8005628:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800562a:	4b29      	ldr	r3, [pc, #164]	@ (80056d0 <prvAddNewTaskToReadyList+0xbc>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d109      	bne.n	8005646 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005632:	4a27      	ldr	r2, [pc, #156]	@ (80056d0 <prvAddNewTaskToReadyList+0xbc>)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005638:	4b24      	ldr	r3, [pc, #144]	@ (80056cc <prvAddNewTaskToReadyList+0xb8>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d110      	bne.n	8005662 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005640:	f000 fbf6 	bl	8005e30 <prvInitialiseTaskLists>
 8005644:	e00d      	b.n	8005662 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005646:	4b23      	ldr	r3, [pc, #140]	@ (80056d4 <prvAddNewTaskToReadyList+0xc0>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d109      	bne.n	8005662 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800564e:	4b20      	ldr	r3, [pc, #128]	@ (80056d0 <prvAddNewTaskToReadyList+0xbc>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005658:	429a      	cmp	r2, r3
 800565a:	d802      	bhi.n	8005662 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800565c:	4a1c      	ldr	r2, [pc, #112]	@ (80056d0 <prvAddNewTaskToReadyList+0xbc>)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005662:	4b1d      	ldr	r3, [pc, #116]	@ (80056d8 <prvAddNewTaskToReadyList+0xc4>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	3301      	adds	r3, #1
 8005668:	4a1b      	ldr	r2, [pc, #108]	@ (80056d8 <prvAddNewTaskToReadyList+0xc4>)
 800566a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005670:	2201      	movs	r2, #1
 8005672:	409a      	lsls	r2, r3
 8005674:	4b19      	ldr	r3, [pc, #100]	@ (80056dc <prvAddNewTaskToReadyList+0xc8>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4313      	orrs	r3, r2
 800567a:	4a18      	ldr	r2, [pc, #96]	@ (80056dc <prvAddNewTaskToReadyList+0xc8>)
 800567c:	6013      	str	r3, [r2, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005682:	4613      	mov	r3, r2
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	4413      	add	r3, r2
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	4a15      	ldr	r2, [pc, #84]	@ (80056e0 <prvAddNewTaskToReadyList+0xcc>)
 800568c:	441a      	add	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	3304      	adds	r3, #4
 8005692:	4619      	mov	r1, r3
 8005694:	4610      	mov	r0, r2
 8005696:	f7ff f8b2 	bl	80047fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800569a:	f000 fef7 	bl	800648c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800569e:	4b0d      	ldr	r3, [pc, #52]	@ (80056d4 <prvAddNewTaskToReadyList+0xc0>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00e      	beq.n	80056c4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80056a6:	4b0a      	ldr	r3, [pc, #40]	@ (80056d0 <prvAddNewTaskToReadyList+0xbc>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d207      	bcs.n	80056c4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80056b4:	4b0b      	ldr	r3, [pc, #44]	@ (80056e4 <prvAddNewTaskToReadyList+0xd0>)
 80056b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056ba:	601a      	str	r2, [r3, #0]
 80056bc:	f3bf 8f4f 	dsb	sy
 80056c0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056c4:	bf00      	nop
 80056c6:	3708      	adds	r7, #8
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	20000518 	.word	0x20000518
 80056d0:	20000418 	.word	0x20000418
 80056d4:	20000524 	.word	0x20000524
 80056d8:	20000534 	.word	0x20000534
 80056dc:	20000520 	.word	0x20000520
 80056e0:	2000041c 	.word	0x2000041c
 80056e4:	e000ed04 	.word	0xe000ed04

080056e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80056f0:	2300      	movs	r3, #0
 80056f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d018      	beq.n	800572c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80056fa:	4b14      	ldr	r3, [pc, #80]	@ (800574c <vTaskDelay+0x64>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00b      	beq.n	800571a <vTaskDelay+0x32>
	__asm volatile
 8005702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005706:	f383 8811 	msr	BASEPRI, r3
 800570a:	f3bf 8f6f 	isb	sy
 800570e:	f3bf 8f4f 	dsb	sy
 8005712:	60bb      	str	r3, [r7, #8]
}
 8005714:	bf00      	nop
 8005716:	bf00      	nop
 8005718:	e7fd      	b.n	8005716 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800571a:	f000 f87d 	bl	8005818 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800571e:	2100      	movs	r1, #0
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 fce9 	bl	80060f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005726:	f000 f885 	bl	8005834 <xTaskResumeAll>
 800572a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d107      	bne.n	8005742 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005732:	4b07      	ldr	r3, [pc, #28]	@ (8005750 <vTaskDelay+0x68>)
 8005734:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005738:	601a      	str	r2, [r3, #0]
 800573a:	f3bf 8f4f 	dsb	sy
 800573e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005742:	bf00      	nop
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	20000540 	.word	0x20000540
 8005750:	e000ed04 	.word	0xe000ed04

08005754 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b08a      	sub	sp, #40	@ 0x28
 8005758:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800575a:	2300      	movs	r3, #0
 800575c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800575e:	2300      	movs	r3, #0
 8005760:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005762:	463a      	mov	r2, r7
 8005764:	1d39      	adds	r1, r7, #4
 8005766:	f107 0308 	add.w	r3, r7, #8
 800576a:	4618      	mov	r0, r3
 800576c:	f7fa ff00 	bl	8000570 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005770:	6839      	ldr	r1, [r7, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	68ba      	ldr	r2, [r7, #8]
 8005776:	9202      	str	r2, [sp, #8]
 8005778:	9301      	str	r3, [sp, #4]
 800577a:	2300      	movs	r3, #0
 800577c:	9300      	str	r3, [sp, #0]
 800577e:	2300      	movs	r3, #0
 8005780:	460a      	mov	r2, r1
 8005782:	491f      	ldr	r1, [pc, #124]	@ (8005800 <vTaskStartScheduler+0xac>)
 8005784:	481f      	ldr	r0, [pc, #124]	@ (8005804 <vTaskStartScheduler+0xb0>)
 8005786:	f7ff fe17 	bl	80053b8 <xTaskCreateStatic>
 800578a:	4603      	mov	r3, r0
 800578c:	4a1e      	ldr	r2, [pc, #120]	@ (8005808 <vTaskStartScheduler+0xb4>)
 800578e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005790:	4b1d      	ldr	r3, [pc, #116]	@ (8005808 <vTaskStartScheduler+0xb4>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d002      	beq.n	800579e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005798:	2301      	movs	r3, #1
 800579a:	617b      	str	r3, [r7, #20]
 800579c:	e001      	b.n	80057a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800579e:	2300      	movs	r3, #0
 80057a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d116      	bne.n	80057d6 <vTaskStartScheduler+0x82>
	__asm volatile
 80057a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ac:	f383 8811 	msr	BASEPRI, r3
 80057b0:	f3bf 8f6f 	isb	sy
 80057b4:	f3bf 8f4f 	dsb	sy
 80057b8:	613b      	str	r3, [r7, #16]
}
 80057ba:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80057bc:	4b13      	ldr	r3, [pc, #76]	@ (800580c <vTaskStartScheduler+0xb8>)
 80057be:	f04f 32ff 	mov.w	r2, #4294967295
 80057c2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80057c4:	4b12      	ldr	r3, [pc, #72]	@ (8005810 <vTaskStartScheduler+0xbc>)
 80057c6:	2201      	movs	r2, #1
 80057c8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80057ca:	4b12      	ldr	r3, [pc, #72]	@ (8005814 <vTaskStartScheduler+0xc0>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80057d0:	f000 fd86 	bl	80062e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80057d4:	e00f      	b.n	80057f6 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057dc:	d10b      	bne.n	80057f6 <vTaskStartScheduler+0xa2>
	__asm volatile
 80057de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057e2:	f383 8811 	msr	BASEPRI, r3
 80057e6:	f3bf 8f6f 	isb	sy
 80057ea:	f3bf 8f4f 	dsb	sy
 80057ee:	60fb      	str	r3, [r7, #12]
}
 80057f0:	bf00      	nop
 80057f2:	bf00      	nop
 80057f4:	e7fd      	b.n	80057f2 <vTaskStartScheduler+0x9e>
}
 80057f6:	bf00      	nop
 80057f8:	3718      	adds	r7, #24
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	08007520 	.word	0x08007520
 8005804:	08005e01 	.word	0x08005e01
 8005808:	2000053c 	.word	0x2000053c
 800580c:	20000538 	.word	0x20000538
 8005810:	20000524 	.word	0x20000524
 8005814:	2000051c 	.word	0x2000051c

08005818 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005818:	b480      	push	{r7}
 800581a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800581c:	4b04      	ldr	r3, [pc, #16]	@ (8005830 <vTaskSuspendAll+0x18>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	3301      	adds	r3, #1
 8005822:	4a03      	ldr	r2, [pc, #12]	@ (8005830 <vTaskSuspendAll+0x18>)
 8005824:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005826:	bf00      	nop
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr
 8005830:	20000540 	.word	0x20000540

08005834 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800583a:	2300      	movs	r3, #0
 800583c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800583e:	2300      	movs	r3, #0
 8005840:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005842:	4b42      	ldr	r3, [pc, #264]	@ (800594c <xTaskResumeAll+0x118>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10b      	bne.n	8005862 <xTaskResumeAll+0x2e>
	__asm volatile
 800584a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800584e:	f383 8811 	msr	BASEPRI, r3
 8005852:	f3bf 8f6f 	isb	sy
 8005856:	f3bf 8f4f 	dsb	sy
 800585a:	603b      	str	r3, [r7, #0]
}
 800585c:	bf00      	nop
 800585e:	bf00      	nop
 8005860:	e7fd      	b.n	800585e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005862:	f000 fde1 	bl	8006428 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005866:	4b39      	ldr	r3, [pc, #228]	@ (800594c <xTaskResumeAll+0x118>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	3b01      	subs	r3, #1
 800586c:	4a37      	ldr	r2, [pc, #220]	@ (800594c <xTaskResumeAll+0x118>)
 800586e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005870:	4b36      	ldr	r3, [pc, #216]	@ (800594c <xTaskResumeAll+0x118>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d161      	bne.n	800593c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005878:	4b35      	ldr	r3, [pc, #212]	@ (8005950 <xTaskResumeAll+0x11c>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d05d      	beq.n	800593c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005880:	e02e      	b.n	80058e0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005882:	4b34      	ldr	r3, [pc, #208]	@ (8005954 <xTaskResumeAll+0x120>)
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	3318      	adds	r3, #24
 800588e:	4618      	mov	r0, r3
 8005890:	f7ff f812 	bl	80048b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	3304      	adds	r3, #4
 8005898:	4618      	mov	r0, r3
 800589a:	f7ff f80d 	bl	80048b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a2:	2201      	movs	r2, #1
 80058a4:	409a      	lsls	r2, r3
 80058a6:	4b2c      	ldr	r3, [pc, #176]	@ (8005958 <xTaskResumeAll+0x124>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	4a2a      	ldr	r2, [pc, #168]	@ (8005958 <xTaskResumeAll+0x124>)
 80058ae:	6013      	str	r3, [r2, #0]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058b4:	4613      	mov	r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4413      	add	r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	4a27      	ldr	r2, [pc, #156]	@ (800595c <xTaskResumeAll+0x128>)
 80058be:	441a      	add	r2, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	3304      	adds	r3, #4
 80058c4:	4619      	mov	r1, r3
 80058c6:	4610      	mov	r0, r2
 80058c8:	f7fe ff99 	bl	80047fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058d0:	4b23      	ldr	r3, [pc, #140]	@ (8005960 <xTaskResumeAll+0x12c>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d302      	bcc.n	80058e0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80058da:	4b22      	ldr	r3, [pc, #136]	@ (8005964 <xTaskResumeAll+0x130>)
 80058dc:	2201      	movs	r2, #1
 80058de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058e0:	4b1c      	ldr	r3, [pc, #112]	@ (8005954 <xTaskResumeAll+0x120>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1cc      	bne.n	8005882 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d001      	beq.n	80058f2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80058ee:	f000 fb3d 	bl	8005f6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80058f2:	4b1d      	ldr	r3, [pc, #116]	@ (8005968 <xTaskResumeAll+0x134>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d010      	beq.n	8005920 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80058fe:	f000 f859 	bl	80059b4 <xTaskIncrementTick>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d002      	beq.n	800590e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005908:	4b16      	ldr	r3, [pc, #88]	@ (8005964 <xTaskResumeAll+0x130>)
 800590a:	2201      	movs	r2, #1
 800590c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	3b01      	subs	r3, #1
 8005912:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1f1      	bne.n	80058fe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800591a:	4b13      	ldr	r3, [pc, #76]	@ (8005968 <xTaskResumeAll+0x134>)
 800591c:	2200      	movs	r2, #0
 800591e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005920:	4b10      	ldr	r3, [pc, #64]	@ (8005964 <xTaskResumeAll+0x130>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d009      	beq.n	800593c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005928:	2301      	movs	r3, #1
 800592a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800592c:	4b0f      	ldr	r3, [pc, #60]	@ (800596c <xTaskResumeAll+0x138>)
 800592e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005932:	601a      	str	r2, [r3, #0]
 8005934:	f3bf 8f4f 	dsb	sy
 8005938:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800593c:	f000 fda6 	bl	800648c <vPortExitCritical>

	return xAlreadyYielded;
 8005940:	68bb      	ldr	r3, [r7, #8]
}
 8005942:	4618      	mov	r0, r3
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	20000540 	.word	0x20000540
 8005950:	20000518 	.word	0x20000518
 8005954:	200004d8 	.word	0x200004d8
 8005958:	20000520 	.word	0x20000520
 800595c:	2000041c 	.word	0x2000041c
 8005960:	20000418 	.word	0x20000418
 8005964:	2000052c 	.word	0x2000052c
 8005968:	20000528 	.word	0x20000528
 800596c:	e000ed04 	.word	0xe000ed04

08005970 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005976:	4b05      	ldr	r3, [pc, #20]	@ (800598c <xTaskGetTickCount+0x1c>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800597c:	687b      	ldr	r3, [r7, #4]
}
 800597e:	4618      	mov	r0, r3
 8005980:	370c      	adds	r7, #12
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	2000051c 	.word	0x2000051c

08005990 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005996:	f000 fe27 	bl	80065e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800599a:	2300      	movs	r3, #0
 800599c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800599e:	4b04      	ldr	r3, [pc, #16]	@ (80059b0 <xTaskGetTickCountFromISR+0x20>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80059a4:	683b      	ldr	r3, [r7, #0]
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	2000051c 	.word	0x2000051c

080059b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b086      	sub	sp, #24
 80059b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80059ba:	2300      	movs	r3, #0
 80059bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059be:	4b4f      	ldr	r3, [pc, #316]	@ (8005afc <xTaskIncrementTick+0x148>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f040 808f 	bne.w	8005ae6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80059c8:	4b4d      	ldr	r3, [pc, #308]	@ (8005b00 <xTaskIncrementTick+0x14c>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	3301      	adds	r3, #1
 80059ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80059d0:	4a4b      	ldr	r2, [pc, #300]	@ (8005b00 <xTaskIncrementTick+0x14c>)
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d121      	bne.n	8005a20 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80059dc:	4b49      	ldr	r3, [pc, #292]	@ (8005b04 <xTaskIncrementTick+0x150>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00b      	beq.n	80059fe <xTaskIncrementTick+0x4a>
	__asm volatile
 80059e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ea:	f383 8811 	msr	BASEPRI, r3
 80059ee:	f3bf 8f6f 	isb	sy
 80059f2:	f3bf 8f4f 	dsb	sy
 80059f6:	603b      	str	r3, [r7, #0]
}
 80059f8:	bf00      	nop
 80059fa:	bf00      	nop
 80059fc:	e7fd      	b.n	80059fa <xTaskIncrementTick+0x46>
 80059fe:	4b41      	ldr	r3, [pc, #260]	@ (8005b04 <xTaskIncrementTick+0x150>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	60fb      	str	r3, [r7, #12]
 8005a04:	4b40      	ldr	r3, [pc, #256]	@ (8005b08 <xTaskIncrementTick+0x154>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a3e      	ldr	r2, [pc, #248]	@ (8005b04 <xTaskIncrementTick+0x150>)
 8005a0a:	6013      	str	r3, [r2, #0]
 8005a0c:	4a3e      	ldr	r2, [pc, #248]	@ (8005b08 <xTaskIncrementTick+0x154>)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6013      	str	r3, [r2, #0]
 8005a12:	4b3e      	ldr	r3, [pc, #248]	@ (8005b0c <xTaskIncrementTick+0x158>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	3301      	adds	r3, #1
 8005a18:	4a3c      	ldr	r2, [pc, #240]	@ (8005b0c <xTaskIncrementTick+0x158>)
 8005a1a:	6013      	str	r3, [r2, #0]
 8005a1c:	f000 faa6 	bl	8005f6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005a20:	4b3b      	ldr	r3, [pc, #236]	@ (8005b10 <xTaskIncrementTick+0x15c>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	693a      	ldr	r2, [r7, #16]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d348      	bcc.n	8005abc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a2a:	4b36      	ldr	r3, [pc, #216]	@ (8005b04 <xTaskIncrementTick+0x150>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d104      	bne.n	8005a3e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a34:	4b36      	ldr	r3, [pc, #216]	@ (8005b10 <xTaskIncrementTick+0x15c>)
 8005a36:	f04f 32ff 	mov.w	r2, #4294967295
 8005a3a:	601a      	str	r2, [r3, #0]
					break;
 8005a3c:	e03e      	b.n	8005abc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a3e:	4b31      	ldr	r3, [pc, #196]	@ (8005b04 <xTaskIncrementTick+0x150>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d203      	bcs.n	8005a5e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a56:	4a2e      	ldr	r2, [pc, #184]	@ (8005b10 <xTaskIncrementTick+0x15c>)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a5c:	e02e      	b.n	8005abc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	3304      	adds	r3, #4
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7fe ff28 	bl	80048b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d004      	beq.n	8005a7a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	3318      	adds	r3, #24
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7fe ff1f 	bl	80048b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a7e:	2201      	movs	r2, #1
 8005a80:	409a      	lsls	r2, r3
 8005a82:	4b24      	ldr	r3, [pc, #144]	@ (8005b14 <xTaskIncrementTick+0x160>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	4a22      	ldr	r2, [pc, #136]	@ (8005b14 <xTaskIncrementTick+0x160>)
 8005a8a:	6013      	str	r3, [r2, #0]
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a90:	4613      	mov	r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4413      	add	r3, r2
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4a1f      	ldr	r2, [pc, #124]	@ (8005b18 <xTaskIncrementTick+0x164>)
 8005a9a:	441a      	add	r2, r3
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	3304      	adds	r3, #4
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	4610      	mov	r0, r2
 8005aa4:	f7fe feab 	bl	80047fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aac:	4b1b      	ldr	r3, [pc, #108]	@ (8005b1c <xTaskIncrementTick+0x168>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d3b9      	bcc.n	8005a2a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005aba:	e7b6      	b.n	8005a2a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005abc:	4b17      	ldr	r3, [pc, #92]	@ (8005b1c <xTaskIncrementTick+0x168>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ac2:	4915      	ldr	r1, [pc, #84]	@ (8005b18 <xTaskIncrementTick+0x164>)
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	4413      	add	r3, r2
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	440b      	add	r3, r1
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d901      	bls.n	8005ad8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005ad8:	4b11      	ldr	r3, [pc, #68]	@ (8005b20 <xTaskIncrementTick+0x16c>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d007      	beq.n	8005af0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	617b      	str	r3, [r7, #20]
 8005ae4:	e004      	b.n	8005af0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8005b24 <xTaskIncrementTick+0x170>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	3301      	adds	r3, #1
 8005aec:	4a0d      	ldr	r2, [pc, #52]	@ (8005b24 <xTaskIncrementTick+0x170>)
 8005aee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005af0:	697b      	ldr	r3, [r7, #20]
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3718      	adds	r7, #24
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	20000540 	.word	0x20000540
 8005b00:	2000051c 	.word	0x2000051c
 8005b04:	200004d0 	.word	0x200004d0
 8005b08:	200004d4 	.word	0x200004d4
 8005b0c:	20000530 	.word	0x20000530
 8005b10:	20000538 	.word	0x20000538
 8005b14:	20000520 	.word	0x20000520
 8005b18:	2000041c 	.word	0x2000041c
 8005b1c:	20000418 	.word	0x20000418
 8005b20:	2000052c 	.word	0x2000052c
 8005b24:	20000528 	.word	0x20000528

08005b28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b087      	sub	sp, #28
 8005b2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b2e:	4b27      	ldr	r3, [pc, #156]	@ (8005bcc <vTaskSwitchContext+0xa4>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d003      	beq.n	8005b3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005b36:	4b26      	ldr	r3, [pc, #152]	@ (8005bd0 <vTaskSwitchContext+0xa8>)
 8005b38:	2201      	movs	r2, #1
 8005b3a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005b3c:	e040      	b.n	8005bc0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005b3e:	4b24      	ldr	r3, [pc, #144]	@ (8005bd0 <vTaskSwitchContext+0xa8>)
 8005b40:	2200      	movs	r2, #0
 8005b42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b44:	4b23      	ldr	r3, [pc, #140]	@ (8005bd4 <vTaskSwitchContext+0xac>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	fab3 f383 	clz	r3, r3
 8005b50:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005b52:	7afb      	ldrb	r3, [r7, #11]
 8005b54:	f1c3 031f 	rsb	r3, r3, #31
 8005b58:	617b      	str	r3, [r7, #20]
 8005b5a:	491f      	ldr	r1, [pc, #124]	@ (8005bd8 <vTaskSwitchContext+0xb0>)
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	4413      	add	r3, r2
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	440b      	add	r3, r1
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d10b      	bne.n	8005b86 <vTaskSwitchContext+0x5e>
	__asm volatile
 8005b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b72:	f383 8811 	msr	BASEPRI, r3
 8005b76:	f3bf 8f6f 	isb	sy
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	607b      	str	r3, [r7, #4]
}
 8005b80:	bf00      	nop
 8005b82:	bf00      	nop
 8005b84:	e7fd      	b.n	8005b82 <vTaskSwitchContext+0x5a>
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	4613      	mov	r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4413      	add	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4a11      	ldr	r2, [pc, #68]	@ (8005bd8 <vTaskSwitchContext+0xb0>)
 8005b92:	4413      	add	r3, r2
 8005b94:	613b      	str	r3, [r7, #16]
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	685a      	ldr	r2, [r3, #4]
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	605a      	str	r2, [r3, #4]
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	685a      	ldr	r2, [r3, #4]
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	3308      	adds	r3, #8
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d104      	bne.n	8005bb6 <vTaskSwitchContext+0x8e>
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	685a      	ldr	r2, [r3, #4]
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	605a      	str	r2, [r3, #4]
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	4a07      	ldr	r2, [pc, #28]	@ (8005bdc <vTaskSwitchContext+0xb4>)
 8005bbe:	6013      	str	r3, [r2, #0]
}
 8005bc0:	bf00      	nop
 8005bc2:	371c      	adds	r7, #28
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	20000540 	.word	0x20000540
 8005bd0:	2000052c 	.word	0x2000052c
 8005bd4:	20000520 	.word	0x20000520
 8005bd8:	2000041c 	.word	0x2000041c
 8005bdc:	20000418 	.word	0x20000418

08005be0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10b      	bne.n	8005c08 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf4:	f383 8811 	msr	BASEPRI, r3
 8005bf8:	f3bf 8f6f 	isb	sy
 8005bfc:	f3bf 8f4f 	dsb	sy
 8005c00:	60fb      	str	r3, [r7, #12]
}
 8005c02:	bf00      	nop
 8005c04:	bf00      	nop
 8005c06:	e7fd      	b.n	8005c04 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c08:	4b07      	ldr	r3, [pc, #28]	@ (8005c28 <vTaskPlaceOnEventList+0x48>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	3318      	adds	r3, #24
 8005c0e:	4619      	mov	r1, r3
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f7fe fe18 	bl	8004846 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c16:	2101      	movs	r1, #1
 8005c18:	6838      	ldr	r0, [r7, #0]
 8005c1a:	f000 fa6d 	bl	80060f8 <prvAddCurrentTaskToDelayedList>
}
 8005c1e:	bf00      	nop
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	20000418 	.word	0x20000418

08005c2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b086      	sub	sp, #24
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10b      	bne.n	8005c5a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c46:	f383 8811 	msr	BASEPRI, r3
 8005c4a:	f3bf 8f6f 	isb	sy
 8005c4e:	f3bf 8f4f 	dsb	sy
 8005c52:	60fb      	str	r3, [r7, #12]
}
 8005c54:	bf00      	nop
 8005c56:	bf00      	nop
 8005c58:	e7fd      	b.n	8005c56 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	3318      	adds	r3, #24
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7fe fe2a 	bl	80048b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c64:	4b1d      	ldr	r3, [pc, #116]	@ (8005cdc <xTaskRemoveFromEventList+0xb0>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d11c      	bne.n	8005ca6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	3304      	adds	r3, #4
 8005c70:	4618      	mov	r0, r3
 8005c72:	f7fe fe21 	bl	80048b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	409a      	lsls	r2, r3
 8005c7e:	4b18      	ldr	r3, [pc, #96]	@ (8005ce0 <xTaskRemoveFromEventList+0xb4>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	4a16      	ldr	r2, [pc, #88]	@ (8005ce0 <xTaskRemoveFromEventList+0xb4>)
 8005c86:	6013      	str	r3, [r2, #0]
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	4413      	add	r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	4a13      	ldr	r2, [pc, #76]	@ (8005ce4 <xTaskRemoveFromEventList+0xb8>)
 8005c96:	441a      	add	r2, r3
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	3304      	adds	r3, #4
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	4610      	mov	r0, r2
 8005ca0:	f7fe fdad 	bl	80047fe <vListInsertEnd>
 8005ca4:	e005      	b.n	8005cb2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	3318      	adds	r3, #24
 8005caa:	4619      	mov	r1, r3
 8005cac:	480e      	ldr	r0, [pc, #56]	@ (8005ce8 <xTaskRemoveFromEventList+0xbc>)
 8005cae:	f7fe fda6 	bl	80047fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8005cec <xTaskRemoveFromEventList+0xc0>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d905      	bls.n	8005ccc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8005cf0 <xTaskRemoveFromEventList+0xc4>)
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	601a      	str	r2, [r3, #0]
 8005cca:	e001      	b.n	8005cd0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005cd0:	697b      	ldr	r3, [r7, #20]
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3718      	adds	r7, #24
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	20000540 	.word	0x20000540
 8005ce0:	20000520 	.word	0x20000520
 8005ce4:	2000041c 	.word	0x2000041c
 8005ce8:	200004d8 	.word	0x200004d8
 8005cec:	20000418 	.word	0x20000418
 8005cf0:	2000052c 	.word	0x2000052c

08005cf4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005cfc:	4b06      	ldr	r3, [pc, #24]	@ (8005d18 <vTaskInternalSetTimeOutState+0x24>)
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d04:	4b05      	ldr	r3, [pc, #20]	@ (8005d1c <vTaskInternalSetTimeOutState+0x28>)
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	605a      	str	r2, [r3, #4]
}
 8005d0c:	bf00      	nop
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr
 8005d18:	20000530 	.word	0x20000530
 8005d1c:	2000051c 	.word	0x2000051c

08005d20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b088      	sub	sp, #32
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d10b      	bne.n	8005d48 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d34:	f383 8811 	msr	BASEPRI, r3
 8005d38:	f3bf 8f6f 	isb	sy
 8005d3c:	f3bf 8f4f 	dsb	sy
 8005d40:	613b      	str	r3, [r7, #16]
}
 8005d42:	bf00      	nop
 8005d44:	bf00      	nop
 8005d46:	e7fd      	b.n	8005d44 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10b      	bne.n	8005d66 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d52:	f383 8811 	msr	BASEPRI, r3
 8005d56:	f3bf 8f6f 	isb	sy
 8005d5a:	f3bf 8f4f 	dsb	sy
 8005d5e:	60fb      	str	r3, [r7, #12]
}
 8005d60:	bf00      	nop
 8005d62:	bf00      	nop
 8005d64:	e7fd      	b.n	8005d62 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005d66:	f000 fb5f 	bl	8006428 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005d6a:	4b1d      	ldr	r3, [pc, #116]	@ (8005de0 <xTaskCheckForTimeOut+0xc0>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	69ba      	ldr	r2, [r7, #24]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d82:	d102      	bne.n	8005d8a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005d84:	2300      	movs	r3, #0
 8005d86:	61fb      	str	r3, [r7, #28]
 8005d88:	e023      	b.n	8005dd2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	4b15      	ldr	r3, [pc, #84]	@ (8005de4 <xTaskCheckForTimeOut+0xc4>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d007      	beq.n	8005da6 <xTaskCheckForTimeOut+0x86>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	69ba      	ldr	r2, [r7, #24]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d302      	bcc.n	8005da6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005da0:	2301      	movs	r3, #1
 8005da2:	61fb      	str	r3, [r7, #28]
 8005da4:	e015      	b.n	8005dd2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d20b      	bcs.n	8005dc8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	1ad2      	subs	r2, r2, r3
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f7ff ff99 	bl	8005cf4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	61fb      	str	r3, [r7, #28]
 8005dc6:	e004      	b.n	8005dd2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005dd2:	f000 fb5b 	bl	800648c <vPortExitCritical>

	return xReturn;
 8005dd6:	69fb      	ldr	r3, [r7, #28]
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3720      	adds	r7, #32
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	2000051c 	.word	0x2000051c
 8005de4:	20000530 	.word	0x20000530

08005de8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005de8:	b480      	push	{r7}
 8005dea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005dec:	4b03      	ldr	r3, [pc, #12]	@ (8005dfc <vTaskMissedYield+0x14>)
 8005dee:	2201      	movs	r2, #1
 8005df0:	601a      	str	r2, [r3, #0]
}
 8005df2:	bf00      	nop
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr
 8005dfc:	2000052c 	.word	0x2000052c

08005e00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e08:	f000 f852 	bl	8005eb0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e0c:	4b06      	ldr	r3, [pc, #24]	@ (8005e28 <prvIdleTask+0x28>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d9f9      	bls.n	8005e08 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e14:	4b05      	ldr	r3, [pc, #20]	@ (8005e2c <prvIdleTask+0x2c>)
 8005e16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e1a:	601a      	str	r2, [r3, #0]
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005e24:	e7f0      	b.n	8005e08 <prvIdleTask+0x8>
 8005e26:	bf00      	nop
 8005e28:	2000041c 	.word	0x2000041c
 8005e2c:	e000ed04 	.word	0xe000ed04

08005e30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e36:	2300      	movs	r3, #0
 8005e38:	607b      	str	r3, [r7, #4]
 8005e3a:	e00c      	b.n	8005e56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	4413      	add	r3, r2
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	4a12      	ldr	r2, [pc, #72]	@ (8005e90 <prvInitialiseTaskLists+0x60>)
 8005e48:	4413      	add	r3, r2
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7fe fcaa 	bl	80047a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	3301      	adds	r3, #1
 8005e54:	607b      	str	r3, [r7, #4]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2b06      	cmp	r3, #6
 8005e5a:	d9ef      	bls.n	8005e3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005e5c:	480d      	ldr	r0, [pc, #52]	@ (8005e94 <prvInitialiseTaskLists+0x64>)
 8005e5e:	f7fe fca1 	bl	80047a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005e62:	480d      	ldr	r0, [pc, #52]	@ (8005e98 <prvInitialiseTaskLists+0x68>)
 8005e64:	f7fe fc9e 	bl	80047a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005e68:	480c      	ldr	r0, [pc, #48]	@ (8005e9c <prvInitialiseTaskLists+0x6c>)
 8005e6a:	f7fe fc9b 	bl	80047a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005e6e:	480c      	ldr	r0, [pc, #48]	@ (8005ea0 <prvInitialiseTaskLists+0x70>)
 8005e70:	f7fe fc98 	bl	80047a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005e74:	480b      	ldr	r0, [pc, #44]	@ (8005ea4 <prvInitialiseTaskLists+0x74>)
 8005e76:	f7fe fc95 	bl	80047a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8005ea8 <prvInitialiseTaskLists+0x78>)
 8005e7c:	4a05      	ldr	r2, [pc, #20]	@ (8005e94 <prvInitialiseTaskLists+0x64>)
 8005e7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005e80:	4b0a      	ldr	r3, [pc, #40]	@ (8005eac <prvInitialiseTaskLists+0x7c>)
 8005e82:	4a05      	ldr	r2, [pc, #20]	@ (8005e98 <prvInitialiseTaskLists+0x68>)
 8005e84:	601a      	str	r2, [r3, #0]
}
 8005e86:	bf00      	nop
 8005e88:	3708      	adds	r7, #8
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	2000041c 	.word	0x2000041c
 8005e94:	200004a8 	.word	0x200004a8
 8005e98:	200004bc 	.word	0x200004bc
 8005e9c:	200004d8 	.word	0x200004d8
 8005ea0:	200004ec 	.word	0x200004ec
 8005ea4:	20000504 	.word	0x20000504
 8005ea8:	200004d0 	.word	0x200004d0
 8005eac:	200004d4 	.word	0x200004d4

08005eb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005eb6:	e019      	b.n	8005eec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005eb8:	f000 fab6 	bl	8006428 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ebc:	4b10      	ldr	r3, [pc, #64]	@ (8005f00 <prvCheckTasksWaitingTermination+0x50>)
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	3304      	adds	r3, #4
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7fe fcf5 	bl	80048b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005ece:	4b0d      	ldr	r3, [pc, #52]	@ (8005f04 <prvCheckTasksWaitingTermination+0x54>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	4a0b      	ldr	r2, [pc, #44]	@ (8005f04 <prvCheckTasksWaitingTermination+0x54>)
 8005ed6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8005f08 <prvCheckTasksWaitingTermination+0x58>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	3b01      	subs	r3, #1
 8005ede:	4a0a      	ldr	r2, [pc, #40]	@ (8005f08 <prvCheckTasksWaitingTermination+0x58>)
 8005ee0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005ee2:	f000 fad3 	bl	800648c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f810 	bl	8005f0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005eec:	4b06      	ldr	r3, [pc, #24]	@ (8005f08 <prvCheckTasksWaitingTermination+0x58>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1e1      	bne.n	8005eb8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005ef4:	bf00      	nop
 8005ef6:	bf00      	nop
 8005ef8:	3708      	adds	r7, #8
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	200004ec 	.word	0x200004ec
 8005f04:	20000518 	.word	0x20000518
 8005f08:	20000500 	.word	0x20000500

08005f0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d108      	bne.n	8005f30 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f22:	4618      	mov	r0, r3
 8005f24:	f000 fc70 	bl	8006808 <vPortFree>
				vPortFree( pxTCB );
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 fc6d 	bl	8006808 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f2e:	e019      	b.n	8005f64 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d103      	bne.n	8005f42 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 fc64 	bl	8006808 <vPortFree>
	}
 8005f40:	e010      	b.n	8005f64 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d00b      	beq.n	8005f64 <prvDeleteTCB+0x58>
	__asm volatile
 8005f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f50:	f383 8811 	msr	BASEPRI, r3
 8005f54:	f3bf 8f6f 	isb	sy
 8005f58:	f3bf 8f4f 	dsb	sy
 8005f5c:	60fb      	str	r3, [r7, #12]
}
 8005f5e:	bf00      	nop
 8005f60:	bf00      	nop
 8005f62:	e7fd      	b.n	8005f60 <prvDeleteTCB+0x54>
	}
 8005f64:	bf00      	nop
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f72:	4b0c      	ldr	r3, [pc, #48]	@ (8005fa4 <prvResetNextTaskUnblockTime+0x38>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d104      	bne.n	8005f86 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8005fa8 <prvResetNextTaskUnblockTime+0x3c>)
 8005f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f82:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005f84:	e008      	b.n	8005f98 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f86:	4b07      	ldr	r3, [pc, #28]	@ (8005fa4 <prvResetNextTaskUnblockTime+0x38>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	4a04      	ldr	r2, [pc, #16]	@ (8005fa8 <prvResetNextTaskUnblockTime+0x3c>)
 8005f96:	6013      	str	r3, [r2, #0]
}
 8005f98:	bf00      	nop
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr
 8005fa4:	200004d0 	.word	0x200004d0
 8005fa8:	20000538 	.word	0x20000538

08005fac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8005fe0 <xTaskGetSchedulerState+0x34>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d102      	bne.n	8005fc0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	607b      	str	r3, [r7, #4]
 8005fbe:	e008      	b.n	8005fd2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fc0:	4b08      	ldr	r3, [pc, #32]	@ (8005fe4 <xTaskGetSchedulerState+0x38>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d102      	bne.n	8005fce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005fc8:	2302      	movs	r3, #2
 8005fca:	607b      	str	r3, [r7, #4]
 8005fcc:	e001      	b.n	8005fd2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005fd2:	687b      	ldr	r3, [r7, #4]
	}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr
 8005fe0:	20000524 	.word	0x20000524
 8005fe4:	20000540 	.word	0x20000540

08005fe8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d070      	beq.n	80060e0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005ffe:	4b3b      	ldr	r3, [pc, #236]	@ (80060ec <xTaskPriorityDisinherit+0x104>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	429a      	cmp	r2, r3
 8006006:	d00b      	beq.n	8006020 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800600c:	f383 8811 	msr	BASEPRI, r3
 8006010:	f3bf 8f6f 	isb	sy
 8006014:	f3bf 8f4f 	dsb	sy
 8006018:	60fb      	str	r3, [r7, #12]
}
 800601a:	bf00      	nop
 800601c:	bf00      	nop
 800601e:	e7fd      	b.n	800601c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10b      	bne.n	8006040 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800602c:	f383 8811 	msr	BASEPRI, r3
 8006030:	f3bf 8f6f 	isb	sy
 8006034:	f3bf 8f4f 	dsb	sy
 8006038:	60bb      	str	r3, [r7, #8]
}
 800603a:	bf00      	nop
 800603c:	bf00      	nop
 800603e:	e7fd      	b.n	800603c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006044:	1e5a      	subs	r2, r3, #1
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006052:	429a      	cmp	r2, r3
 8006054:	d044      	beq.n	80060e0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800605a:	2b00      	cmp	r3, #0
 800605c:	d140      	bne.n	80060e0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	3304      	adds	r3, #4
 8006062:	4618      	mov	r0, r3
 8006064:	f7fe fc28 	bl	80048b8 <uxListRemove>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d115      	bne.n	800609a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006072:	491f      	ldr	r1, [pc, #124]	@ (80060f0 <xTaskPriorityDisinherit+0x108>)
 8006074:	4613      	mov	r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4413      	add	r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	440b      	add	r3, r1
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d10a      	bne.n	800609a <xTaskPriorityDisinherit+0xb2>
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006088:	2201      	movs	r2, #1
 800608a:	fa02 f303 	lsl.w	r3, r2, r3
 800608e:	43da      	mvns	r2, r3
 8006090:	4b18      	ldr	r3, [pc, #96]	@ (80060f4 <xTaskPriorityDisinherit+0x10c>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4013      	ands	r3, r2
 8006096:	4a17      	ldr	r2, [pc, #92]	@ (80060f4 <xTaskPriorityDisinherit+0x10c>)
 8006098:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060a6:	f1c3 0207 	rsb	r2, r3, #7
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b2:	2201      	movs	r2, #1
 80060b4:	409a      	lsls	r2, r3
 80060b6:	4b0f      	ldr	r3, [pc, #60]	@ (80060f4 <xTaskPriorityDisinherit+0x10c>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	4a0d      	ldr	r2, [pc, #52]	@ (80060f4 <xTaskPriorityDisinherit+0x10c>)
 80060be:	6013      	str	r3, [r2, #0]
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060c4:	4613      	mov	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4413      	add	r3, r2
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	4a08      	ldr	r2, [pc, #32]	@ (80060f0 <xTaskPriorityDisinherit+0x108>)
 80060ce:	441a      	add	r2, r3
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	3304      	adds	r3, #4
 80060d4:	4619      	mov	r1, r3
 80060d6:	4610      	mov	r0, r2
 80060d8:	f7fe fb91 	bl	80047fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80060dc:	2301      	movs	r3, #1
 80060de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80060e0:	697b      	ldr	r3, [r7, #20]
	}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3718      	adds	r7, #24
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	20000418 	.word	0x20000418
 80060f0:	2000041c 	.word	0x2000041c
 80060f4:	20000520 	.word	0x20000520

080060f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006102:	4b29      	ldr	r3, [pc, #164]	@ (80061a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006108:	4b28      	ldr	r3, [pc, #160]	@ (80061ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	3304      	adds	r3, #4
 800610e:	4618      	mov	r0, r3
 8006110:	f7fe fbd2 	bl	80048b8 <uxListRemove>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10b      	bne.n	8006132 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800611a:	4b24      	ldr	r3, [pc, #144]	@ (80061ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006120:	2201      	movs	r2, #1
 8006122:	fa02 f303 	lsl.w	r3, r2, r3
 8006126:	43da      	mvns	r2, r3
 8006128:	4b21      	ldr	r3, [pc, #132]	@ (80061b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4013      	ands	r3, r2
 800612e:	4a20      	ldr	r2, [pc, #128]	@ (80061b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006130:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006138:	d10a      	bne.n	8006150 <prvAddCurrentTaskToDelayedList+0x58>
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d007      	beq.n	8006150 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006140:	4b1a      	ldr	r3, [pc, #104]	@ (80061ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	3304      	adds	r3, #4
 8006146:	4619      	mov	r1, r3
 8006148:	481a      	ldr	r0, [pc, #104]	@ (80061b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800614a:	f7fe fb58 	bl	80047fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800614e:	e026      	b.n	800619e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4413      	add	r3, r2
 8006156:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006158:	4b14      	ldr	r3, [pc, #80]	@ (80061ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68ba      	ldr	r2, [r7, #8]
 800615e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006160:	68ba      	ldr	r2, [r7, #8]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	429a      	cmp	r2, r3
 8006166:	d209      	bcs.n	800617c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006168:	4b13      	ldr	r3, [pc, #76]	@ (80061b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	4b0f      	ldr	r3, [pc, #60]	@ (80061ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	3304      	adds	r3, #4
 8006172:	4619      	mov	r1, r3
 8006174:	4610      	mov	r0, r2
 8006176:	f7fe fb66 	bl	8004846 <vListInsert>
}
 800617a:	e010      	b.n	800619e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800617c:	4b0f      	ldr	r3, [pc, #60]	@ (80061bc <prvAddCurrentTaskToDelayedList+0xc4>)
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	4b0a      	ldr	r3, [pc, #40]	@ (80061ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	3304      	adds	r3, #4
 8006186:	4619      	mov	r1, r3
 8006188:	4610      	mov	r0, r2
 800618a:	f7fe fb5c 	bl	8004846 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800618e:	4b0c      	ldr	r3, [pc, #48]	@ (80061c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68ba      	ldr	r2, [r7, #8]
 8006194:	429a      	cmp	r2, r3
 8006196:	d202      	bcs.n	800619e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006198:	4a09      	ldr	r2, [pc, #36]	@ (80061c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	6013      	str	r3, [r2, #0]
}
 800619e:	bf00      	nop
 80061a0:	3710      	adds	r7, #16
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	2000051c 	.word	0x2000051c
 80061ac:	20000418 	.word	0x20000418
 80061b0:	20000520 	.word	0x20000520
 80061b4:	20000504 	.word	0x20000504
 80061b8:	200004d4 	.word	0x200004d4
 80061bc:	200004d0 	.word	0x200004d0
 80061c0:	20000538 	.word	0x20000538

080061c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	3b04      	subs	r3, #4
 80061d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80061dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	3b04      	subs	r3, #4
 80061e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	f023 0201 	bic.w	r2, r3, #1
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	3b04      	subs	r3, #4
 80061f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80061f4:	4a0c      	ldr	r2, [pc, #48]	@ (8006228 <pxPortInitialiseStack+0x64>)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	3b14      	subs	r3, #20
 80061fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	3b04      	subs	r3, #4
 800620a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f06f 0202 	mvn.w	r2, #2
 8006212:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	3b20      	subs	r3, #32
 8006218:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800621a:	68fb      	ldr	r3, [r7, #12]
}
 800621c:	4618      	mov	r0, r3
 800621e:	3714      	adds	r7, #20
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr
 8006228:	0800622d 	.word	0x0800622d

0800622c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006232:	2300      	movs	r3, #0
 8006234:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006236:	4b13      	ldr	r3, [pc, #76]	@ (8006284 <prvTaskExitError+0x58>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800623e:	d00b      	beq.n	8006258 <prvTaskExitError+0x2c>
	__asm volatile
 8006240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006244:	f383 8811 	msr	BASEPRI, r3
 8006248:	f3bf 8f6f 	isb	sy
 800624c:	f3bf 8f4f 	dsb	sy
 8006250:	60fb      	str	r3, [r7, #12]
}
 8006252:	bf00      	nop
 8006254:	bf00      	nop
 8006256:	e7fd      	b.n	8006254 <prvTaskExitError+0x28>
	__asm volatile
 8006258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800625c:	f383 8811 	msr	BASEPRI, r3
 8006260:	f3bf 8f6f 	isb	sy
 8006264:	f3bf 8f4f 	dsb	sy
 8006268:	60bb      	str	r3, [r7, #8]
}
 800626a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800626c:	bf00      	nop
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d0fc      	beq.n	800626e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006274:	bf00      	nop
 8006276:	bf00      	nop
 8006278:	3714      	adds	r7, #20
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	2000000c 	.word	0x2000000c
	...

08006290 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006290:	4b07      	ldr	r3, [pc, #28]	@ (80062b0 <pxCurrentTCBConst2>)
 8006292:	6819      	ldr	r1, [r3, #0]
 8006294:	6808      	ldr	r0, [r1, #0]
 8006296:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800629a:	f380 8809 	msr	PSP, r0
 800629e:	f3bf 8f6f 	isb	sy
 80062a2:	f04f 0000 	mov.w	r0, #0
 80062a6:	f380 8811 	msr	BASEPRI, r0
 80062aa:	4770      	bx	lr
 80062ac:	f3af 8000 	nop.w

080062b0 <pxCurrentTCBConst2>:
 80062b0:	20000418 	.word	0x20000418
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80062b4:	bf00      	nop
 80062b6:	bf00      	nop

080062b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80062b8:	4808      	ldr	r0, [pc, #32]	@ (80062dc <prvPortStartFirstTask+0x24>)
 80062ba:	6800      	ldr	r0, [r0, #0]
 80062bc:	6800      	ldr	r0, [r0, #0]
 80062be:	f380 8808 	msr	MSP, r0
 80062c2:	f04f 0000 	mov.w	r0, #0
 80062c6:	f380 8814 	msr	CONTROL, r0
 80062ca:	b662      	cpsie	i
 80062cc:	b661      	cpsie	f
 80062ce:	f3bf 8f4f 	dsb	sy
 80062d2:	f3bf 8f6f 	isb	sy
 80062d6:	df00      	svc	0
 80062d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80062da:	bf00      	nop
 80062dc:	e000ed08 	.word	0xe000ed08

080062e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b086      	sub	sp, #24
 80062e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80062e6:	4b47      	ldr	r3, [pc, #284]	@ (8006404 <xPortStartScheduler+0x124>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a47      	ldr	r2, [pc, #284]	@ (8006408 <xPortStartScheduler+0x128>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d10b      	bne.n	8006308 <xPortStartScheduler+0x28>
	__asm volatile
 80062f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062f4:	f383 8811 	msr	BASEPRI, r3
 80062f8:	f3bf 8f6f 	isb	sy
 80062fc:	f3bf 8f4f 	dsb	sy
 8006300:	613b      	str	r3, [r7, #16]
}
 8006302:	bf00      	nop
 8006304:	bf00      	nop
 8006306:	e7fd      	b.n	8006304 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006308:	4b3e      	ldr	r3, [pc, #248]	@ (8006404 <xPortStartScheduler+0x124>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a3f      	ldr	r2, [pc, #252]	@ (800640c <xPortStartScheduler+0x12c>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d10b      	bne.n	800632a <xPortStartScheduler+0x4a>
	__asm volatile
 8006312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006316:	f383 8811 	msr	BASEPRI, r3
 800631a:	f3bf 8f6f 	isb	sy
 800631e:	f3bf 8f4f 	dsb	sy
 8006322:	60fb      	str	r3, [r7, #12]
}
 8006324:	bf00      	nop
 8006326:	bf00      	nop
 8006328:	e7fd      	b.n	8006326 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800632a:	4b39      	ldr	r3, [pc, #228]	@ (8006410 <xPortStartScheduler+0x130>)
 800632c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	b2db      	uxtb	r3, r3
 8006334:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	22ff      	movs	r2, #255	@ 0xff
 800633a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	b2db      	uxtb	r3, r3
 8006342:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006344:	78fb      	ldrb	r3, [r7, #3]
 8006346:	b2db      	uxtb	r3, r3
 8006348:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800634c:	b2da      	uxtb	r2, r3
 800634e:	4b31      	ldr	r3, [pc, #196]	@ (8006414 <xPortStartScheduler+0x134>)
 8006350:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006352:	4b31      	ldr	r3, [pc, #196]	@ (8006418 <xPortStartScheduler+0x138>)
 8006354:	2207      	movs	r2, #7
 8006356:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006358:	e009      	b.n	800636e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800635a:	4b2f      	ldr	r3, [pc, #188]	@ (8006418 <xPortStartScheduler+0x138>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	3b01      	subs	r3, #1
 8006360:	4a2d      	ldr	r2, [pc, #180]	@ (8006418 <xPortStartScheduler+0x138>)
 8006362:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006364:	78fb      	ldrb	r3, [r7, #3]
 8006366:	b2db      	uxtb	r3, r3
 8006368:	005b      	lsls	r3, r3, #1
 800636a:	b2db      	uxtb	r3, r3
 800636c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800636e:	78fb      	ldrb	r3, [r7, #3]
 8006370:	b2db      	uxtb	r3, r3
 8006372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006376:	2b80      	cmp	r3, #128	@ 0x80
 8006378:	d0ef      	beq.n	800635a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800637a:	4b27      	ldr	r3, [pc, #156]	@ (8006418 <xPortStartScheduler+0x138>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f1c3 0307 	rsb	r3, r3, #7
 8006382:	2b04      	cmp	r3, #4
 8006384:	d00b      	beq.n	800639e <xPortStartScheduler+0xbe>
	__asm volatile
 8006386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800638a:	f383 8811 	msr	BASEPRI, r3
 800638e:	f3bf 8f6f 	isb	sy
 8006392:	f3bf 8f4f 	dsb	sy
 8006396:	60bb      	str	r3, [r7, #8]
}
 8006398:	bf00      	nop
 800639a:	bf00      	nop
 800639c:	e7fd      	b.n	800639a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800639e:	4b1e      	ldr	r3, [pc, #120]	@ (8006418 <xPortStartScheduler+0x138>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	021b      	lsls	r3, r3, #8
 80063a4:	4a1c      	ldr	r2, [pc, #112]	@ (8006418 <xPortStartScheduler+0x138>)
 80063a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80063a8:	4b1b      	ldr	r3, [pc, #108]	@ (8006418 <xPortStartScheduler+0x138>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80063b0:	4a19      	ldr	r2, [pc, #100]	@ (8006418 <xPortStartScheduler+0x138>)
 80063b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	b2da      	uxtb	r2, r3
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80063bc:	4b17      	ldr	r3, [pc, #92]	@ (800641c <xPortStartScheduler+0x13c>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a16      	ldr	r2, [pc, #88]	@ (800641c <xPortStartScheduler+0x13c>)
 80063c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80063c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80063c8:	4b14      	ldr	r3, [pc, #80]	@ (800641c <xPortStartScheduler+0x13c>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a13      	ldr	r2, [pc, #76]	@ (800641c <xPortStartScheduler+0x13c>)
 80063ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80063d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80063d4:	f000 f8da 	bl	800658c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80063d8:	4b11      	ldr	r3, [pc, #68]	@ (8006420 <xPortStartScheduler+0x140>)
 80063da:	2200      	movs	r2, #0
 80063dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80063de:	f000 f8f9 	bl	80065d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80063e2:	4b10      	ldr	r3, [pc, #64]	@ (8006424 <xPortStartScheduler+0x144>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a0f      	ldr	r2, [pc, #60]	@ (8006424 <xPortStartScheduler+0x144>)
 80063e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80063ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80063ee:	f7ff ff63 	bl	80062b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80063f2:	f7ff fb99 	bl	8005b28 <vTaskSwitchContext>
	prvTaskExitError();
 80063f6:	f7ff ff19 	bl	800622c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3718      	adds	r7, #24
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}
 8006404:	e000ed00 	.word	0xe000ed00
 8006408:	410fc271 	.word	0x410fc271
 800640c:	410fc270 	.word	0x410fc270
 8006410:	e000e400 	.word	0xe000e400
 8006414:	20000544 	.word	0x20000544
 8006418:	20000548 	.word	0x20000548
 800641c:	e000ed20 	.word	0xe000ed20
 8006420:	2000000c 	.word	0x2000000c
 8006424:	e000ef34 	.word	0xe000ef34

08006428 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
	__asm volatile
 800642e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006432:	f383 8811 	msr	BASEPRI, r3
 8006436:	f3bf 8f6f 	isb	sy
 800643a:	f3bf 8f4f 	dsb	sy
 800643e:	607b      	str	r3, [r7, #4]
}
 8006440:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006442:	4b10      	ldr	r3, [pc, #64]	@ (8006484 <vPortEnterCritical+0x5c>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	3301      	adds	r3, #1
 8006448:	4a0e      	ldr	r2, [pc, #56]	@ (8006484 <vPortEnterCritical+0x5c>)
 800644a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800644c:	4b0d      	ldr	r3, [pc, #52]	@ (8006484 <vPortEnterCritical+0x5c>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2b01      	cmp	r3, #1
 8006452:	d110      	bne.n	8006476 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006454:	4b0c      	ldr	r3, [pc, #48]	@ (8006488 <vPortEnterCritical+0x60>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	b2db      	uxtb	r3, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00b      	beq.n	8006476 <vPortEnterCritical+0x4e>
	__asm volatile
 800645e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006462:	f383 8811 	msr	BASEPRI, r3
 8006466:	f3bf 8f6f 	isb	sy
 800646a:	f3bf 8f4f 	dsb	sy
 800646e:	603b      	str	r3, [r7, #0]
}
 8006470:	bf00      	nop
 8006472:	bf00      	nop
 8006474:	e7fd      	b.n	8006472 <vPortEnterCritical+0x4a>
	}
}
 8006476:	bf00      	nop
 8006478:	370c      	adds	r7, #12
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	2000000c 	.word	0x2000000c
 8006488:	e000ed04 	.word	0xe000ed04

0800648c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006492:	4b12      	ldr	r3, [pc, #72]	@ (80064dc <vPortExitCritical+0x50>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10b      	bne.n	80064b2 <vPortExitCritical+0x26>
	__asm volatile
 800649a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800649e:	f383 8811 	msr	BASEPRI, r3
 80064a2:	f3bf 8f6f 	isb	sy
 80064a6:	f3bf 8f4f 	dsb	sy
 80064aa:	607b      	str	r3, [r7, #4]
}
 80064ac:	bf00      	nop
 80064ae:	bf00      	nop
 80064b0:	e7fd      	b.n	80064ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80064b2:	4b0a      	ldr	r3, [pc, #40]	@ (80064dc <vPortExitCritical+0x50>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	3b01      	subs	r3, #1
 80064b8:	4a08      	ldr	r2, [pc, #32]	@ (80064dc <vPortExitCritical+0x50>)
 80064ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80064bc:	4b07      	ldr	r3, [pc, #28]	@ (80064dc <vPortExitCritical+0x50>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d105      	bne.n	80064d0 <vPortExitCritical+0x44>
 80064c4:	2300      	movs	r3, #0
 80064c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	f383 8811 	msr	BASEPRI, r3
}
 80064ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80064d0:	bf00      	nop
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr
 80064dc:	2000000c 	.word	0x2000000c

080064e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80064e0:	f3ef 8009 	mrs	r0, PSP
 80064e4:	f3bf 8f6f 	isb	sy
 80064e8:	4b15      	ldr	r3, [pc, #84]	@ (8006540 <pxCurrentTCBConst>)
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	f01e 0f10 	tst.w	lr, #16
 80064f0:	bf08      	it	eq
 80064f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80064f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064fa:	6010      	str	r0, [r2, #0]
 80064fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006500:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006504:	f380 8811 	msr	BASEPRI, r0
 8006508:	f3bf 8f4f 	dsb	sy
 800650c:	f3bf 8f6f 	isb	sy
 8006510:	f7ff fb0a 	bl	8005b28 <vTaskSwitchContext>
 8006514:	f04f 0000 	mov.w	r0, #0
 8006518:	f380 8811 	msr	BASEPRI, r0
 800651c:	bc09      	pop	{r0, r3}
 800651e:	6819      	ldr	r1, [r3, #0]
 8006520:	6808      	ldr	r0, [r1, #0]
 8006522:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006526:	f01e 0f10 	tst.w	lr, #16
 800652a:	bf08      	it	eq
 800652c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006530:	f380 8809 	msr	PSP, r0
 8006534:	f3bf 8f6f 	isb	sy
 8006538:	4770      	bx	lr
 800653a:	bf00      	nop
 800653c:	f3af 8000 	nop.w

08006540 <pxCurrentTCBConst>:
 8006540:	20000418 	.word	0x20000418
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006544:	bf00      	nop
 8006546:	bf00      	nop

08006548 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
	__asm volatile
 800654e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006552:	f383 8811 	msr	BASEPRI, r3
 8006556:	f3bf 8f6f 	isb	sy
 800655a:	f3bf 8f4f 	dsb	sy
 800655e:	607b      	str	r3, [r7, #4]
}
 8006560:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006562:	f7ff fa27 	bl	80059b4 <xTaskIncrementTick>
 8006566:	4603      	mov	r3, r0
 8006568:	2b00      	cmp	r3, #0
 800656a:	d003      	beq.n	8006574 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800656c:	4b06      	ldr	r3, [pc, #24]	@ (8006588 <xPortSysTickHandler+0x40>)
 800656e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006572:	601a      	str	r2, [r3, #0]
 8006574:	2300      	movs	r3, #0
 8006576:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	f383 8811 	msr	BASEPRI, r3
}
 800657e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006580:	bf00      	nop
 8006582:	3708      	adds	r7, #8
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	e000ed04 	.word	0xe000ed04

0800658c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800658c:	b480      	push	{r7}
 800658e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006590:	4b0b      	ldr	r3, [pc, #44]	@ (80065c0 <vPortSetupTimerInterrupt+0x34>)
 8006592:	2200      	movs	r2, #0
 8006594:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006596:	4b0b      	ldr	r3, [pc, #44]	@ (80065c4 <vPortSetupTimerInterrupt+0x38>)
 8006598:	2200      	movs	r2, #0
 800659a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800659c:	4b0a      	ldr	r3, [pc, #40]	@ (80065c8 <vPortSetupTimerInterrupt+0x3c>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a0a      	ldr	r2, [pc, #40]	@ (80065cc <vPortSetupTimerInterrupt+0x40>)
 80065a2:	fba2 2303 	umull	r2, r3, r2, r3
 80065a6:	099b      	lsrs	r3, r3, #6
 80065a8:	4a09      	ldr	r2, [pc, #36]	@ (80065d0 <vPortSetupTimerInterrupt+0x44>)
 80065aa:	3b01      	subs	r3, #1
 80065ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80065ae:	4b04      	ldr	r3, [pc, #16]	@ (80065c0 <vPortSetupTimerInterrupt+0x34>)
 80065b0:	2207      	movs	r2, #7
 80065b2:	601a      	str	r2, [r3, #0]
}
 80065b4:	bf00      	nop
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop
 80065c0:	e000e010 	.word	0xe000e010
 80065c4:	e000e018 	.word	0xe000e018
 80065c8:	20000000 	.word	0x20000000
 80065cc:	10624dd3 	.word	0x10624dd3
 80065d0:	e000e014 	.word	0xe000e014

080065d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80065d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80065e4 <vPortEnableVFP+0x10>
 80065d8:	6801      	ldr	r1, [r0, #0]
 80065da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80065de:	6001      	str	r1, [r0, #0]
 80065e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80065e2:	bf00      	nop
 80065e4:	e000ed88 	.word	0xe000ed88

080065e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80065e8:	b480      	push	{r7}
 80065ea:	b085      	sub	sp, #20
 80065ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80065ee:	f3ef 8305 	mrs	r3, IPSR
 80065f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2b0f      	cmp	r3, #15
 80065f8:	d915      	bls.n	8006626 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80065fa:	4a18      	ldr	r2, [pc, #96]	@ (800665c <vPortValidateInterruptPriority+0x74>)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	4413      	add	r3, r2
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006604:	4b16      	ldr	r3, [pc, #88]	@ (8006660 <vPortValidateInterruptPriority+0x78>)
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	7afa      	ldrb	r2, [r7, #11]
 800660a:	429a      	cmp	r2, r3
 800660c:	d20b      	bcs.n	8006626 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800660e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006612:	f383 8811 	msr	BASEPRI, r3
 8006616:	f3bf 8f6f 	isb	sy
 800661a:	f3bf 8f4f 	dsb	sy
 800661e:	607b      	str	r3, [r7, #4]
}
 8006620:	bf00      	nop
 8006622:	bf00      	nop
 8006624:	e7fd      	b.n	8006622 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006626:	4b0f      	ldr	r3, [pc, #60]	@ (8006664 <vPortValidateInterruptPriority+0x7c>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800662e:	4b0e      	ldr	r3, [pc, #56]	@ (8006668 <vPortValidateInterruptPriority+0x80>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	429a      	cmp	r2, r3
 8006634:	d90b      	bls.n	800664e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800663a:	f383 8811 	msr	BASEPRI, r3
 800663e:	f3bf 8f6f 	isb	sy
 8006642:	f3bf 8f4f 	dsb	sy
 8006646:	603b      	str	r3, [r7, #0]
}
 8006648:	bf00      	nop
 800664a:	bf00      	nop
 800664c:	e7fd      	b.n	800664a <vPortValidateInterruptPriority+0x62>
	}
 800664e:	bf00      	nop
 8006650:	3714      	adds	r7, #20
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	e000e3f0 	.word	0xe000e3f0
 8006660:	20000544 	.word	0x20000544
 8006664:	e000ed0c 	.word	0xe000ed0c
 8006668:	20000548 	.word	0x20000548

0800666c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b08a      	sub	sp, #40	@ 0x28
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006674:	2300      	movs	r3, #0
 8006676:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006678:	f7ff f8ce 	bl	8005818 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800667c:	4b5c      	ldr	r3, [pc, #368]	@ (80067f0 <pvPortMalloc+0x184>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d101      	bne.n	8006688 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006684:	f000 f924 	bl	80068d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006688:	4b5a      	ldr	r3, [pc, #360]	@ (80067f4 <pvPortMalloc+0x188>)
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4013      	ands	r3, r2
 8006690:	2b00      	cmp	r3, #0
 8006692:	f040 8095 	bne.w	80067c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d01e      	beq.n	80066da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800669c:	2208      	movs	r2, #8
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4413      	add	r3, r2
 80066a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f003 0307 	and.w	r3, r3, #7
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d015      	beq.n	80066da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f023 0307 	bic.w	r3, r3, #7
 80066b4:	3308      	adds	r3, #8
 80066b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f003 0307 	and.w	r3, r3, #7
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00b      	beq.n	80066da <pvPortMalloc+0x6e>
	__asm volatile
 80066c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066c6:	f383 8811 	msr	BASEPRI, r3
 80066ca:	f3bf 8f6f 	isb	sy
 80066ce:	f3bf 8f4f 	dsb	sy
 80066d2:	617b      	str	r3, [r7, #20]
}
 80066d4:	bf00      	nop
 80066d6:	bf00      	nop
 80066d8:	e7fd      	b.n	80066d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d06f      	beq.n	80067c0 <pvPortMalloc+0x154>
 80066e0:	4b45      	ldr	r3, [pc, #276]	@ (80067f8 <pvPortMalloc+0x18c>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d86a      	bhi.n	80067c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80066ea:	4b44      	ldr	r3, [pc, #272]	@ (80067fc <pvPortMalloc+0x190>)
 80066ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80066ee:	4b43      	ldr	r3, [pc, #268]	@ (80067fc <pvPortMalloc+0x190>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066f4:	e004      	b.n	8006700 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80066f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80066fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	429a      	cmp	r2, r3
 8006708:	d903      	bls.n	8006712 <pvPortMalloc+0xa6>
 800670a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1f1      	bne.n	80066f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006712:	4b37      	ldr	r3, [pc, #220]	@ (80067f0 <pvPortMalloc+0x184>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006718:	429a      	cmp	r2, r3
 800671a:	d051      	beq.n	80067c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800671c:	6a3b      	ldr	r3, [r7, #32]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2208      	movs	r2, #8
 8006722:	4413      	add	r3, r2
 8006724:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	6a3b      	ldr	r3, [r7, #32]
 800672c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800672e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006730:	685a      	ldr	r2, [r3, #4]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	1ad2      	subs	r2, r2, r3
 8006736:	2308      	movs	r3, #8
 8006738:	005b      	lsls	r3, r3, #1
 800673a:	429a      	cmp	r2, r3
 800673c:	d920      	bls.n	8006780 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800673e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4413      	add	r3, r2
 8006744:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	f003 0307 	and.w	r3, r3, #7
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00b      	beq.n	8006768 <pvPortMalloc+0xfc>
	__asm volatile
 8006750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006754:	f383 8811 	msr	BASEPRI, r3
 8006758:	f3bf 8f6f 	isb	sy
 800675c:	f3bf 8f4f 	dsb	sy
 8006760:	613b      	str	r3, [r7, #16]
}
 8006762:	bf00      	nop
 8006764:	bf00      	nop
 8006766:	e7fd      	b.n	8006764 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	1ad2      	subs	r2, r2, r3
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800677a:	69b8      	ldr	r0, [r7, #24]
 800677c:	f000 f90a 	bl	8006994 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006780:	4b1d      	ldr	r3, [pc, #116]	@ (80067f8 <pvPortMalloc+0x18c>)
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	4a1b      	ldr	r2, [pc, #108]	@ (80067f8 <pvPortMalloc+0x18c>)
 800678c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800678e:	4b1a      	ldr	r3, [pc, #104]	@ (80067f8 <pvPortMalloc+0x18c>)
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	4b1b      	ldr	r3, [pc, #108]	@ (8006800 <pvPortMalloc+0x194>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	429a      	cmp	r2, r3
 8006798:	d203      	bcs.n	80067a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800679a:	4b17      	ldr	r3, [pc, #92]	@ (80067f8 <pvPortMalloc+0x18c>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a18      	ldr	r2, [pc, #96]	@ (8006800 <pvPortMalloc+0x194>)
 80067a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80067a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a4:	685a      	ldr	r2, [r3, #4]
 80067a6:	4b13      	ldr	r3, [pc, #76]	@ (80067f4 <pvPortMalloc+0x188>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	431a      	orrs	r2, r3
 80067ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80067b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b2:	2200      	movs	r2, #0
 80067b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80067b6:	4b13      	ldr	r3, [pc, #76]	@ (8006804 <pvPortMalloc+0x198>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	3301      	adds	r3, #1
 80067bc:	4a11      	ldr	r2, [pc, #68]	@ (8006804 <pvPortMalloc+0x198>)
 80067be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80067c0:	f7ff f838 	bl	8005834 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	f003 0307 	and.w	r3, r3, #7
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00b      	beq.n	80067e6 <pvPortMalloc+0x17a>
	__asm volatile
 80067ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d2:	f383 8811 	msr	BASEPRI, r3
 80067d6:	f3bf 8f6f 	isb	sy
 80067da:	f3bf 8f4f 	dsb	sy
 80067de:	60fb      	str	r3, [r7, #12]
}
 80067e0:	bf00      	nop
 80067e2:	bf00      	nop
 80067e4:	e7fd      	b.n	80067e2 <pvPortMalloc+0x176>
	return pvReturn;
 80067e6:	69fb      	ldr	r3, [r7, #28]
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3728      	adds	r7, #40	@ 0x28
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	20004154 	.word	0x20004154
 80067f4:	20004168 	.word	0x20004168
 80067f8:	20004158 	.word	0x20004158
 80067fc:	2000414c 	.word	0x2000414c
 8006800:	2000415c 	.word	0x2000415c
 8006804:	20004160 	.word	0x20004160

08006808 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b086      	sub	sp, #24
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d04f      	beq.n	80068ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800681a:	2308      	movs	r3, #8
 800681c:	425b      	negs	r3, r3
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	4413      	add	r3, r2
 8006822:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	685a      	ldr	r2, [r3, #4]
 800682c:	4b25      	ldr	r3, [pc, #148]	@ (80068c4 <vPortFree+0xbc>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4013      	ands	r3, r2
 8006832:	2b00      	cmp	r3, #0
 8006834:	d10b      	bne.n	800684e <vPortFree+0x46>
	__asm volatile
 8006836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800683a:	f383 8811 	msr	BASEPRI, r3
 800683e:	f3bf 8f6f 	isb	sy
 8006842:	f3bf 8f4f 	dsb	sy
 8006846:	60fb      	str	r3, [r7, #12]
}
 8006848:	bf00      	nop
 800684a:	bf00      	nop
 800684c:	e7fd      	b.n	800684a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00b      	beq.n	800686e <vPortFree+0x66>
	__asm volatile
 8006856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800685a:	f383 8811 	msr	BASEPRI, r3
 800685e:	f3bf 8f6f 	isb	sy
 8006862:	f3bf 8f4f 	dsb	sy
 8006866:	60bb      	str	r3, [r7, #8]
}
 8006868:	bf00      	nop
 800686a:	bf00      	nop
 800686c:	e7fd      	b.n	800686a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	685a      	ldr	r2, [r3, #4]
 8006872:	4b14      	ldr	r3, [pc, #80]	@ (80068c4 <vPortFree+0xbc>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4013      	ands	r3, r2
 8006878:	2b00      	cmp	r3, #0
 800687a:	d01e      	beq.n	80068ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d11a      	bne.n	80068ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	685a      	ldr	r2, [r3, #4]
 8006888:	4b0e      	ldr	r3, [pc, #56]	@ (80068c4 <vPortFree+0xbc>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	43db      	mvns	r3, r3
 800688e:	401a      	ands	r2, r3
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006894:	f7fe ffc0 	bl	8005818 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	685a      	ldr	r2, [r3, #4]
 800689c:	4b0a      	ldr	r3, [pc, #40]	@ (80068c8 <vPortFree+0xc0>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4413      	add	r3, r2
 80068a2:	4a09      	ldr	r2, [pc, #36]	@ (80068c8 <vPortFree+0xc0>)
 80068a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80068a6:	6938      	ldr	r0, [r7, #16]
 80068a8:	f000 f874 	bl	8006994 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80068ac:	4b07      	ldr	r3, [pc, #28]	@ (80068cc <vPortFree+0xc4>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	3301      	adds	r3, #1
 80068b2:	4a06      	ldr	r2, [pc, #24]	@ (80068cc <vPortFree+0xc4>)
 80068b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80068b6:	f7fe ffbd 	bl	8005834 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80068ba:	bf00      	nop
 80068bc:	3718      	adds	r7, #24
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	20004168 	.word	0x20004168
 80068c8:	20004158 	.word	0x20004158
 80068cc:	20004164 	.word	0x20004164

080068d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80068d6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80068da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80068dc:	4b27      	ldr	r3, [pc, #156]	@ (800697c <prvHeapInit+0xac>)
 80068de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f003 0307 	and.w	r3, r3, #7
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00c      	beq.n	8006904 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	3307      	adds	r3, #7
 80068ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f023 0307 	bic.w	r3, r3, #7
 80068f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80068f8:	68ba      	ldr	r2, [r7, #8]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	4a1f      	ldr	r2, [pc, #124]	@ (800697c <prvHeapInit+0xac>)
 8006900:	4413      	add	r3, r2
 8006902:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006908:	4a1d      	ldr	r2, [pc, #116]	@ (8006980 <prvHeapInit+0xb0>)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800690e:	4b1c      	ldr	r3, [pc, #112]	@ (8006980 <prvHeapInit+0xb0>)
 8006910:	2200      	movs	r2, #0
 8006912:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	68ba      	ldr	r2, [r7, #8]
 8006918:	4413      	add	r3, r2
 800691a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800691c:	2208      	movs	r2, #8
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	1a9b      	subs	r3, r3, r2
 8006922:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f023 0307 	bic.w	r3, r3, #7
 800692a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	4a15      	ldr	r2, [pc, #84]	@ (8006984 <prvHeapInit+0xb4>)
 8006930:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006932:	4b14      	ldr	r3, [pc, #80]	@ (8006984 <prvHeapInit+0xb4>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2200      	movs	r2, #0
 8006938:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800693a:	4b12      	ldr	r3, [pc, #72]	@ (8006984 <prvHeapInit+0xb4>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2200      	movs	r2, #0
 8006940:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	1ad2      	subs	r2, r2, r3
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006950:	4b0c      	ldr	r3, [pc, #48]	@ (8006984 <prvHeapInit+0xb4>)
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	4a0a      	ldr	r2, [pc, #40]	@ (8006988 <prvHeapInit+0xb8>)
 800695e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	4a09      	ldr	r2, [pc, #36]	@ (800698c <prvHeapInit+0xbc>)
 8006966:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006968:	4b09      	ldr	r3, [pc, #36]	@ (8006990 <prvHeapInit+0xc0>)
 800696a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800696e:	601a      	str	r2, [r3, #0]
}
 8006970:	bf00      	nop
 8006972:	3714      	adds	r7, #20
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr
 800697c:	2000054c 	.word	0x2000054c
 8006980:	2000414c 	.word	0x2000414c
 8006984:	20004154 	.word	0x20004154
 8006988:	2000415c 	.word	0x2000415c
 800698c:	20004158 	.word	0x20004158
 8006990:	20004168 	.word	0x20004168

08006994 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006994:	b480      	push	{r7}
 8006996:	b085      	sub	sp, #20
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800699c:	4b28      	ldr	r3, [pc, #160]	@ (8006a40 <prvInsertBlockIntoFreeList+0xac>)
 800699e:	60fb      	str	r3, [r7, #12]
 80069a0:	e002      	b.n	80069a8 <prvInsertBlockIntoFreeList+0x14>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	60fb      	str	r3, [r7, #12]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d8f7      	bhi.n	80069a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	68ba      	ldr	r2, [r7, #8]
 80069bc:	4413      	add	r3, r2
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d108      	bne.n	80069d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	685a      	ldr	r2, [r3, #4]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	441a      	add	r2, r3
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	68ba      	ldr	r2, [r7, #8]
 80069e0:	441a      	add	r2, r3
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d118      	bne.n	8006a1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	4b15      	ldr	r3, [pc, #84]	@ (8006a44 <prvInsertBlockIntoFreeList+0xb0>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d00d      	beq.n	8006a12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	685a      	ldr	r2, [r3, #4]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	441a      	add	r2, r3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	601a      	str	r2, [r3, #0]
 8006a10:	e008      	b.n	8006a24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a12:	4b0c      	ldr	r3, [pc, #48]	@ (8006a44 <prvInsertBlockIntoFreeList+0xb0>)
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	601a      	str	r2, [r3, #0]
 8006a1a:	e003      	b.n	8006a24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d002      	beq.n	8006a32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a32:	bf00      	nop
 8006a34:	3714      	adds	r7, #20
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	2000414c 	.word	0x2000414c
 8006a44:	20004154 	.word	0x20004154

08006a48 <sniprintf>:
 8006a48:	b40c      	push	{r2, r3}
 8006a4a:	b530      	push	{r4, r5, lr}
 8006a4c:	4b17      	ldr	r3, [pc, #92]	@ (8006aac <sniprintf+0x64>)
 8006a4e:	1e0c      	subs	r4, r1, #0
 8006a50:	681d      	ldr	r5, [r3, #0]
 8006a52:	b09d      	sub	sp, #116	@ 0x74
 8006a54:	da08      	bge.n	8006a68 <sniprintf+0x20>
 8006a56:	238b      	movs	r3, #139	@ 0x8b
 8006a58:	602b      	str	r3, [r5, #0]
 8006a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a5e:	b01d      	add	sp, #116	@ 0x74
 8006a60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a64:	b002      	add	sp, #8
 8006a66:	4770      	bx	lr
 8006a68:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006a6c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006a70:	bf14      	ite	ne
 8006a72:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006a76:	4623      	moveq	r3, r4
 8006a78:	9304      	str	r3, [sp, #16]
 8006a7a:	9307      	str	r3, [sp, #28]
 8006a7c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006a80:	9002      	str	r0, [sp, #8]
 8006a82:	9006      	str	r0, [sp, #24]
 8006a84:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006a88:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006a8a:	ab21      	add	r3, sp, #132	@ 0x84
 8006a8c:	a902      	add	r1, sp, #8
 8006a8e:	4628      	mov	r0, r5
 8006a90:	9301      	str	r3, [sp, #4]
 8006a92:	f000 f9a3 	bl	8006ddc <_svfiprintf_r>
 8006a96:	1c43      	adds	r3, r0, #1
 8006a98:	bfbc      	itt	lt
 8006a9a:	238b      	movlt	r3, #139	@ 0x8b
 8006a9c:	602b      	strlt	r3, [r5, #0]
 8006a9e:	2c00      	cmp	r4, #0
 8006aa0:	d0dd      	beq.n	8006a5e <sniprintf+0x16>
 8006aa2:	9b02      	ldr	r3, [sp, #8]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	701a      	strb	r2, [r3, #0]
 8006aa8:	e7d9      	b.n	8006a5e <sniprintf+0x16>
 8006aaa:	bf00      	nop
 8006aac:	20000010 	.word	0x20000010

08006ab0 <memset>:
 8006ab0:	4402      	add	r2, r0
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d100      	bne.n	8006aba <memset+0xa>
 8006ab8:	4770      	bx	lr
 8006aba:	f803 1b01 	strb.w	r1, [r3], #1
 8006abe:	e7f9      	b.n	8006ab4 <memset+0x4>

08006ac0 <__errno>:
 8006ac0:	4b01      	ldr	r3, [pc, #4]	@ (8006ac8 <__errno+0x8>)
 8006ac2:	6818      	ldr	r0, [r3, #0]
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	20000010 	.word	0x20000010

08006acc <__libc_init_array>:
 8006acc:	b570      	push	{r4, r5, r6, lr}
 8006ace:	4d0d      	ldr	r5, [pc, #52]	@ (8006b04 <__libc_init_array+0x38>)
 8006ad0:	4c0d      	ldr	r4, [pc, #52]	@ (8006b08 <__libc_init_array+0x3c>)
 8006ad2:	1b64      	subs	r4, r4, r5
 8006ad4:	10a4      	asrs	r4, r4, #2
 8006ad6:	2600      	movs	r6, #0
 8006ad8:	42a6      	cmp	r6, r4
 8006ada:	d109      	bne.n	8006af0 <__libc_init_array+0x24>
 8006adc:	4d0b      	ldr	r5, [pc, #44]	@ (8006b0c <__libc_init_array+0x40>)
 8006ade:	4c0c      	ldr	r4, [pc, #48]	@ (8006b10 <__libc_init_array+0x44>)
 8006ae0:	f000 fc66 	bl	80073b0 <_init>
 8006ae4:	1b64      	subs	r4, r4, r5
 8006ae6:	10a4      	asrs	r4, r4, #2
 8006ae8:	2600      	movs	r6, #0
 8006aea:	42a6      	cmp	r6, r4
 8006aec:	d105      	bne.n	8006afa <__libc_init_array+0x2e>
 8006aee:	bd70      	pop	{r4, r5, r6, pc}
 8006af0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006af4:	4798      	blx	r3
 8006af6:	3601      	adds	r6, #1
 8006af8:	e7ee      	b.n	8006ad8 <__libc_init_array+0xc>
 8006afa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006afe:	4798      	blx	r3
 8006b00:	3601      	adds	r6, #1
 8006b02:	e7f2      	b.n	8006aea <__libc_init_array+0x1e>
 8006b04:	0800757c 	.word	0x0800757c
 8006b08:	0800757c 	.word	0x0800757c
 8006b0c:	0800757c 	.word	0x0800757c
 8006b10:	08007580 	.word	0x08007580

08006b14 <__retarget_lock_acquire_recursive>:
 8006b14:	4770      	bx	lr

08006b16 <__retarget_lock_release_recursive>:
 8006b16:	4770      	bx	lr

08006b18 <memcpy>:
 8006b18:	440a      	add	r2, r1
 8006b1a:	4291      	cmp	r1, r2
 8006b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b20:	d100      	bne.n	8006b24 <memcpy+0xc>
 8006b22:	4770      	bx	lr
 8006b24:	b510      	push	{r4, lr}
 8006b26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b2e:	4291      	cmp	r1, r2
 8006b30:	d1f9      	bne.n	8006b26 <memcpy+0xe>
 8006b32:	bd10      	pop	{r4, pc}

08006b34 <_free_r>:
 8006b34:	b538      	push	{r3, r4, r5, lr}
 8006b36:	4605      	mov	r5, r0
 8006b38:	2900      	cmp	r1, #0
 8006b3a:	d041      	beq.n	8006bc0 <_free_r+0x8c>
 8006b3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b40:	1f0c      	subs	r4, r1, #4
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	bfb8      	it	lt
 8006b46:	18e4      	addlt	r4, r4, r3
 8006b48:	f000 f8e0 	bl	8006d0c <__malloc_lock>
 8006b4c:	4a1d      	ldr	r2, [pc, #116]	@ (8006bc4 <_free_r+0x90>)
 8006b4e:	6813      	ldr	r3, [r2, #0]
 8006b50:	b933      	cbnz	r3, 8006b60 <_free_r+0x2c>
 8006b52:	6063      	str	r3, [r4, #4]
 8006b54:	6014      	str	r4, [r2, #0]
 8006b56:	4628      	mov	r0, r5
 8006b58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b5c:	f000 b8dc 	b.w	8006d18 <__malloc_unlock>
 8006b60:	42a3      	cmp	r3, r4
 8006b62:	d908      	bls.n	8006b76 <_free_r+0x42>
 8006b64:	6820      	ldr	r0, [r4, #0]
 8006b66:	1821      	adds	r1, r4, r0
 8006b68:	428b      	cmp	r3, r1
 8006b6a:	bf01      	itttt	eq
 8006b6c:	6819      	ldreq	r1, [r3, #0]
 8006b6e:	685b      	ldreq	r3, [r3, #4]
 8006b70:	1809      	addeq	r1, r1, r0
 8006b72:	6021      	streq	r1, [r4, #0]
 8006b74:	e7ed      	b.n	8006b52 <_free_r+0x1e>
 8006b76:	461a      	mov	r2, r3
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	b10b      	cbz	r3, 8006b80 <_free_r+0x4c>
 8006b7c:	42a3      	cmp	r3, r4
 8006b7e:	d9fa      	bls.n	8006b76 <_free_r+0x42>
 8006b80:	6811      	ldr	r1, [r2, #0]
 8006b82:	1850      	adds	r0, r2, r1
 8006b84:	42a0      	cmp	r0, r4
 8006b86:	d10b      	bne.n	8006ba0 <_free_r+0x6c>
 8006b88:	6820      	ldr	r0, [r4, #0]
 8006b8a:	4401      	add	r1, r0
 8006b8c:	1850      	adds	r0, r2, r1
 8006b8e:	4283      	cmp	r3, r0
 8006b90:	6011      	str	r1, [r2, #0]
 8006b92:	d1e0      	bne.n	8006b56 <_free_r+0x22>
 8006b94:	6818      	ldr	r0, [r3, #0]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	6053      	str	r3, [r2, #4]
 8006b9a:	4408      	add	r0, r1
 8006b9c:	6010      	str	r0, [r2, #0]
 8006b9e:	e7da      	b.n	8006b56 <_free_r+0x22>
 8006ba0:	d902      	bls.n	8006ba8 <_free_r+0x74>
 8006ba2:	230c      	movs	r3, #12
 8006ba4:	602b      	str	r3, [r5, #0]
 8006ba6:	e7d6      	b.n	8006b56 <_free_r+0x22>
 8006ba8:	6820      	ldr	r0, [r4, #0]
 8006baa:	1821      	adds	r1, r4, r0
 8006bac:	428b      	cmp	r3, r1
 8006bae:	bf04      	itt	eq
 8006bb0:	6819      	ldreq	r1, [r3, #0]
 8006bb2:	685b      	ldreq	r3, [r3, #4]
 8006bb4:	6063      	str	r3, [r4, #4]
 8006bb6:	bf04      	itt	eq
 8006bb8:	1809      	addeq	r1, r1, r0
 8006bba:	6021      	streq	r1, [r4, #0]
 8006bbc:	6054      	str	r4, [r2, #4]
 8006bbe:	e7ca      	b.n	8006b56 <_free_r+0x22>
 8006bc0:	bd38      	pop	{r3, r4, r5, pc}
 8006bc2:	bf00      	nop
 8006bc4:	200042b0 	.word	0x200042b0

08006bc8 <sbrk_aligned>:
 8006bc8:	b570      	push	{r4, r5, r6, lr}
 8006bca:	4e0f      	ldr	r6, [pc, #60]	@ (8006c08 <sbrk_aligned+0x40>)
 8006bcc:	460c      	mov	r4, r1
 8006bce:	6831      	ldr	r1, [r6, #0]
 8006bd0:	4605      	mov	r5, r0
 8006bd2:	b911      	cbnz	r1, 8006bda <sbrk_aligned+0x12>
 8006bd4:	f000 fba6 	bl	8007324 <_sbrk_r>
 8006bd8:	6030      	str	r0, [r6, #0]
 8006bda:	4621      	mov	r1, r4
 8006bdc:	4628      	mov	r0, r5
 8006bde:	f000 fba1 	bl	8007324 <_sbrk_r>
 8006be2:	1c43      	adds	r3, r0, #1
 8006be4:	d103      	bne.n	8006bee <sbrk_aligned+0x26>
 8006be6:	f04f 34ff 	mov.w	r4, #4294967295
 8006bea:	4620      	mov	r0, r4
 8006bec:	bd70      	pop	{r4, r5, r6, pc}
 8006bee:	1cc4      	adds	r4, r0, #3
 8006bf0:	f024 0403 	bic.w	r4, r4, #3
 8006bf4:	42a0      	cmp	r0, r4
 8006bf6:	d0f8      	beq.n	8006bea <sbrk_aligned+0x22>
 8006bf8:	1a21      	subs	r1, r4, r0
 8006bfa:	4628      	mov	r0, r5
 8006bfc:	f000 fb92 	bl	8007324 <_sbrk_r>
 8006c00:	3001      	adds	r0, #1
 8006c02:	d1f2      	bne.n	8006bea <sbrk_aligned+0x22>
 8006c04:	e7ef      	b.n	8006be6 <sbrk_aligned+0x1e>
 8006c06:	bf00      	nop
 8006c08:	200042ac 	.word	0x200042ac

08006c0c <_malloc_r>:
 8006c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c10:	1ccd      	adds	r5, r1, #3
 8006c12:	f025 0503 	bic.w	r5, r5, #3
 8006c16:	3508      	adds	r5, #8
 8006c18:	2d0c      	cmp	r5, #12
 8006c1a:	bf38      	it	cc
 8006c1c:	250c      	movcc	r5, #12
 8006c1e:	2d00      	cmp	r5, #0
 8006c20:	4606      	mov	r6, r0
 8006c22:	db01      	blt.n	8006c28 <_malloc_r+0x1c>
 8006c24:	42a9      	cmp	r1, r5
 8006c26:	d904      	bls.n	8006c32 <_malloc_r+0x26>
 8006c28:	230c      	movs	r3, #12
 8006c2a:	6033      	str	r3, [r6, #0]
 8006c2c:	2000      	movs	r0, #0
 8006c2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006d08 <_malloc_r+0xfc>
 8006c36:	f000 f869 	bl	8006d0c <__malloc_lock>
 8006c3a:	f8d8 3000 	ldr.w	r3, [r8]
 8006c3e:	461c      	mov	r4, r3
 8006c40:	bb44      	cbnz	r4, 8006c94 <_malloc_r+0x88>
 8006c42:	4629      	mov	r1, r5
 8006c44:	4630      	mov	r0, r6
 8006c46:	f7ff ffbf 	bl	8006bc8 <sbrk_aligned>
 8006c4a:	1c43      	adds	r3, r0, #1
 8006c4c:	4604      	mov	r4, r0
 8006c4e:	d158      	bne.n	8006d02 <_malloc_r+0xf6>
 8006c50:	f8d8 4000 	ldr.w	r4, [r8]
 8006c54:	4627      	mov	r7, r4
 8006c56:	2f00      	cmp	r7, #0
 8006c58:	d143      	bne.n	8006ce2 <_malloc_r+0xd6>
 8006c5a:	2c00      	cmp	r4, #0
 8006c5c:	d04b      	beq.n	8006cf6 <_malloc_r+0xea>
 8006c5e:	6823      	ldr	r3, [r4, #0]
 8006c60:	4639      	mov	r1, r7
 8006c62:	4630      	mov	r0, r6
 8006c64:	eb04 0903 	add.w	r9, r4, r3
 8006c68:	f000 fb5c 	bl	8007324 <_sbrk_r>
 8006c6c:	4581      	cmp	r9, r0
 8006c6e:	d142      	bne.n	8006cf6 <_malloc_r+0xea>
 8006c70:	6821      	ldr	r1, [r4, #0]
 8006c72:	1a6d      	subs	r5, r5, r1
 8006c74:	4629      	mov	r1, r5
 8006c76:	4630      	mov	r0, r6
 8006c78:	f7ff ffa6 	bl	8006bc8 <sbrk_aligned>
 8006c7c:	3001      	adds	r0, #1
 8006c7e:	d03a      	beq.n	8006cf6 <_malloc_r+0xea>
 8006c80:	6823      	ldr	r3, [r4, #0]
 8006c82:	442b      	add	r3, r5
 8006c84:	6023      	str	r3, [r4, #0]
 8006c86:	f8d8 3000 	ldr.w	r3, [r8]
 8006c8a:	685a      	ldr	r2, [r3, #4]
 8006c8c:	bb62      	cbnz	r2, 8006ce8 <_malloc_r+0xdc>
 8006c8e:	f8c8 7000 	str.w	r7, [r8]
 8006c92:	e00f      	b.n	8006cb4 <_malloc_r+0xa8>
 8006c94:	6822      	ldr	r2, [r4, #0]
 8006c96:	1b52      	subs	r2, r2, r5
 8006c98:	d420      	bmi.n	8006cdc <_malloc_r+0xd0>
 8006c9a:	2a0b      	cmp	r2, #11
 8006c9c:	d917      	bls.n	8006cce <_malloc_r+0xc2>
 8006c9e:	1961      	adds	r1, r4, r5
 8006ca0:	42a3      	cmp	r3, r4
 8006ca2:	6025      	str	r5, [r4, #0]
 8006ca4:	bf18      	it	ne
 8006ca6:	6059      	strne	r1, [r3, #4]
 8006ca8:	6863      	ldr	r3, [r4, #4]
 8006caa:	bf08      	it	eq
 8006cac:	f8c8 1000 	streq.w	r1, [r8]
 8006cb0:	5162      	str	r2, [r4, r5]
 8006cb2:	604b      	str	r3, [r1, #4]
 8006cb4:	4630      	mov	r0, r6
 8006cb6:	f000 f82f 	bl	8006d18 <__malloc_unlock>
 8006cba:	f104 000b 	add.w	r0, r4, #11
 8006cbe:	1d23      	adds	r3, r4, #4
 8006cc0:	f020 0007 	bic.w	r0, r0, #7
 8006cc4:	1ac2      	subs	r2, r0, r3
 8006cc6:	bf1c      	itt	ne
 8006cc8:	1a1b      	subne	r3, r3, r0
 8006cca:	50a3      	strne	r3, [r4, r2]
 8006ccc:	e7af      	b.n	8006c2e <_malloc_r+0x22>
 8006cce:	6862      	ldr	r2, [r4, #4]
 8006cd0:	42a3      	cmp	r3, r4
 8006cd2:	bf0c      	ite	eq
 8006cd4:	f8c8 2000 	streq.w	r2, [r8]
 8006cd8:	605a      	strne	r2, [r3, #4]
 8006cda:	e7eb      	b.n	8006cb4 <_malloc_r+0xa8>
 8006cdc:	4623      	mov	r3, r4
 8006cde:	6864      	ldr	r4, [r4, #4]
 8006ce0:	e7ae      	b.n	8006c40 <_malloc_r+0x34>
 8006ce2:	463c      	mov	r4, r7
 8006ce4:	687f      	ldr	r7, [r7, #4]
 8006ce6:	e7b6      	b.n	8006c56 <_malloc_r+0x4a>
 8006ce8:	461a      	mov	r2, r3
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	42a3      	cmp	r3, r4
 8006cee:	d1fb      	bne.n	8006ce8 <_malloc_r+0xdc>
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	6053      	str	r3, [r2, #4]
 8006cf4:	e7de      	b.n	8006cb4 <_malloc_r+0xa8>
 8006cf6:	230c      	movs	r3, #12
 8006cf8:	6033      	str	r3, [r6, #0]
 8006cfa:	4630      	mov	r0, r6
 8006cfc:	f000 f80c 	bl	8006d18 <__malloc_unlock>
 8006d00:	e794      	b.n	8006c2c <_malloc_r+0x20>
 8006d02:	6005      	str	r5, [r0, #0]
 8006d04:	e7d6      	b.n	8006cb4 <_malloc_r+0xa8>
 8006d06:	bf00      	nop
 8006d08:	200042b0 	.word	0x200042b0

08006d0c <__malloc_lock>:
 8006d0c:	4801      	ldr	r0, [pc, #4]	@ (8006d14 <__malloc_lock+0x8>)
 8006d0e:	f7ff bf01 	b.w	8006b14 <__retarget_lock_acquire_recursive>
 8006d12:	bf00      	nop
 8006d14:	200042a8 	.word	0x200042a8

08006d18 <__malloc_unlock>:
 8006d18:	4801      	ldr	r0, [pc, #4]	@ (8006d20 <__malloc_unlock+0x8>)
 8006d1a:	f7ff befc 	b.w	8006b16 <__retarget_lock_release_recursive>
 8006d1e:	bf00      	nop
 8006d20:	200042a8 	.word	0x200042a8

08006d24 <__ssputs_r>:
 8006d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d28:	688e      	ldr	r6, [r1, #8]
 8006d2a:	461f      	mov	r7, r3
 8006d2c:	42be      	cmp	r6, r7
 8006d2e:	680b      	ldr	r3, [r1, #0]
 8006d30:	4682      	mov	sl, r0
 8006d32:	460c      	mov	r4, r1
 8006d34:	4690      	mov	r8, r2
 8006d36:	d82d      	bhi.n	8006d94 <__ssputs_r+0x70>
 8006d38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d3c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006d40:	d026      	beq.n	8006d90 <__ssputs_r+0x6c>
 8006d42:	6965      	ldr	r5, [r4, #20]
 8006d44:	6909      	ldr	r1, [r1, #16]
 8006d46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d4a:	eba3 0901 	sub.w	r9, r3, r1
 8006d4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d52:	1c7b      	adds	r3, r7, #1
 8006d54:	444b      	add	r3, r9
 8006d56:	106d      	asrs	r5, r5, #1
 8006d58:	429d      	cmp	r5, r3
 8006d5a:	bf38      	it	cc
 8006d5c:	461d      	movcc	r5, r3
 8006d5e:	0553      	lsls	r3, r2, #21
 8006d60:	d527      	bpl.n	8006db2 <__ssputs_r+0x8e>
 8006d62:	4629      	mov	r1, r5
 8006d64:	f7ff ff52 	bl	8006c0c <_malloc_r>
 8006d68:	4606      	mov	r6, r0
 8006d6a:	b360      	cbz	r0, 8006dc6 <__ssputs_r+0xa2>
 8006d6c:	6921      	ldr	r1, [r4, #16]
 8006d6e:	464a      	mov	r2, r9
 8006d70:	f7ff fed2 	bl	8006b18 <memcpy>
 8006d74:	89a3      	ldrh	r3, [r4, #12]
 8006d76:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006d7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d7e:	81a3      	strh	r3, [r4, #12]
 8006d80:	6126      	str	r6, [r4, #16]
 8006d82:	6165      	str	r5, [r4, #20]
 8006d84:	444e      	add	r6, r9
 8006d86:	eba5 0509 	sub.w	r5, r5, r9
 8006d8a:	6026      	str	r6, [r4, #0]
 8006d8c:	60a5      	str	r5, [r4, #8]
 8006d8e:	463e      	mov	r6, r7
 8006d90:	42be      	cmp	r6, r7
 8006d92:	d900      	bls.n	8006d96 <__ssputs_r+0x72>
 8006d94:	463e      	mov	r6, r7
 8006d96:	6820      	ldr	r0, [r4, #0]
 8006d98:	4632      	mov	r2, r6
 8006d9a:	4641      	mov	r1, r8
 8006d9c:	f000 faa8 	bl	80072f0 <memmove>
 8006da0:	68a3      	ldr	r3, [r4, #8]
 8006da2:	1b9b      	subs	r3, r3, r6
 8006da4:	60a3      	str	r3, [r4, #8]
 8006da6:	6823      	ldr	r3, [r4, #0]
 8006da8:	4433      	add	r3, r6
 8006daa:	6023      	str	r3, [r4, #0]
 8006dac:	2000      	movs	r0, #0
 8006dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006db2:	462a      	mov	r2, r5
 8006db4:	f000 fac6 	bl	8007344 <_realloc_r>
 8006db8:	4606      	mov	r6, r0
 8006dba:	2800      	cmp	r0, #0
 8006dbc:	d1e0      	bne.n	8006d80 <__ssputs_r+0x5c>
 8006dbe:	6921      	ldr	r1, [r4, #16]
 8006dc0:	4650      	mov	r0, sl
 8006dc2:	f7ff feb7 	bl	8006b34 <_free_r>
 8006dc6:	230c      	movs	r3, #12
 8006dc8:	f8ca 3000 	str.w	r3, [sl]
 8006dcc:	89a3      	ldrh	r3, [r4, #12]
 8006dce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dd2:	81a3      	strh	r3, [r4, #12]
 8006dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd8:	e7e9      	b.n	8006dae <__ssputs_r+0x8a>
	...

08006ddc <_svfiprintf_r>:
 8006ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006de0:	4698      	mov	r8, r3
 8006de2:	898b      	ldrh	r3, [r1, #12]
 8006de4:	061b      	lsls	r3, r3, #24
 8006de6:	b09d      	sub	sp, #116	@ 0x74
 8006de8:	4607      	mov	r7, r0
 8006dea:	460d      	mov	r5, r1
 8006dec:	4614      	mov	r4, r2
 8006dee:	d510      	bpl.n	8006e12 <_svfiprintf_r+0x36>
 8006df0:	690b      	ldr	r3, [r1, #16]
 8006df2:	b973      	cbnz	r3, 8006e12 <_svfiprintf_r+0x36>
 8006df4:	2140      	movs	r1, #64	@ 0x40
 8006df6:	f7ff ff09 	bl	8006c0c <_malloc_r>
 8006dfa:	6028      	str	r0, [r5, #0]
 8006dfc:	6128      	str	r0, [r5, #16]
 8006dfe:	b930      	cbnz	r0, 8006e0e <_svfiprintf_r+0x32>
 8006e00:	230c      	movs	r3, #12
 8006e02:	603b      	str	r3, [r7, #0]
 8006e04:	f04f 30ff 	mov.w	r0, #4294967295
 8006e08:	b01d      	add	sp, #116	@ 0x74
 8006e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e0e:	2340      	movs	r3, #64	@ 0x40
 8006e10:	616b      	str	r3, [r5, #20]
 8006e12:	2300      	movs	r3, #0
 8006e14:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e16:	2320      	movs	r3, #32
 8006e18:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006e1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e20:	2330      	movs	r3, #48	@ 0x30
 8006e22:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006fc0 <_svfiprintf_r+0x1e4>
 8006e26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006e2a:	f04f 0901 	mov.w	r9, #1
 8006e2e:	4623      	mov	r3, r4
 8006e30:	469a      	mov	sl, r3
 8006e32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e36:	b10a      	cbz	r2, 8006e3c <_svfiprintf_r+0x60>
 8006e38:	2a25      	cmp	r2, #37	@ 0x25
 8006e3a:	d1f9      	bne.n	8006e30 <_svfiprintf_r+0x54>
 8006e3c:	ebba 0b04 	subs.w	fp, sl, r4
 8006e40:	d00b      	beq.n	8006e5a <_svfiprintf_r+0x7e>
 8006e42:	465b      	mov	r3, fp
 8006e44:	4622      	mov	r2, r4
 8006e46:	4629      	mov	r1, r5
 8006e48:	4638      	mov	r0, r7
 8006e4a:	f7ff ff6b 	bl	8006d24 <__ssputs_r>
 8006e4e:	3001      	adds	r0, #1
 8006e50:	f000 80a7 	beq.w	8006fa2 <_svfiprintf_r+0x1c6>
 8006e54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e56:	445a      	add	r2, fp
 8006e58:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e5a:	f89a 3000 	ldrb.w	r3, [sl]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	f000 809f 	beq.w	8006fa2 <_svfiprintf_r+0x1c6>
 8006e64:	2300      	movs	r3, #0
 8006e66:	f04f 32ff 	mov.w	r2, #4294967295
 8006e6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e6e:	f10a 0a01 	add.w	sl, sl, #1
 8006e72:	9304      	str	r3, [sp, #16]
 8006e74:	9307      	str	r3, [sp, #28]
 8006e76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006e7a:	931a      	str	r3, [sp, #104]	@ 0x68
 8006e7c:	4654      	mov	r4, sl
 8006e7e:	2205      	movs	r2, #5
 8006e80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e84:	484e      	ldr	r0, [pc, #312]	@ (8006fc0 <_svfiprintf_r+0x1e4>)
 8006e86:	f7f9 f9ab 	bl	80001e0 <memchr>
 8006e8a:	9a04      	ldr	r2, [sp, #16]
 8006e8c:	b9d8      	cbnz	r0, 8006ec6 <_svfiprintf_r+0xea>
 8006e8e:	06d0      	lsls	r0, r2, #27
 8006e90:	bf44      	itt	mi
 8006e92:	2320      	movmi	r3, #32
 8006e94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e98:	0711      	lsls	r1, r2, #28
 8006e9a:	bf44      	itt	mi
 8006e9c:	232b      	movmi	r3, #43	@ 0x2b
 8006e9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ea2:	f89a 3000 	ldrb.w	r3, [sl]
 8006ea6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ea8:	d015      	beq.n	8006ed6 <_svfiprintf_r+0xfa>
 8006eaa:	9a07      	ldr	r2, [sp, #28]
 8006eac:	4654      	mov	r4, sl
 8006eae:	2000      	movs	r0, #0
 8006eb0:	f04f 0c0a 	mov.w	ip, #10
 8006eb4:	4621      	mov	r1, r4
 8006eb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006eba:	3b30      	subs	r3, #48	@ 0x30
 8006ebc:	2b09      	cmp	r3, #9
 8006ebe:	d94b      	bls.n	8006f58 <_svfiprintf_r+0x17c>
 8006ec0:	b1b0      	cbz	r0, 8006ef0 <_svfiprintf_r+0x114>
 8006ec2:	9207      	str	r2, [sp, #28]
 8006ec4:	e014      	b.n	8006ef0 <_svfiprintf_r+0x114>
 8006ec6:	eba0 0308 	sub.w	r3, r0, r8
 8006eca:	fa09 f303 	lsl.w	r3, r9, r3
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	9304      	str	r3, [sp, #16]
 8006ed2:	46a2      	mov	sl, r4
 8006ed4:	e7d2      	b.n	8006e7c <_svfiprintf_r+0xa0>
 8006ed6:	9b03      	ldr	r3, [sp, #12]
 8006ed8:	1d19      	adds	r1, r3, #4
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	9103      	str	r1, [sp, #12]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	bfbb      	ittet	lt
 8006ee2:	425b      	neglt	r3, r3
 8006ee4:	f042 0202 	orrlt.w	r2, r2, #2
 8006ee8:	9307      	strge	r3, [sp, #28]
 8006eea:	9307      	strlt	r3, [sp, #28]
 8006eec:	bfb8      	it	lt
 8006eee:	9204      	strlt	r2, [sp, #16]
 8006ef0:	7823      	ldrb	r3, [r4, #0]
 8006ef2:	2b2e      	cmp	r3, #46	@ 0x2e
 8006ef4:	d10a      	bne.n	8006f0c <_svfiprintf_r+0x130>
 8006ef6:	7863      	ldrb	r3, [r4, #1]
 8006ef8:	2b2a      	cmp	r3, #42	@ 0x2a
 8006efa:	d132      	bne.n	8006f62 <_svfiprintf_r+0x186>
 8006efc:	9b03      	ldr	r3, [sp, #12]
 8006efe:	1d1a      	adds	r2, r3, #4
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	9203      	str	r2, [sp, #12]
 8006f04:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006f08:	3402      	adds	r4, #2
 8006f0a:	9305      	str	r3, [sp, #20]
 8006f0c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006fd0 <_svfiprintf_r+0x1f4>
 8006f10:	7821      	ldrb	r1, [r4, #0]
 8006f12:	2203      	movs	r2, #3
 8006f14:	4650      	mov	r0, sl
 8006f16:	f7f9 f963 	bl	80001e0 <memchr>
 8006f1a:	b138      	cbz	r0, 8006f2c <_svfiprintf_r+0x150>
 8006f1c:	9b04      	ldr	r3, [sp, #16]
 8006f1e:	eba0 000a 	sub.w	r0, r0, sl
 8006f22:	2240      	movs	r2, #64	@ 0x40
 8006f24:	4082      	lsls	r2, r0
 8006f26:	4313      	orrs	r3, r2
 8006f28:	3401      	adds	r4, #1
 8006f2a:	9304      	str	r3, [sp, #16]
 8006f2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f30:	4824      	ldr	r0, [pc, #144]	@ (8006fc4 <_svfiprintf_r+0x1e8>)
 8006f32:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006f36:	2206      	movs	r2, #6
 8006f38:	f7f9 f952 	bl	80001e0 <memchr>
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	d036      	beq.n	8006fae <_svfiprintf_r+0x1d2>
 8006f40:	4b21      	ldr	r3, [pc, #132]	@ (8006fc8 <_svfiprintf_r+0x1ec>)
 8006f42:	bb1b      	cbnz	r3, 8006f8c <_svfiprintf_r+0x1b0>
 8006f44:	9b03      	ldr	r3, [sp, #12]
 8006f46:	3307      	adds	r3, #7
 8006f48:	f023 0307 	bic.w	r3, r3, #7
 8006f4c:	3308      	adds	r3, #8
 8006f4e:	9303      	str	r3, [sp, #12]
 8006f50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f52:	4433      	add	r3, r6
 8006f54:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f56:	e76a      	b.n	8006e2e <_svfiprintf_r+0x52>
 8006f58:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f5c:	460c      	mov	r4, r1
 8006f5e:	2001      	movs	r0, #1
 8006f60:	e7a8      	b.n	8006eb4 <_svfiprintf_r+0xd8>
 8006f62:	2300      	movs	r3, #0
 8006f64:	3401      	adds	r4, #1
 8006f66:	9305      	str	r3, [sp, #20]
 8006f68:	4619      	mov	r1, r3
 8006f6a:	f04f 0c0a 	mov.w	ip, #10
 8006f6e:	4620      	mov	r0, r4
 8006f70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f74:	3a30      	subs	r2, #48	@ 0x30
 8006f76:	2a09      	cmp	r2, #9
 8006f78:	d903      	bls.n	8006f82 <_svfiprintf_r+0x1a6>
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d0c6      	beq.n	8006f0c <_svfiprintf_r+0x130>
 8006f7e:	9105      	str	r1, [sp, #20]
 8006f80:	e7c4      	b.n	8006f0c <_svfiprintf_r+0x130>
 8006f82:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f86:	4604      	mov	r4, r0
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e7f0      	b.n	8006f6e <_svfiprintf_r+0x192>
 8006f8c:	ab03      	add	r3, sp, #12
 8006f8e:	9300      	str	r3, [sp, #0]
 8006f90:	462a      	mov	r2, r5
 8006f92:	4b0e      	ldr	r3, [pc, #56]	@ (8006fcc <_svfiprintf_r+0x1f0>)
 8006f94:	a904      	add	r1, sp, #16
 8006f96:	4638      	mov	r0, r7
 8006f98:	f3af 8000 	nop.w
 8006f9c:	1c42      	adds	r2, r0, #1
 8006f9e:	4606      	mov	r6, r0
 8006fa0:	d1d6      	bne.n	8006f50 <_svfiprintf_r+0x174>
 8006fa2:	89ab      	ldrh	r3, [r5, #12]
 8006fa4:	065b      	lsls	r3, r3, #25
 8006fa6:	f53f af2d 	bmi.w	8006e04 <_svfiprintf_r+0x28>
 8006faa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006fac:	e72c      	b.n	8006e08 <_svfiprintf_r+0x2c>
 8006fae:	ab03      	add	r3, sp, #12
 8006fb0:	9300      	str	r3, [sp, #0]
 8006fb2:	462a      	mov	r2, r5
 8006fb4:	4b05      	ldr	r3, [pc, #20]	@ (8006fcc <_svfiprintf_r+0x1f0>)
 8006fb6:	a904      	add	r1, sp, #16
 8006fb8:	4638      	mov	r0, r7
 8006fba:	f000 f879 	bl	80070b0 <_printf_i>
 8006fbe:	e7ed      	b.n	8006f9c <_svfiprintf_r+0x1c0>
 8006fc0:	08007540 	.word	0x08007540
 8006fc4:	0800754a 	.word	0x0800754a
 8006fc8:	00000000 	.word	0x00000000
 8006fcc:	08006d25 	.word	0x08006d25
 8006fd0:	08007546 	.word	0x08007546

08006fd4 <_printf_common>:
 8006fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fd8:	4616      	mov	r6, r2
 8006fda:	4698      	mov	r8, r3
 8006fdc:	688a      	ldr	r2, [r1, #8]
 8006fde:	690b      	ldr	r3, [r1, #16]
 8006fe0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	bfb8      	it	lt
 8006fe8:	4613      	movlt	r3, r2
 8006fea:	6033      	str	r3, [r6, #0]
 8006fec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006ff0:	4607      	mov	r7, r0
 8006ff2:	460c      	mov	r4, r1
 8006ff4:	b10a      	cbz	r2, 8006ffa <_printf_common+0x26>
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	6033      	str	r3, [r6, #0]
 8006ffa:	6823      	ldr	r3, [r4, #0]
 8006ffc:	0699      	lsls	r1, r3, #26
 8006ffe:	bf42      	ittt	mi
 8007000:	6833      	ldrmi	r3, [r6, #0]
 8007002:	3302      	addmi	r3, #2
 8007004:	6033      	strmi	r3, [r6, #0]
 8007006:	6825      	ldr	r5, [r4, #0]
 8007008:	f015 0506 	ands.w	r5, r5, #6
 800700c:	d106      	bne.n	800701c <_printf_common+0x48>
 800700e:	f104 0a19 	add.w	sl, r4, #25
 8007012:	68e3      	ldr	r3, [r4, #12]
 8007014:	6832      	ldr	r2, [r6, #0]
 8007016:	1a9b      	subs	r3, r3, r2
 8007018:	42ab      	cmp	r3, r5
 800701a:	dc26      	bgt.n	800706a <_printf_common+0x96>
 800701c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007020:	6822      	ldr	r2, [r4, #0]
 8007022:	3b00      	subs	r3, #0
 8007024:	bf18      	it	ne
 8007026:	2301      	movne	r3, #1
 8007028:	0692      	lsls	r2, r2, #26
 800702a:	d42b      	bmi.n	8007084 <_printf_common+0xb0>
 800702c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007030:	4641      	mov	r1, r8
 8007032:	4638      	mov	r0, r7
 8007034:	47c8      	blx	r9
 8007036:	3001      	adds	r0, #1
 8007038:	d01e      	beq.n	8007078 <_printf_common+0xa4>
 800703a:	6823      	ldr	r3, [r4, #0]
 800703c:	6922      	ldr	r2, [r4, #16]
 800703e:	f003 0306 	and.w	r3, r3, #6
 8007042:	2b04      	cmp	r3, #4
 8007044:	bf02      	ittt	eq
 8007046:	68e5      	ldreq	r5, [r4, #12]
 8007048:	6833      	ldreq	r3, [r6, #0]
 800704a:	1aed      	subeq	r5, r5, r3
 800704c:	68a3      	ldr	r3, [r4, #8]
 800704e:	bf0c      	ite	eq
 8007050:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007054:	2500      	movne	r5, #0
 8007056:	4293      	cmp	r3, r2
 8007058:	bfc4      	itt	gt
 800705a:	1a9b      	subgt	r3, r3, r2
 800705c:	18ed      	addgt	r5, r5, r3
 800705e:	2600      	movs	r6, #0
 8007060:	341a      	adds	r4, #26
 8007062:	42b5      	cmp	r5, r6
 8007064:	d11a      	bne.n	800709c <_printf_common+0xc8>
 8007066:	2000      	movs	r0, #0
 8007068:	e008      	b.n	800707c <_printf_common+0xa8>
 800706a:	2301      	movs	r3, #1
 800706c:	4652      	mov	r2, sl
 800706e:	4641      	mov	r1, r8
 8007070:	4638      	mov	r0, r7
 8007072:	47c8      	blx	r9
 8007074:	3001      	adds	r0, #1
 8007076:	d103      	bne.n	8007080 <_printf_common+0xac>
 8007078:	f04f 30ff 	mov.w	r0, #4294967295
 800707c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007080:	3501      	adds	r5, #1
 8007082:	e7c6      	b.n	8007012 <_printf_common+0x3e>
 8007084:	18e1      	adds	r1, r4, r3
 8007086:	1c5a      	adds	r2, r3, #1
 8007088:	2030      	movs	r0, #48	@ 0x30
 800708a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800708e:	4422      	add	r2, r4
 8007090:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007094:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007098:	3302      	adds	r3, #2
 800709a:	e7c7      	b.n	800702c <_printf_common+0x58>
 800709c:	2301      	movs	r3, #1
 800709e:	4622      	mov	r2, r4
 80070a0:	4641      	mov	r1, r8
 80070a2:	4638      	mov	r0, r7
 80070a4:	47c8      	blx	r9
 80070a6:	3001      	adds	r0, #1
 80070a8:	d0e6      	beq.n	8007078 <_printf_common+0xa4>
 80070aa:	3601      	adds	r6, #1
 80070ac:	e7d9      	b.n	8007062 <_printf_common+0x8e>
	...

080070b0 <_printf_i>:
 80070b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070b4:	7e0f      	ldrb	r7, [r1, #24]
 80070b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80070b8:	2f78      	cmp	r7, #120	@ 0x78
 80070ba:	4691      	mov	r9, r2
 80070bc:	4680      	mov	r8, r0
 80070be:	460c      	mov	r4, r1
 80070c0:	469a      	mov	sl, r3
 80070c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80070c6:	d807      	bhi.n	80070d8 <_printf_i+0x28>
 80070c8:	2f62      	cmp	r7, #98	@ 0x62
 80070ca:	d80a      	bhi.n	80070e2 <_printf_i+0x32>
 80070cc:	2f00      	cmp	r7, #0
 80070ce:	f000 80d2 	beq.w	8007276 <_printf_i+0x1c6>
 80070d2:	2f58      	cmp	r7, #88	@ 0x58
 80070d4:	f000 80b9 	beq.w	800724a <_printf_i+0x19a>
 80070d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80070e0:	e03a      	b.n	8007158 <_printf_i+0xa8>
 80070e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80070e6:	2b15      	cmp	r3, #21
 80070e8:	d8f6      	bhi.n	80070d8 <_printf_i+0x28>
 80070ea:	a101      	add	r1, pc, #4	@ (adr r1, 80070f0 <_printf_i+0x40>)
 80070ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070f0:	08007149 	.word	0x08007149
 80070f4:	0800715d 	.word	0x0800715d
 80070f8:	080070d9 	.word	0x080070d9
 80070fc:	080070d9 	.word	0x080070d9
 8007100:	080070d9 	.word	0x080070d9
 8007104:	080070d9 	.word	0x080070d9
 8007108:	0800715d 	.word	0x0800715d
 800710c:	080070d9 	.word	0x080070d9
 8007110:	080070d9 	.word	0x080070d9
 8007114:	080070d9 	.word	0x080070d9
 8007118:	080070d9 	.word	0x080070d9
 800711c:	0800725d 	.word	0x0800725d
 8007120:	08007187 	.word	0x08007187
 8007124:	08007217 	.word	0x08007217
 8007128:	080070d9 	.word	0x080070d9
 800712c:	080070d9 	.word	0x080070d9
 8007130:	0800727f 	.word	0x0800727f
 8007134:	080070d9 	.word	0x080070d9
 8007138:	08007187 	.word	0x08007187
 800713c:	080070d9 	.word	0x080070d9
 8007140:	080070d9 	.word	0x080070d9
 8007144:	0800721f 	.word	0x0800721f
 8007148:	6833      	ldr	r3, [r6, #0]
 800714a:	1d1a      	adds	r2, r3, #4
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	6032      	str	r2, [r6, #0]
 8007150:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007154:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007158:	2301      	movs	r3, #1
 800715a:	e09d      	b.n	8007298 <_printf_i+0x1e8>
 800715c:	6833      	ldr	r3, [r6, #0]
 800715e:	6820      	ldr	r0, [r4, #0]
 8007160:	1d19      	adds	r1, r3, #4
 8007162:	6031      	str	r1, [r6, #0]
 8007164:	0606      	lsls	r6, r0, #24
 8007166:	d501      	bpl.n	800716c <_printf_i+0xbc>
 8007168:	681d      	ldr	r5, [r3, #0]
 800716a:	e003      	b.n	8007174 <_printf_i+0xc4>
 800716c:	0645      	lsls	r5, r0, #25
 800716e:	d5fb      	bpl.n	8007168 <_printf_i+0xb8>
 8007170:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007174:	2d00      	cmp	r5, #0
 8007176:	da03      	bge.n	8007180 <_printf_i+0xd0>
 8007178:	232d      	movs	r3, #45	@ 0x2d
 800717a:	426d      	negs	r5, r5
 800717c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007180:	4859      	ldr	r0, [pc, #356]	@ (80072e8 <_printf_i+0x238>)
 8007182:	230a      	movs	r3, #10
 8007184:	e011      	b.n	80071aa <_printf_i+0xfa>
 8007186:	6821      	ldr	r1, [r4, #0]
 8007188:	6833      	ldr	r3, [r6, #0]
 800718a:	0608      	lsls	r0, r1, #24
 800718c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007190:	d402      	bmi.n	8007198 <_printf_i+0xe8>
 8007192:	0649      	lsls	r1, r1, #25
 8007194:	bf48      	it	mi
 8007196:	b2ad      	uxthmi	r5, r5
 8007198:	2f6f      	cmp	r7, #111	@ 0x6f
 800719a:	4853      	ldr	r0, [pc, #332]	@ (80072e8 <_printf_i+0x238>)
 800719c:	6033      	str	r3, [r6, #0]
 800719e:	bf14      	ite	ne
 80071a0:	230a      	movne	r3, #10
 80071a2:	2308      	moveq	r3, #8
 80071a4:	2100      	movs	r1, #0
 80071a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80071aa:	6866      	ldr	r6, [r4, #4]
 80071ac:	60a6      	str	r6, [r4, #8]
 80071ae:	2e00      	cmp	r6, #0
 80071b0:	bfa2      	ittt	ge
 80071b2:	6821      	ldrge	r1, [r4, #0]
 80071b4:	f021 0104 	bicge.w	r1, r1, #4
 80071b8:	6021      	strge	r1, [r4, #0]
 80071ba:	b90d      	cbnz	r5, 80071c0 <_printf_i+0x110>
 80071bc:	2e00      	cmp	r6, #0
 80071be:	d04b      	beq.n	8007258 <_printf_i+0x1a8>
 80071c0:	4616      	mov	r6, r2
 80071c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80071c6:	fb03 5711 	mls	r7, r3, r1, r5
 80071ca:	5dc7      	ldrb	r7, [r0, r7]
 80071cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80071d0:	462f      	mov	r7, r5
 80071d2:	42bb      	cmp	r3, r7
 80071d4:	460d      	mov	r5, r1
 80071d6:	d9f4      	bls.n	80071c2 <_printf_i+0x112>
 80071d8:	2b08      	cmp	r3, #8
 80071da:	d10b      	bne.n	80071f4 <_printf_i+0x144>
 80071dc:	6823      	ldr	r3, [r4, #0]
 80071de:	07df      	lsls	r7, r3, #31
 80071e0:	d508      	bpl.n	80071f4 <_printf_i+0x144>
 80071e2:	6923      	ldr	r3, [r4, #16]
 80071e4:	6861      	ldr	r1, [r4, #4]
 80071e6:	4299      	cmp	r1, r3
 80071e8:	bfde      	ittt	le
 80071ea:	2330      	movle	r3, #48	@ 0x30
 80071ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80071f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80071f4:	1b92      	subs	r2, r2, r6
 80071f6:	6122      	str	r2, [r4, #16]
 80071f8:	f8cd a000 	str.w	sl, [sp]
 80071fc:	464b      	mov	r3, r9
 80071fe:	aa03      	add	r2, sp, #12
 8007200:	4621      	mov	r1, r4
 8007202:	4640      	mov	r0, r8
 8007204:	f7ff fee6 	bl	8006fd4 <_printf_common>
 8007208:	3001      	adds	r0, #1
 800720a:	d14a      	bne.n	80072a2 <_printf_i+0x1f2>
 800720c:	f04f 30ff 	mov.w	r0, #4294967295
 8007210:	b004      	add	sp, #16
 8007212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007216:	6823      	ldr	r3, [r4, #0]
 8007218:	f043 0320 	orr.w	r3, r3, #32
 800721c:	6023      	str	r3, [r4, #0]
 800721e:	4833      	ldr	r0, [pc, #204]	@ (80072ec <_printf_i+0x23c>)
 8007220:	2778      	movs	r7, #120	@ 0x78
 8007222:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007226:	6823      	ldr	r3, [r4, #0]
 8007228:	6831      	ldr	r1, [r6, #0]
 800722a:	061f      	lsls	r7, r3, #24
 800722c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007230:	d402      	bmi.n	8007238 <_printf_i+0x188>
 8007232:	065f      	lsls	r7, r3, #25
 8007234:	bf48      	it	mi
 8007236:	b2ad      	uxthmi	r5, r5
 8007238:	6031      	str	r1, [r6, #0]
 800723a:	07d9      	lsls	r1, r3, #31
 800723c:	bf44      	itt	mi
 800723e:	f043 0320 	orrmi.w	r3, r3, #32
 8007242:	6023      	strmi	r3, [r4, #0]
 8007244:	b11d      	cbz	r5, 800724e <_printf_i+0x19e>
 8007246:	2310      	movs	r3, #16
 8007248:	e7ac      	b.n	80071a4 <_printf_i+0xf4>
 800724a:	4827      	ldr	r0, [pc, #156]	@ (80072e8 <_printf_i+0x238>)
 800724c:	e7e9      	b.n	8007222 <_printf_i+0x172>
 800724e:	6823      	ldr	r3, [r4, #0]
 8007250:	f023 0320 	bic.w	r3, r3, #32
 8007254:	6023      	str	r3, [r4, #0]
 8007256:	e7f6      	b.n	8007246 <_printf_i+0x196>
 8007258:	4616      	mov	r6, r2
 800725a:	e7bd      	b.n	80071d8 <_printf_i+0x128>
 800725c:	6833      	ldr	r3, [r6, #0]
 800725e:	6825      	ldr	r5, [r4, #0]
 8007260:	6961      	ldr	r1, [r4, #20]
 8007262:	1d18      	adds	r0, r3, #4
 8007264:	6030      	str	r0, [r6, #0]
 8007266:	062e      	lsls	r6, r5, #24
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	d501      	bpl.n	8007270 <_printf_i+0x1c0>
 800726c:	6019      	str	r1, [r3, #0]
 800726e:	e002      	b.n	8007276 <_printf_i+0x1c6>
 8007270:	0668      	lsls	r0, r5, #25
 8007272:	d5fb      	bpl.n	800726c <_printf_i+0x1bc>
 8007274:	8019      	strh	r1, [r3, #0]
 8007276:	2300      	movs	r3, #0
 8007278:	6123      	str	r3, [r4, #16]
 800727a:	4616      	mov	r6, r2
 800727c:	e7bc      	b.n	80071f8 <_printf_i+0x148>
 800727e:	6833      	ldr	r3, [r6, #0]
 8007280:	1d1a      	adds	r2, r3, #4
 8007282:	6032      	str	r2, [r6, #0]
 8007284:	681e      	ldr	r6, [r3, #0]
 8007286:	6862      	ldr	r2, [r4, #4]
 8007288:	2100      	movs	r1, #0
 800728a:	4630      	mov	r0, r6
 800728c:	f7f8 ffa8 	bl	80001e0 <memchr>
 8007290:	b108      	cbz	r0, 8007296 <_printf_i+0x1e6>
 8007292:	1b80      	subs	r0, r0, r6
 8007294:	6060      	str	r0, [r4, #4]
 8007296:	6863      	ldr	r3, [r4, #4]
 8007298:	6123      	str	r3, [r4, #16]
 800729a:	2300      	movs	r3, #0
 800729c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072a0:	e7aa      	b.n	80071f8 <_printf_i+0x148>
 80072a2:	6923      	ldr	r3, [r4, #16]
 80072a4:	4632      	mov	r2, r6
 80072a6:	4649      	mov	r1, r9
 80072a8:	4640      	mov	r0, r8
 80072aa:	47d0      	blx	sl
 80072ac:	3001      	adds	r0, #1
 80072ae:	d0ad      	beq.n	800720c <_printf_i+0x15c>
 80072b0:	6823      	ldr	r3, [r4, #0]
 80072b2:	079b      	lsls	r3, r3, #30
 80072b4:	d413      	bmi.n	80072de <_printf_i+0x22e>
 80072b6:	68e0      	ldr	r0, [r4, #12]
 80072b8:	9b03      	ldr	r3, [sp, #12]
 80072ba:	4298      	cmp	r0, r3
 80072bc:	bfb8      	it	lt
 80072be:	4618      	movlt	r0, r3
 80072c0:	e7a6      	b.n	8007210 <_printf_i+0x160>
 80072c2:	2301      	movs	r3, #1
 80072c4:	4632      	mov	r2, r6
 80072c6:	4649      	mov	r1, r9
 80072c8:	4640      	mov	r0, r8
 80072ca:	47d0      	blx	sl
 80072cc:	3001      	adds	r0, #1
 80072ce:	d09d      	beq.n	800720c <_printf_i+0x15c>
 80072d0:	3501      	adds	r5, #1
 80072d2:	68e3      	ldr	r3, [r4, #12]
 80072d4:	9903      	ldr	r1, [sp, #12]
 80072d6:	1a5b      	subs	r3, r3, r1
 80072d8:	42ab      	cmp	r3, r5
 80072da:	dcf2      	bgt.n	80072c2 <_printf_i+0x212>
 80072dc:	e7eb      	b.n	80072b6 <_printf_i+0x206>
 80072de:	2500      	movs	r5, #0
 80072e0:	f104 0619 	add.w	r6, r4, #25
 80072e4:	e7f5      	b.n	80072d2 <_printf_i+0x222>
 80072e6:	bf00      	nop
 80072e8:	08007551 	.word	0x08007551
 80072ec:	08007562 	.word	0x08007562

080072f0 <memmove>:
 80072f0:	4288      	cmp	r0, r1
 80072f2:	b510      	push	{r4, lr}
 80072f4:	eb01 0402 	add.w	r4, r1, r2
 80072f8:	d902      	bls.n	8007300 <memmove+0x10>
 80072fa:	4284      	cmp	r4, r0
 80072fc:	4623      	mov	r3, r4
 80072fe:	d807      	bhi.n	8007310 <memmove+0x20>
 8007300:	1e43      	subs	r3, r0, #1
 8007302:	42a1      	cmp	r1, r4
 8007304:	d008      	beq.n	8007318 <memmove+0x28>
 8007306:	f811 2b01 	ldrb.w	r2, [r1], #1
 800730a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800730e:	e7f8      	b.n	8007302 <memmove+0x12>
 8007310:	4402      	add	r2, r0
 8007312:	4601      	mov	r1, r0
 8007314:	428a      	cmp	r2, r1
 8007316:	d100      	bne.n	800731a <memmove+0x2a>
 8007318:	bd10      	pop	{r4, pc}
 800731a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800731e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007322:	e7f7      	b.n	8007314 <memmove+0x24>

08007324 <_sbrk_r>:
 8007324:	b538      	push	{r3, r4, r5, lr}
 8007326:	4d06      	ldr	r5, [pc, #24]	@ (8007340 <_sbrk_r+0x1c>)
 8007328:	2300      	movs	r3, #0
 800732a:	4604      	mov	r4, r0
 800732c:	4608      	mov	r0, r1
 800732e:	602b      	str	r3, [r5, #0]
 8007330:	f7f9 fd20 	bl	8000d74 <_sbrk>
 8007334:	1c43      	adds	r3, r0, #1
 8007336:	d102      	bne.n	800733e <_sbrk_r+0x1a>
 8007338:	682b      	ldr	r3, [r5, #0]
 800733a:	b103      	cbz	r3, 800733e <_sbrk_r+0x1a>
 800733c:	6023      	str	r3, [r4, #0]
 800733e:	bd38      	pop	{r3, r4, r5, pc}
 8007340:	200042a4 	.word	0x200042a4

08007344 <_realloc_r>:
 8007344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007348:	4680      	mov	r8, r0
 800734a:	4615      	mov	r5, r2
 800734c:	460c      	mov	r4, r1
 800734e:	b921      	cbnz	r1, 800735a <_realloc_r+0x16>
 8007350:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007354:	4611      	mov	r1, r2
 8007356:	f7ff bc59 	b.w	8006c0c <_malloc_r>
 800735a:	b92a      	cbnz	r2, 8007368 <_realloc_r+0x24>
 800735c:	f7ff fbea 	bl	8006b34 <_free_r>
 8007360:	2400      	movs	r4, #0
 8007362:	4620      	mov	r0, r4
 8007364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007368:	f000 f81a 	bl	80073a0 <_malloc_usable_size_r>
 800736c:	4285      	cmp	r5, r0
 800736e:	4606      	mov	r6, r0
 8007370:	d802      	bhi.n	8007378 <_realloc_r+0x34>
 8007372:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007376:	d8f4      	bhi.n	8007362 <_realloc_r+0x1e>
 8007378:	4629      	mov	r1, r5
 800737a:	4640      	mov	r0, r8
 800737c:	f7ff fc46 	bl	8006c0c <_malloc_r>
 8007380:	4607      	mov	r7, r0
 8007382:	2800      	cmp	r0, #0
 8007384:	d0ec      	beq.n	8007360 <_realloc_r+0x1c>
 8007386:	42b5      	cmp	r5, r6
 8007388:	462a      	mov	r2, r5
 800738a:	4621      	mov	r1, r4
 800738c:	bf28      	it	cs
 800738e:	4632      	movcs	r2, r6
 8007390:	f7ff fbc2 	bl	8006b18 <memcpy>
 8007394:	4621      	mov	r1, r4
 8007396:	4640      	mov	r0, r8
 8007398:	f7ff fbcc 	bl	8006b34 <_free_r>
 800739c:	463c      	mov	r4, r7
 800739e:	e7e0      	b.n	8007362 <_realloc_r+0x1e>

080073a0 <_malloc_usable_size_r>:
 80073a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073a4:	1f18      	subs	r0, r3, #4
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	bfbc      	itt	lt
 80073aa:	580b      	ldrlt	r3, [r1, r0]
 80073ac:	18c0      	addlt	r0, r0, r3
 80073ae:	4770      	bx	lr

080073b0 <_init>:
 80073b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073b2:	bf00      	nop
 80073b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073b6:	bc08      	pop	{r3}
 80073b8:	469e      	mov	lr, r3
 80073ba:	4770      	bx	lr

080073bc <_fini>:
 80073bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073be:	bf00      	nop
 80073c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073c2:	bc08      	pop	{r3}
 80073c4:	469e      	mov	lr, r3
 80073c6:	4770      	bx	lr
